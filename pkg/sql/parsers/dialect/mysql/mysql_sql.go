// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const LOWER_THAN_ON = 57422
const ON = 57423
const USING = 57424
const SUBQUERY_AS_EXPR = 57425
const LOWER_THAN_STRING = 57426
const ID = 57427
const AT_ID = 57428
const AT_AT_ID = 57429
const STRING = 57430
const VALUE_ARG = 57431
const LIST_ARG = 57432
const COMMENT = 57433
const COMMENT_KEYWORD = 57434
const QUOTE_ID = 57435
const STAGE = 57436
const CREDENTIALS = 57437
const STAGES = 57438
const SNAPSHOTS = 57439
const INTEGRAL = 57440
const HEX = 57441
const FLOAT = 57442
const HEXNUM = 57443
const BIT_LITERAL = 57444
const NULL = 57445
const TRUE = 57446
const FALSE = 57447
const LOWER_THAN_CHARSET = 57448
const CHARSET = 57449
const UNIQUE = 57450
const KEY = 57451
const OR = 57452
const PIPE_CONCAT = 57453
const XOR = 57454
const AND = 57455
const NOT = 57456
const BETWEEN = 57457
const CASE = 57458
const WHEN = 57459
const THEN = 57460
const ELSE = 57461
const END = 57462
const ELSEIF = 57463
const LOWER_THAN_EQ = 57464
const LE = 57465
const GE = 57466
const NE = 57467
const NULL_SAFE_EQUAL = 57468
const IS = 57469
const LIKE = 57470
const REGEXP = 57471
const IN = 57472
const ASSIGNMENT = 57473
const ILIKE = 57474
const SHIFT_LEFT = 57475
const SHIFT_RIGHT = 57476
const DIV = 57477
const MOD = 57478
const UNARY = 57479
const COLLATE = 57480
const BINARY = 57481
const UNDERSCORE_BINARY = 57482
const INTERVAL = 57483
const OUT = 57484
const INOUT = 57485
const BEGIN = 57486
const START = 57487
const TRANSACTION = 57488
const COMMIT = 57489
const ROLLBACK = 57490
const WORK = 57491
const CONSISTENT = 57492
const SNAPSHOT = 57493
const CHAIN = 57494
const NO = 57495
const RELEASE = 57496
const PRIORITY = 57497
const QUICK = 57498
const BIT = 57499
const TINYINT = 57500
const SMALLINT = 57501
const MEDIUMINT = 57502
const INT = 57503
const INTEGER = 57504
const BIGINT = 57505
const INTNUM = 57506
const REAL = 57507
const DOUBLE = 57508
const FLOAT_TYPE = 57509
const DECIMAL = 57510
const NUMERIC = 57511
const DECIMAL_VALUE = 57512
const TIME = 57513
const TIMESTAMP = 57514
const DATETIME = 57515
const YEAR = 57516
const CHAR = 57517
const VARCHAR = 57518
const BOOL = 57519
const CHARACTER = 57520
const VARBINARY = 57521
const NCHAR = 57522
const TEXT = 57523
const TINYTEXT = 57524
const MEDIUMTEXT = 57525
const LONGTEXT = 57526
const DATALINK = 57527
const BLOB = 57528
const TINYBLOB = 57529
const MEDIUMBLOB = 57530
const LONGBLOB = 57531
const JSON = 57532
const ENUM = 57533
const UUID = 57534
const VECF32 = 57535
const VECF64 = 57536
const GEOMETRY = 57537
const POINT = 57538
const LINESTRING = 57539
const POLYGON = 57540
const GEOMETRYCOLLECTION = 57541
const MULTIPOINT = 57542
const MULTILINESTRING = 57543
const MULTIPOLYGON = 57544
const INT1 = 57545
const INT2 = 57546
const INT3 = 57547
const INT4 = 57548
const INT8 = 57549
const S3OPTION = 57550
const STAGEOPTION = 57551
const SQL_SMALL_RESULT = 57552
const SQL_BIG_RESULT = 57553
const SQL_BUFFER_RESULT = 57554
const LOW_PRIORITY = 57555
const HIGH_PRIORITY = 57556
const DELAYED = 57557
const CREATE = 57558
const ALTER = 57559
const DROP = 57560
const RENAME = 57561
const ANALYZE = 57562
const PHYPLAN = 57563
const ADD = 57564
const RETURNS = 57565
const SCHEMA = 57566
const TABLE = 57567
const SEQUENCE = 57568
const INDEX = 57569
const VIEW = 57570
const TO = 57571
const IGNORE = 57572
const IF = 57573
const PRIMARY = 57574
const COLUMN = 57575
const CONSTRAINT = 57576
const SPATIAL = 57577
const FULLTEXT = 57578
const FOREIGN = 57579
const KEY_BLOCK_SIZE = 57580
const SHOW = 57581
const DESCRIBE = 57582
const EXPLAIN = 57583
const DATE = 57584
const ESCAPE = 57585
const REPAIR = 57586
const OPTIMIZE = 57587
const TRUNCATE = 57588
const MAXVALUE = 57589
const PARTITION = 57590
const REORGANIZE = 57591
const LESS = 57592
const THAN = 57593
const PROCEDURE = 57594
const TRIGGER = 57595
const STATUS = 57596
const VARIABLES = 57597
const ROLE = 57598
const PROXY = 57599
const AVG_ROW_LENGTH = 57600
const STORAGE = 57601
const DISK = 57602
const MEMORY = 57603
const CHECKSUM = 57604
const COMPRESSION = 57605
const DATA = 57606
const DIRECTORY = 57607
const DELAY_KEY_WRITE = 57608
const ENCRYPTION = 57609
const ENGINE = 57610
const MAX_ROWS = 57611
const MIN_ROWS = 57612
const PACK_KEYS = 57613
const ROW_FORMAT = 57614
const STATS_AUTO_RECALC = 57615
const STATS_PERSISTENT = 57616
const STATS_SAMPLE_PAGES = 57617
const DYNAMIC = 57618
const COMPRESSED = 57619
const REDUNDANT = 57620
const COMPACT = 57621
const FIXED = 57622
const COLUMN_FORMAT = 57623
const AUTO_RANDOM = 57624
const ENGINE_ATTRIBUTE = 57625
const SECONDARY_ENGINE_ATTRIBUTE = 57626
const INSERT_METHOD = 57627
const RESTRICT = 57628
const CASCADE = 57629
const ACTION = 57630
const PARTIAL = 57631
const SIMPLE = 57632
const CHECK = 57633
const ENFORCED = 57634
const RANGE = 57635
const LIST = 57636
const ALGORITHM = 57637
const LINEAR = 57638
const PARTITIONS = 57639
const SUBPARTITION = 57640
const SUBPARTITIONS = 57641
const CLUSTER = 57642
const TYPE = 57643
const ANY = 57644
const SOME = 57645
const EXTERNAL = 57646
const LOCALFILE = 57647
const URL = 57648
const PREPARE = 57649
const DEALLOCATE = 57650
const RESET = 57651
const EXTENSION = 57652
const RETENTION = 57653
const PERIOD = 57654
const INCREMENT = 57655
const CYCLE = 57656
const MINVALUE = 57657
const PUBLICATION = 57658
const SUBSCRIPTIONS = 57659
const PUBLICATIONS = 57660
const PROPERTIES = 57661
const PARSER = 57662
const VISIBLE = 57663
const INVISIBLE = 57664
const BTREE = 57665
const HASH = 57666
const RTREE = 57667
const BSI = 57668
const IVFFLAT = 57669
const MASTER = 57670
const LLM = 57671
const ZONEMAP = 57672
const LEADING = 57673
const BOTH = 57674
const TRAILING = 57675
const UNKNOWN = 57676
const LISTS = 57677
const OP_TYPE = 57678
const REINDEX = 57679
const EXPIRE = 57680
const ACCOUNT = 57681
const ACCOUNTS = 57682
const UNLOCK = 57683
const DAY = 57684
const NEVER = 57685
const PUMP = 57686
const MYSQL_COMPATIBILITY_MODE = 57687
const UNIQUE_CHECK_ON_AUTOINCR = 57688
const MODIFY = 57689
const CHANGE = 57690
const SECOND = 57691
const ASCII = 57692
const COALESCE = 57693
const COLLATION = 57694
const HOUR = 57695
const MICROSECOND = 57696
const MINUTE = 57697
const MONTH = 57698
const QUARTER = 57699
const REPEAT = 57700
const REVERSE = 57701
const ROW_COUNT = 57702
const WEEK = 57703
const REVOKE = 57704
const FUNCTION = 57705
const PRIVILEGES = 57706
const TABLESPACE = 57707
const EXECUTE = 57708
const SUPER = 57709
const GRANT = 57710
const OPTION = 57711
const REFERENCES = 57712
const REPLICATION = 57713
const SLAVE = 57714
const CLIENT = 57715
const USAGE = 57716
const RELOAD = 57717
const FILE = 57718
const TEMPORARY = 57719
const ROUTINE = 57720
const EVENT = 57721
const SHUTDOWN = 57722
const NULLX = 57723
const AUTO_INCREMENT = 57724
const APPROXNUM = 57725
const SIGNED = 57726
const UNSIGNED = 57727
const ZEROFILL = 57728
const ENGINES = 57729
const LOW_CARDINALITY = 57730
const AUTOEXTEND_SIZE = 57731
const ADMIN_NAME = 57732
const RANDOM = 57733
const SUSPEND = 57734
const ATTRIBUTE = 57735
const HISTORY = 57736
const REUSE = 57737
const CURRENT = 57738
const OPTIONAL = 57739
const FAILED_LOGIN_ATTEMPTS = 57740
const PASSWORD_LOCK_TIME = 57741
const UNBOUNDED = 57742
const SECONDARY = 57743
const RESTRICTED = 57744
const USER = 57745
const IDENTIFIED = 57746
const CIPHER = 57747
const ISSUER = 57748
const X509 = 57749
const SUBJECT = 57750
const SAN = 57751
const REQUIRE = 57752
const SSL = 57753
const NONE = 57754
const PASSWORD = 57755
const SHARED = 57756
const EXCLUSIVE = 57757
const MAX_QUERIES_PER_HOUR = 57758
const MAX_UPDATES_PER_HOUR = 57759
const MAX_CONNECTIONS_PER_HOUR = 57760
const MAX_USER_CONNECTIONS = 57761
const FORMAT = 57762
const VERBOSE = 57763
const CONNECTION = 57764
const TRIGGERS = 57765
const PROFILES = 57766
const LOAD = 57767
const INLINE = 57768
const INFILE = 57769
const TERMINATED = 57770
const OPTIONALLY = 57771
const ENCLOSED = 57772
const ESCAPED = 57773
const STARTING = 57774
const LINES = 57775
const ROWS = 57776
const IMPORT = 57777
const DISCARD = 57778
const JSONTYPE = 57779
const MODUMP = 57780
const OVER = 57781
const PRECEDING = 57782
const FOLLOWING = 57783
const GROUPS = 57784
const DATABASES = 57785
const TABLES = 57786
const SEQUENCES = 57787
const EXTENDED = 57788
const FULL = 57789
const PROCESSLIST = 57790
const FIELDS = 57791
const COLUMNS = 57792
const OPEN = 57793
const ERRORS = 57794
const WARNINGS = 57795
const INDEXES = 57796
const SCHEMAS = 57797
const NODE = 57798
const LOCKS = 57799
const ROLES = 57800
const TABLE_NUMBER = 57801
const COLUMN_NUMBER = 57802
const TABLE_VALUES = 57803
const TABLE_SIZE = 57804
const NAMES = 57805
const GLOBAL = 57806
const PERSIST = 57807
const SESSION = 57808
const ISOLATION = 57809
const LEVEL = 57810
const READ = 57811
const WRITE = 57812
const ONLY = 57813
const REPEATABLE = 57814
const COMMITTED = 57815
const UNCOMMITTED = 57816
const SERIALIZABLE = 57817
const LOCAL = 57818
const EVENTS = 57819
const PLUGINS = 57820
const CURRENT_TIMESTAMP = 57821
const DATABASE = 57822
const CURRENT_TIME = 57823
const LOCALTIME = 57824
const LOCALTIMESTAMP = 57825
const UTC_DATE = 57826
const UTC_TIME = 57827
const UTC_TIMESTAMP = 57828
const REPLACE = 57829
const CONVERT = 57830
const SEPARATOR = 57831
const TIMESTAMPDIFF = 57832
const CURRENT_DATE = 57833
const CURRENT_USER = 57834
const CURRENT_ROLE = 57835
const SECOND_MICROSECOND = 57836
const MINUTE_MICROSECOND = 57837
const MINUTE_SECOND = 57838
const HOUR_MICROSECOND = 57839
const HOUR_SECOND = 57840
const HOUR_MINUTE = 57841
const DAY_MICROSECOND = 57842
const DAY_SECOND = 57843
const DAY_MINUTE = 57844
const DAY_HOUR = 57845
const YEAR_MONTH = 57846
const SQL_TSI_HOUR = 57847
const SQL_TSI_DAY = 57848
const SQL_TSI_WEEK = 57849
const SQL_TSI_MONTH = 57850
const SQL_TSI_QUARTER = 57851
const SQL_TSI_YEAR = 57852
const SQL_TSI_SECOND = 57853
const SQL_TSI_MINUTE = 57854
const RECURSIVE = 57855
const CONFIG = 57856
const DRAINER = 57857
const SOURCE = 57858
const STREAM = 57859
const HEADERS = 57860
const CONNECTOR = 57861
const CONNECTORS = 57862
const DAEMON = 57863
const PAUSE = 57864
const CANCEL = 57865
const TASK = 57866
const RESUME = 57867
const MATCH = 57868
const AGAINST = 57869
const BOOLEAN = 57870
const LANGUAGE = 57871
const WITH = 57872
const QUERY = 57873
const EXPANSION = 57874
const WITHOUT = 57875
const VALIDATION = 57876
const UPGRADE = 57877
const RETRY = 57878
const ADDDATE = 57879
const BIT_AND = 57880
const BIT_OR = 57881
const BIT_XOR = 57882
const CAST = 57883
const COUNT = 57884
const APPROX_COUNT = 57885
const APPROX_COUNT_DISTINCT = 57886
const SERIAL_EXTRACT = 57887
const APPROX_PERCENTILE = 57888
const CURDATE = 57889
const CURTIME = 57890
const DATE_ADD = 57891
const DATE_SUB = 57892
const EXTRACT = 57893
const GROUP_CONCAT = 57894
const MAX = 57895
const MID = 57896
const MIN = 57897
const NOW = 57898
const POSITION = 57899
const SESSION_USER = 57900
const STD = 57901
const STDDEV = 57902
const MEDIAN = 57903
const CLUSTER_CENTERS = 57904
const KMEANS = 57905
const STDDEV_POP = 57906
const STDDEV_SAMP = 57907
const SUBDATE = 57908
const SUBSTR = 57909
const SUBSTRING = 57910
const SUM = 57911
const SYSDATE = 57912
const SYSTEM_USER = 57913
const TRANSLATE = 57914
const TRIM = 57915
const VARIANCE = 57916
const VAR_POP = 57917
const VAR_SAMP = 57918
const AVG = 57919
const RANK = 57920
const ROW_NUMBER = 57921
const DENSE_RANK = 57922
const BIT_CAST = 57923
const BITMAP_BIT_POSITION = 57924
const BITMAP_BUCKET_NUMBER = 57925
const BITMAP_COUNT = 57926
const BITMAP_CONSTRUCT_AGG = 57927
const BITMAP_OR_AGG = 57928
const NEXTVAL = 57929
const SETVAL = 57930
const CURRVAL = 57931
const LASTVAL = 57932
const ARROW = 57933
const ROW = 57934
const OUTFILE = 57935
const HEADER = 57936
const MAX_FILE_SIZE = 57937
const FORCE_QUOTE = 57938
const PARALLEL = 57939
const STRICT = 57940
const UNUSED = 57941
const BINDINGS = 57942
const DO = 57943
const DECLARE = 57944
const LOOP = 57945
const WHILE = 57946
const LEAVE = 57947
const ITERATE = 57948
const UNTIL = 57949
const CALL = 57950
const PREV = 57951
const SLIDING = 57952
const FILL = 57953
const SPBEGIN = 57954
const BACKEND = 57955
const SERVERS = 57956
const HANDLER = 57957
const PERCENT = 57958
const SAMPLE = 57959
const MO_TS = 57960
const PITR = 57961
const CDC = 57962
const ROLLUP = 57963
const KILL = 57964
const BACKUP = 57965
const FILESYSTEM = 57966
const PARALLELISM = 57967
const RESTORE = 57968
const QUERY_RESULT = 57969

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"LLM",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"ROLLUP",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12564

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 134,
	11, 783,
	22, 783,
	-2, 776,
	-1, 157,
	242, 1199,
	244, 1097,
	-2, 1145,
	-1, 184,
	43, 606,
	244, 606,
	271, 613,
	272, 613,
	471, 606,
	-2, 641,
	-1, 224,
	648, 1960,
	-2, 516,
	-1, 528,
	648, 2081,
	-2, 396,
	-1, 586,
	648, 2140,
	-2, 394,
	-1, 587,
	648, 2141,
	-2, 395,
	-1, 588,
	648, 2142,
	-2, 397,
	-1, 723,
	323, 176,
	443, 176,
	444, 176,
	-2, 1864,
	-1, 789,
	84, 1650,
	-2, 2016,
	-1, 790,
	84, 1668,
	-2, 1987,
	-1, 794,
	84, 1669,
	-2, 2015,
	-1, 827,
	84, 1577,
	-2, 2215,
	-1, 828,
	84, 1578,
	-2, 2214,
	-1, 829,
	84, 1579,
	-2, 2204,
	-1, 830,
	84, 2176,
	-2, 2197,
	-1, 831,
	84, 2177,
	-2, 2198,
	-1, 832,
	84, 2178,
	-2, 2206,
	-1, 833,
	84, 2179,
	-2, 2186,
	-1, 834,
	84, 2180,
	-2, 2195,
	-1, 835,
	84, 2181,
	-2, 2207,
	-1, 836,
	84, 2182,
	-2, 2208,
	-1, 837,
	84, 2183,
	-2, 2213,
	-1, 838,
	84, 2184,
	-2, 2218,
	-1, 839,
	84, 2185,
	-2, 2219,
	-1, 840,
	84, 1646,
	-2, 2054,
	-1, 841,
	84, 1647,
	-2, 1848,
	-1, 842,
	84, 1648,
	-2, 2064,
	-1, 843,
	84, 1649,
	-2, 1857,
	-1, 845,
	84, 1652,
	-2, 1865,
	-1, 846,
	84, 1653,
	-2, 2088,
	-1, 848,
	84, 1656,
	-2, 1884,
	-1, 850,
	84, 1658,
	-2, 2100,
	-1, 851,
	84, 1659,
	-2, 2099,
	-1, 852,
	84, 1660,
	-2, 1928,
	-1, 853,
	84, 1661,
	-2, 2011,
	-1, 856,
	84, 1664,
	-2, 2111,
	-1, 858,
	84, 1666,
	-2, 2114,
	-1, 859,
	84, 1667,
	-2, 2116,
	-1, 860,
	84, 1670,
	-2, 2124,
	-1, 861,
	84, 1671,
	-2, 1996,
	-1, 862,
	84, 1672,
	-2, 2041,
	-1, 863,
	84, 1673,
	-2, 2006,
	-1, 864,
	84, 1674,
	-2, 2031,
	-1, 875,
	84, 1555,
	-2, 2209,
	-1, 876,
	84, 1556,
	-2, 2210,
	-1, 877,
	84, 1557,
	-2, 2211,
	-1, 976,
	466, 641,
	467, 641,
	-2, 607,
	-1, 1026,
	126, 1848,
	137, 1848,
	157, 1848,
	-2, 1822,
	-1, 1143,
	22, 810,
	-2, 759,
	-1, 1253,
	11, 783,
	22, 783,
	-2, 1435,
	-1, 1335,
	22, 810,
	-2, 759,
	-1, 1683,
	84, 1721,
	-2, 2013,
	-1, 1684,
	84, 1722,
	-2, 2014,
	-1, 1853,
	85, 969,
	-2, 975,
	-1, 2301,
	109, 1137,
	153, 1137,
	192, 1137,
	195, 1137,
	284, 1137,
	-2, 1130,
	-1, 2459,
	11, 783,
	22, 783,
	-2, 910,
	-1, 2492,
	85, 1808,
	158, 1808,
	-2, 1998,
	-1, 2493,
	85, 1808,
	158, 1808,
	-2, 1997,
	-1, 2494,
	85, 1784,
	158, 1784,
	-2, 1984,
	-1, 2495,
	85, 1785,
	158, 1785,
	-2, 1989,
	-1, 2496,
	85, 1786,
	158, 1786,
	-2, 1916,
	-1, 2497,
	85, 1787,
	158, 1787,
	-2, 1910,
	-1, 2498,
	85, 1788,
	158, 1788,
	-2, 1838,
	-1, 2499,
	85, 1789,
	158, 1789,
	-2, 1986,
	-1, 2500,
	85, 1790,
	158, 1790,
	-2, 1914,
	-1, 2501,
	85, 1791,
	158, 1791,
	-2, 1909,
	-1, 2502,
	85, 1792,
	158, 1792,
	-2, 1898,
	-1, 2503,
	85, 1808,
	158, 1808,
	-2, 1899,
	-1, 2504,
	85, 1808,
	158, 1808,
	-2, 1900,
	-1, 2506,
	85, 1797,
	158, 1797,
	-2, 2031,
	-1, 2507,
	85, 1774,
	158, 1774,
	-2, 2016,
	-1, 2508,
	85, 1806,
	158, 1806,
	-2, 1987,
	-1, 2509,
	85, 1806,
	158, 1806,
	-2, 2015,
	-1, 2510,
	85, 1806,
	158, 1806,
	-2, 1866,
	-1, 2511,
	85, 1804,
	158, 1804,
	-2, 2006,
	-1, 2512,
	85, 1801,
	158, 1801,
	-2, 1889,
	-1, 2513,
	84, 1755,
	85, 1755,
	158, 1755,
	401, 1755,
	402, 1755,
	403, 1755,
	-2, 1837,
	-1, 2514,
	84, 1756,
	85, 1756,
	158, 1756,
	401, 1756,
	402, 1756,
	403, 1756,
	-2, 1839,
	-1, 2515,
	84, 1757,
	85, 1757,
	158, 1757,
	401, 1757,
	402, 1757,
	403, 1757,
	-2, 2059,
	-1, 2516,
	84, 1759,
	85, 1759,
	158, 1759,
	401, 1759,
	402, 1759,
	403, 1759,
	-2, 1988,
	-1, 2517,
	84, 1761,
	85, 1761,
	158, 1761,
	401, 1761,
	402, 1761,
	403, 1761,
	-2, 1969,
	-1, 2518,
	84, 1763,
	85, 1763,
	158, 1763,
	401, 1763,
	402, 1763,
	403, 1763,
	-2, 1915,
	-1, 2519,
	84, 1765,
	85, 1765,
	158, 1765,
	401, 1765,
	402, 1765,
	403, 1765,
	-2, 1894,
	-1, 2520,
	84, 1766,
	85, 1766,
	158, 1766,
	401, 1766,
	402, 1766,
	403, 1766,
	-2, 1895,
	-1, 2521,
	84, 1768,
	85, 1768,
	158, 1768,
	401, 1768,
	402, 1768,
	403, 1768,
	-2, 1836,
	-1, 2522,
	85, 1811,
	158, 1811,
	401, 1811,
	402, 1811,
	403, 1811,
	-2, 1871,
	-1, 2523,
	85, 1811,
	158, 1811,
	401, 1811,
	402, 1811,
	403, 1811,
	-2, 1885,
	-1, 2524,
	85, 1814,
	158, 1814,
	401, 1814,
	402, 1814,
	403, 1814,
	-2, 1867,
	-1, 2525,
	85, 1814,
	158, 1814,
	401, 1814,
	402, 1814,
	403, 1814,
	-2, 1931,
	-1, 2526,
	85, 1811,
	158, 1811,
	401, 1811,
	402, 1811,
	403, 1811,
	-2, 1953,
	-1, 2740,
	109, 1137,
	153, 1137,
	192, 1137,
	195, 1137,
	284, 1137,
	-2, 1131,
	-1, 2758,
	82, 703,
	158, 703,
	-2, 1315,
	-1, 3175,
	195, 1137,
	308, 1403,
	-2, 1375,
	-1, 3355,
	109, 1137,
	153, 1137,
	192, 1137,
	195, 1137,
	-2, 1255,
	-1, 3357,
	109, 1137,
	153, 1137,
	192, 1137,
	195, 1137,
	-2, 1255,
	-1, 3369,
	82, 703,
	158, 703,
	-2, 1315,
	-1, 3390,
	195, 1137,
	308, 1403,
	-2, 1376,
	-1, 3540,
	109, 1137,
	153, 1137,
	192, 1137,
	195, 1137,
	-2, 1256,
	-1, 3568,
	85, 1217,
	158, 1217,
	-2, 1137,
	-1, 3710,
	85, 1217,
	158, 1217,
	-2, 1137,
	-1, 3868,
	85, 1221,
	158, 1221,
	-2, 1137,
	-1, 3915,
	85, 1222,
	158, 1222,
	-2, 1137,
}

const yyPrivate = 57344

const yyLast = 51656

var yyAct = [...]int{
	756, 733, 3961, 758, 3935, 2788, 213, 3954, 3872, 1939,
	1663, 3472, 3375, 3878, 3771, 3195, 3879, 3871, 3710, 3161,
	3828, 3797, 742, 3752, 3267, 3596, 3404, 3688, 1659, 2782,
	735, 3655, 3746, 1288, 3268, 3709, 1430, 3528, 3525, 1497,
	3527, 3775, 2699, 786, 3628, 2785, 623, 2581, 3476, 2791,
	3679, 1144, 1025, 1574, 3753, 3755, 3467, 1886, 3342, 1710,
	641, 3337, 647, 647, 2761, 3170, 731, 1138, 647, 665,
	674, 2348, 3537, 674, 3391, 3549, 1666, 3507, 3118, 3132,
	3092, 3265, 3358, 37, 2897, 3542, 1436, 2898, 2035, 2490,
	2049, 2032, 2896, 2877, 3121, 3327, 3360, 1724, 2811, 3190,
	3172, 2893, 2072, 198, 3307, 3179, 2453, 2147, 2616, 2963,
	686, 3253, 2351, 2923, 2105, 2488, 1586, 3233, 1998, 2728,
	682, 1899, 3099, 3103, 3097, 1490, 3095, 3141, 3094, 65,
	2312, 725, 3093, 3090, 3178, 2256, 1134, 3010, 2280, 2741,
	3067, 133, 2255, 36, 1570, 2143, 1563, 2130, 730, 2560,
	2113, 2936, 671, 1816, 2542, 2114, 2078, 2106, 2717, 1578,
	949, 2946, 1575, 2028, 2813, 2439, 2142, 2434, 2712, 2793,
	2349, 1929, 2753, 6, 1399, 1862, 1439, 2301, 209, 8,
	2454, 2002, 1366, 208, 7, 2486, 2311, 1537, 1082, 623,
	2177, 1657, 2144, 734, 1506, 1475, 640, 1585, 1470, 1440,
	2344, 1419, 2292, 2154, 1898, 724, 2649, 1717, 1697, 2112,
	743, 2109, 1606, 213, 1648, 213, 2094, 1073, 1074, 1160,
	1589, 1858, 1544, 679, 647, 1999, 2068, 732, 1474, 1018,
	1861, 2461, 1656, 1472, 23, 2435, 1725, 985, 1837, 948,
	656, 108, 1528, 1431, 879, 1402, 199, 659, 726, 688,
	673, 1415, 925, 689, 24, 17, 10, 1019, 1536, 27,
	195, 191, 946, 931, 2648, 1333, 685, 3762, 2151, 971,
	1289, 1662, 881, 3673, 2684, 882, 2684, 16, 1221, 1222,
	1223, 1220, 2684, 1070, 3372, 955, 3148, 1221, 1222, 1223,
	1220, 1221, 1222, 1223, 1220, 2980, 2463, 2979, 2161, 3500,
	3345, 1139, 1140, 622, 2604, 3260, 2548, 1829, 2546, 643,
	1066, 2543, 1547, 1065, 2545, 197, 1069, 1551, 1071, 642,
	14, 2254, 1034, 677, 3736, 15, 901, 652, 670, 899,
	196, 61, 187, 158, 1031, 1066, 1033, 1598, 1066, 1005,
	2260, 1830, 3077, 726, 1352, 2264, 666, 1355, 188, 3060,
	3057, 939, 33, 940, 3062, 179, 952, 953, 1597, 189,
	3059, 3946, 1453, 1823, 1348, 1549, 1052, 995, 3465, 1139,
	2959, 1064, 648, 2957, 2083, 3741, 8, 3635, 132, 3629,
	3468, 7, 3266, 2676, 2674, 1221, 1222, 1223, 1220, 668,
	2127, 920, 1283, 119, 669, 1221, 1222, 1223, 1220, 3757,
	3037, 192, 2108, 880, 2100, 934, 2389, 930, 891, 196,
	61, 187, 158, 1219, 3508, 3512, 1361, 3359, 196, 196,
	2303, 667, 1183, 2302, 196, 900, 2678, 196, 898, 1584,
	3695, 3660, 3808, 2598, 2590, 196, 1593, 1841, 1053, 901,
	684, 2747, 1838, 1514, 2148, 196, 61, 187, 158, 1360,
	997, 1358, 899, 996, 1035, 196, 3035, 196, 196, 61,
	187, 158, 2159, 911, 1029, 1391, 1590, 1030, 2891, 1374,
	2296, 196, 132, 1615, 3696, 1604, 2480, 1362, 140, 141,
	192, 142, 143, 2982, 2701, 1000, 998, 1218, 999, 1592,
	2745, 981, 2481, 1449, 1649, 192, 1450, 1653, 192, 2929,
	956, 2930, 2931, 2971, 1832, 1601, 192, 2012, 2013, 2011,
	3853, 1047, 1042, 1037, 1041, 1045, 192, 892, 2561, 132,
	2045, 1652, 1629, 2702, 1843, 1844, 192, 958, 1603, 192,
	3165, 3061, 3058, 1476, 994, 1478, 936, 3662, 929, 1050,
	2748, 3163, 192, 1040, 1437, 1438, 1198, 933, 932, 1199,
	157, 185, 194, 186, 117, 870, 3489, 869, 871, 872,
	2714, 873, 874, 896, 914, 1427, 2467, 1211, 921, 2466,
	2715, 1913, 2468, 184, 178, 177, 1006, 1201, 1665, 2243,
	67, 1435, 1216, 1028, 1452, 1434, 1437, 1438, 928, 1027,
	3760, 3841, 980, 978, 1048, 3759, 3840, 3758, 3839, 1002,
	3760, 3903, 3759, 1051, 1373, 3758, 3846, 938, 1654, 3744,
	1550, 1548, 927, 3939, 3940, 977, 926, 3833, 2964, 2713,
	3882, 3883, 913, 3830, 3632, 2163, 1038, 951, 919, 3269,
	2585, 3269, 1651, 1759, 2679, 3830, 1149, 3112, 957, 990,
	2029, 180, 181, 182, 2832, 647, 647, 3768, 1163, 1166,
	1049, 917, 3747, 3748, 3749, 3750, 647, 1148, 2381, 2965,
	1196, 2966, 986, 1004, 2703, 157, 1638, 194, 3282, 3328,
	2155, 3850, 1163, 1166, 2019, 190, 674, 674, 1669, 647,
	196, 61, 187, 158, 3335, 1644, 2424, 2720, 184, 937,
	1039, 3517, 3000, 3109, 3110, 2291, 128, 3488, 987, 991,
	183, 3114, 129, 3104, 2091, 3490, 1147, 1557, 1556, 3111,
	937, 1076, 2704, 3664, 3665, 918, 1214, 1215, 974, 2160,
	972, 976, 994, 1463, 1197, 3416, 973, 970, 969, 3848,
	975, 960, 961, 959, 962, 963, 964, 965, 2998, 992,
	1003, 993, 1261, 1213, 671, 671, 671, 2595, 1451, 1650,
	2677, 192, 988, 989, 3855, 3856, 3761, 1375, 683, 130,
	1351, 183, 3672, 3285, 2387, 3004, 1425, 1046, 3851, 3852,
	1186, 2683, 60, 1140, 3466, 1140, 2043, 2044, 3881, 2958,
	2883, 2023, 1209, 1210, 3669, 1141, 2427, 2428, 1148, 984,
	1140, 2426, 935, 1034, 1178, 983, 3108, 3514, 1668, 1667,
	3432, 1200, 3625, 1043, 1599, 1031, 1044, 1033, 2261, 1831,
	979, 2149, 2697, 2981, 3431, 3119, 3311, 2432, 1292, 2483,
	2138, 62, 2978, 2149, 1208, 639, 2182, 1066, 1066, 2150,
	1066, 924, 1066, 2149, 1066, 1066, 720, 1293, 672, 722,
	3428, 1675, 1678, 1679, 721, 2166, 2168, 2169, 1165, 1164,
	3167, 2698, 1676, 1255, 2162, 3910, 138, 193, 1140, 139,
	3193, 3130, 3194, 894, 159, 3142, 1034, 3191, 3192, 58,
	3790, 3785, 1165, 1164, 2754, 676, 2879, 3694, 1031, 1001,
	1033, 3700, 2419, 1406, 675, 2889, 2298, 672, 982, 3162,
	3421, 2544, 3068, 3776, 954, 950, 1354, 3692, 1356, 1167,
	62, 1552, 895, 3792, 1158, 3376, 1054, 1036, 1151, 1153,
	1156, 3106, 1437, 1438, 1371, 641, 3383, 880, 2787, 1143,
	670, 670, 670, 1437, 1438, 1142, 1171, 1172, 1030, 3120,
	1331, 912, 910, 1336, 1175, 131, 45, 3798, 666, 666,
	666, 3513, 59, 159, 1414, 2276, 5, 2675, 949, 62,
	1177, 1839, 159, 159, 1136, 1262, 135, 136, 159, 2599,
	137, 159, 3197, 3854, 3659, 1257, 1258, 1259, 1260, 159,
	3663, 1639, 193, 3320, 1640, 196, 61, 187, 158, 159,
	2030, 668, 668, 668, 1833, 3318, 669, 669, 669, 159,
	3081, 159, 159, 1426, 2422, 196, 61, 187, 158, 1203,
	3433, 647, 1204, 2719, 1465, 159, 1191, 1433, 647, 1193,
	3001, 623, 623, 667, 667, 667, 3767, 3120, 3115, 3105,
	3587, 623, 623, 3847, 3972, 1501, 1501, 3647, 647, 3648,
	1206, 3666, 2833, 995, 2834, 2835, 3647, 1194, 3648, 1155,
	2399, 3319, 3701, 897, 2483, 3642, 192, 727, 2398, 674,
	1529, 641, 3479, 1499, 1499, 1169, 1540, 1540, 3693, 1152,
	2723, 2724, 2354, 2726, 3518, 1503, 192, 213, 1486, 1304,
	1305, 2020, 2367, 1485, 3957, 2722, 623, 3128, 2347, 2370,
	3168, 1508, 1645, 3650, 1176, 2783, 2784, 1677, 2787, 3576,
	3680, 2167, 3650, 1412, 1368, 1369, 2420, 2421, 1429, 1428,
	1378, 1379, 1380, 1381, 1382, 1157, 1384, 1411, 939, 672,
	940, 1372, 1390, 1202, 3649, 3107, 997, 3799, 3582, 996,
	1187, 1410, 3171, 3649, 3714, 1464, 1135, 3056, 1582, 2390,
	3361, 2347, 3463, 1587, 3870, 1558, 2369, 3191, 3192, 3272,
	1596, 1367, 684, 1337, 1252, 3827, 1189, 1335, 1495, 1496,
	1473, 3187, 1207, 3072, 2591, 3196, 2925, 2927, 1192, 1195,
	1183, 2364, 1416, 1420, 1420, 1420, 1421, 1422, 2472, 1627,
	3589, 62, 2385, 3224, 2152, 2018, 1996, 1205, 2022, 1383,
	1377, 3003, 2368, 1501, 1188, 1501, 1148, 1416, 1416, 2941,
	2942, 1389, 1388, 1387, 1605, 2354, 2357, 2689, 1405, 2357,
	1386, 2353, 1007, 678, 3321, 1413, 2355, 995, 3129, 1835,
	1398, 2830, 1423, 3958, 159, 3188, 3308, 1396, 1591, 941,
	1442, 1443, 2694, 1445, 1446, 1602, 1447, 943, 944, 945,
	1561, 2275, 1564, 1565, 2269, 1664, 2164, 2165, 671, 1454,
	1455, 671, 671, 1441, 1566, 1567, 1444, 1530, 1182, 1572,
	1573, 2178, 1365, 1501, 1637, 3713, 3012, 3011, 1067, 1068,
	2356, 1190, 1846, 1072, 1034, 2271, 2270, 1484, 1480, 1482,
	1723, 1034, 1847, 1595, 1363, 1364, 3498, 3074, 1493, 1494,
	2268, 1711, 1845, 902, 1772, 1580, 1577, 3980, 2411, 1581,
	997, 1509, 903, 996, 3550, 1521, 652, 1376, 1407, 1527,
	1646, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693,
	1694, 1695, 1696, 1542, 3869, 1541, 2294, 1708, 1709, 3597,
	3598, 3599, 3604, 3601, 3603, 3602, 3600, 2926, 3973, 2358,
	1661, 3837, 2358, 1553, 2353, 2347, 2352, 3147, 2350, 2355,
	3643, 3578, 3965, 1180, 3644, 3577, 3955, 3956, 1219, 3643,
	1148, 1622, 1623, 3754, 3583, 3584, 1834, 2732, 2736, 2737,
	2738, 2733, 2735, 2734, 938, 1781, 3230, 1642, 1814, 1850,
	1851, 3273, 2363, 1757, 1529, 1680, 2361, 1181, 2483, 1859,
	1501, 1864, 1865, 3226, 1867, 1465, 647, 1613, 1608, 906,
	1616, 647, 3968, 2356, 1501, 1762, 1763, 1764, 949, 1825,
	1154, 1887, 1614, 3372, 672, 1617, 1618, 1008, 1778, 1183,
	1501, 1779, 1636, 2760, 670, 2861, 1465, 670, 670, 3189,
	1181, 665, 2690, 1817, 672, 1634, 1633, 1630, 1792, 1793,
	1635, 1655, 666, 2293, 1836, 666, 666, 1660, 2452, 1771,
	905, 1912, 2563, 1626, 908, 907, 2212, 1813, 1632, 2211,
	1919, 1919, 1625, 1465, 1658, 1465, 1465, 1699, 995, 647,
	647, 2759, 1986, 1859, 1990, 2157, 62, 1501, 1993, 1994,
	1145, 1754, 1755, 2009, 1758, 668, 1706, 1707, 668, 668,
	669, 3963, 1773, 669, 669, 1407, 62, 3952, 623, 2283,
	1501, 1631, 3917, 1866, 3890, 1780, 1145, 1782, 3324, 1783,
	1784, 1785, 2384, 1057, 1062, 1063, 1868, 667, 3884, 159,
	667, 667, 2284, 2285, 2852, 2853, 3866, 647, 1859, 1501,
	2451, 2054, 1219, 647, 647, 647, 682, 682, 3818, 159,
	3793, 1916, 2948, 2064, 2065, 2066, 2067, 2071, 3284, 2248,
	2073, 997, 2590, 1786, 996, 2046, 1941, 213, 1820, 3781,
	213, 213, 2191, 213, 3964, 3201, 1988, 1855, 1856, 1857,
	3918, 1221, 1222, 1223, 1220, 3918, 3199, 3891, 3734, 1870,
	1871, 1872, 1873, 3733, 1922, 3066, 3064, 1815, 2452, 3727,
	1821, 3676, 1221, 1222, 1223, 1220, 2944, 2038, 2039, 3867,
	3726, 1647, 2706, 1772, 1772, 2116, 1900, 2024, 1902, 1903,
	2327, 3676, 2760, 2157, 1772, 1772, 2015, 3033, 2017, 3725,
	1416, 2132, 1909, 2056, 2057, 2058, 1854, 1219, 2680, 2036,
	2037, 2580, 3782, 3724, 1420, 3230, 1905, 3615, 2190, 1883,
	2053, 1890, 1891, 3704, 1921, 2031, 1420, 1884, 1910, 2851,
	1888, 3735, 2126, 1332, 1887, 2568, 2316, 2452, 1501, 2146,
	2082, 1863, 3676, 2085, 2086, 2148, 2088, 1896, 1897, 1923,
	1924, 1901, 1895, 3676, 2118, 1879, 2010, 2862, 2864, 2865,
	2866, 2863, 2340, 3703, 1906, 1907, 2253, 2247, 2069, 1591,
	3675, 1893, 3676, 3438, 1987, 1918, 1920, 2246, 2219, 1221,
	1222, 1223, 1220, 2139, 1917, 2041, 3676, 1992, 1059, 1060,
	1061, 2140, 3385, 671, 1997, 1995, 2157, 3351, 2014, 3300,
	2016, 1397, 884, 885, 886, 887, 2122, 2025, 884, 885,
	886, 887, 1034, 1714, 1487, 1034, 2762, 1221, 1222, 1223,
	1220, 3334, 1183, 1034, 1031, 2326, 1033, 2593, 1863, 2051,
	2592, 2584, 2334, 2207, 2192, 1031, 2157, 1033, 2111, 2059,
	2060, 2052, 3436, 3676, 2048, 3296, 2483, 1458, 1459, 2111,
	1461, 1462, 3209, 1466, 1467, 1468, 2079, 2137, 2077, 2076,
	2920, 2175, 2176, 2188, 2655, 3386, 1224, 2354, 2357, 2647,
	3352, 2606, 3301, 2062, 1254, 1610, 2096, 2588, 1269, 1168,
	1658, 1512, 2576, 1264, 1132, 1127, 1516, 1517, 1518, 1519,
	1520, 1252, 1522, 1523, 1524, 1525, 1526, 2570, 2565, 2557,
	1532, 1533, 1534, 1535, 2125, 2123, 2117, 2171, 1272, 2040,
	2555, 2128, 1236, 3152, 2995, 3786, 2553, 2551, 3297, 2315,
	1034, 2258, 2259, 2249, 2262, 3210, 2226, 2265, 1408, 3551,
	2136, 904, 1031, 2452, 1033, 1403, 2225, 1219, 2080, 1404,
	2134, 2543, 1219, 725, 1219, 2210, 647, 647, 647, 1491,
	2316, 2141, 889, 2201, 2200, 2566, 3258, 2135, 889, 3787,
	1492, 647, 647, 647, 647, 1489, 3974, 1761, 1760, 670,
	2571, 2566, 2558, 3552, 2313, 1239, 1240, 1241, 1242, 1243,
	1236, 3364, 2170, 2556, 3362, 2319, 1465, 666, 2179, 2552,
	2552, 2199, 2316, 2156, 2220, 2221, 2248, 2223, 1619, 1219,
	2172, 2358, 1699, 3143, 2230, 3943, 2353, 2347, 2352, 1219,
	2350, 2355, 1465, 2382, 2184, 1761, 1760, 1448, 1219, 1417,
	2173, 2174, 2342, 3763, 3674, 3365, 1219, 1219, 3363, 2376,
	668, 1787, 1788, 1789, 1790, 669, 3639, 1794, 1795, 1796,
	1797, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1234, 1244, 1245, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1236, 667, 3580, 1219, 2356, 2157, 1488, 3579, 3565,
	3521, 1620, 2331, 771, 134, 909, 2333, 3344, 2335, 134,
	1798, 3231, 3144, 3222, 2383, 1705, 647, 1919, 3216, 3211,
	3123, 2886, 2885, 2613, 2730, 2456, 2456, 2009, 2456, 759,
	769, 1702, 1704, 1701, 2685, 1703, 2242, 2244, 2245, 760,
	2603, 761, 765, 768, 764, 762, 763, 623, 623, 1403,
	2569, 2474, 2121, 1404, 2250, 1148, 3145, 2120, 1791, 2119,
	1393, 1501, 647, 2336, 1221, 1222, 1223, 1220, 1418, 653,
	1392, 1150, 134, 2537, 1718, 3261, 647, 2950, 2277, 2346,
	1849, 2345, 1148, 2527, 641, 1292, 1718, 2295, 2185, 2478,
	1540, 1545, 2009, 2080, 766, 2532, 3838, 2534, 1223, 1220,
	1220, 213, 2323, 3592, 1293, 2582, 2583, 2329, 3591, 2967,
	2330, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1236, 2822,
	2320, 2339, 2820, 1539, 1539, 2799, 767, 2469, 2797, 2470,
	3571, 2491, 2458, 3971, 2462, 2668, 1420, 2669, 2332, 3522,
	3523, 2573, 3948, 3515, 3332, 2460, 3026, 1271, 2475, 2476,
	1221, 1222, 1223, 1220, 2359, 2360, 1034, 2365, 2586, 1776,
	1270, 2547, 2146, 3947, 3894, 3865, 2485, 3864, 1031, 1501,
	1033, 1501, 2873, 1501, 1777, 2328, 3788, 2700, 1148, 2871,
	1221, 1222, 1223, 1220, 3730, 3729, 2605, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1225, 3717, 1032, 3970, 3707, 2596,
	3967, 134, 3516, 3333, 2538, 3697, 3630, 3025, 3338, 3554,
	2531, 3553, 1501, 2633, 2433, 2429, 134, 3377, 134, 2869,
	1221, 1222, 1223, 1220, 2639, 3875, 2464, 2600, 2640, 3259,
	3366, 2872, 3331, 1501, 1221, 1222, 1223, 1220, 2870, 2858,
	1499, 1244, 1245, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	1236, 2632, 1221, 1222, 1223, 1220, 2479, 1221, 1222, 1223,
	1220, 1499, 1221, 1222, 1223, 1220, 2615, 1221, 1222, 1223,
	1220, 2539, 2641, 2203, 3212, 3113, 1546, 2530, 2868, 2482,
	2528, 2687, 2688, 2991, 3014, 2691, 2962, 1670, 1671, 1672,
	1673, 1674, 2644, 2645, 2961, 2856, 2729, 2617, 2857, 2617,
	2055, 2642, 2855, 1148, 1480, 1482, 1889, 1148, 1221, 1222,
	1223, 1220, 2854, 2846, 1501, 2840, 1545, 1465, 2621, 1221,
	1222, 1223, 1220, 1990, 2839, 2602, 2189, 1904, 2838, 1715,
	2837, 2758, 2681, 1719, 1720, 1721, 1722, 2764, 2559, 2597,
	2471, 2202, 1756, 1911, 2252, 2099, 1914, 1915, 3774, 2611,
	1766, 2098, 2707, 2587, 2589, 2774, 2491, 2672, 2097, 2578,
	2594, 1221, 1222, 1223, 1220, 1148, 2093, 2092, 1221, 1222,
	1223, 1220, 2195, 2796, 2047, 1221, 1222, 1223, 1220, 1842,
	1148, 1148, 1148, 1919, 2607, 2608, 1148, 1840, 2806, 2807,
	2808, 2809, 1148, 2816, 1611, 2817, 2818, 1350, 2819, 2623,
	2821, 3343, 1818, 1221, 1222, 1223, 1220, 2742, 2746, 720,
	3098, 2816, 722, 3667, 3668, 2743, 1130, 721, 3966, 2755,
	1483, 3473, 3941, 2456, 2775, 3909, 2610, 3908, 3905, 3844,
	2802, 2803, 3843, 3656, 3825, 2805, 3494, 2874, 2727, 3770,
	1658, 2812, 1221, 1222, 1223, 1220, 1941, 623, 2777, 2765,
	3482, 3526, 3751, 1990, 1034, 3805, 3742, 1148, 2009, 2009,
	2009, 2009, 2009, 1221, 1222, 1223, 1220, 1221, 1222, 1223,
	1220, 3721, 1148, 2009, 1129, 1892, 2456, 1221, 1222, 1223,
	1220, 3716, 2709, 2794, 2711, 2880, 3715, 2794, 3671, 2725,
	3658, 3657, 2708, 1501, 3631, 3481, 3573, 2790, 3533, 3519,
	1908, 3501, 2749, 3499, 647, 647, 2899, 3425, 2763, 2007,
	2650, 2651, 2801, 8, 3496, 3493, 2656, 2757, 7, 3288,
	2187, 2899, 1221, 1222, 1223, 1220, 3492, 3471, 3469, 2773,
	2776, 3446, 2779, 3443, 1221, 1222, 1223, 1220, 3440, 2792,
	3029, 2878, 3330, 3329, 2798, 3801, 1221, 1222, 1223, 1220,
	2804, 3028, 3326, 3316, 2795, 3309, 2916, 3293, 1818, 3291,
	213, 3219, 3218, 1818, 1818, 213, 3213, 1221, 1222, 1223,
	1220, 646, 646, 3207, 3206, 2836, 3124, 654, 1221, 1222,
	1223, 1220, 3085, 3084, 3080, 1863, 2766, 1772, 3078, 1772,
	3076, 3073, 2977, 3071, 2257, 2771, 2772, 1221, 1222, 1223,
	1220, 2945, 3005, 2848, 3002, 2990, 2960, 2934, 2887, 2867,
	2859, 1501, 2881, 2081, 2997, 2849, 2084, 2847, 2843, 2087,
	2842, 2841, 2089, 2695, 2693, 2388, 2686, 2682, 2391, 2392,
	2393, 2394, 2395, 2396, 2397, 2914, 2579, 2400, 2401, 2402,
	2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2918, 2412,
	2413, 2414, 2415, 2416, 2917, 2417, 2919, 2272, 2935, 2932,
	1565, 826, 825, 2951, 134, 134, 134, 1032, 2955, 2972,
	1566, 1567, 2267, 1817, 1572, 1573, 2266, 2131, 2976, 2263,
	2983, 2928, 2102, 2900, 2901, 2902, 2903, 2904, 1235, 1234,
	1244, 1245, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1236,
	3027, 3019, 2974, 3021, 2884, 1580, 1577, 2214, 2095, 1581,
	1848, 3075, 2984, 1828, 1827, 1034, 2953, 2952, 2949, 3079,
	1612, 1515, 2994, 3082, 3083, 2999, 1034, 1221, 1222, 1223,
	1220, 1148, 2666, 654, 1401, 1359, 1357, 3101, 2970, 2975,
	1253, 2968, 2973, 1300, 1296, 1295, 2665, 3117, 2987, 2986,
	2985, 3652, 647, 1133, 893, 196, 2993, 187, 158, 1221,
	1222, 1223, 1220, 3651, 3640, 3133, 1148, 3006, 3495, 647,
	3480, 1148, 1148, 1221, 1222, 1223, 1220, 3013, 3007, 2664,
	2009, 2313, 2181, 3151, 3357, 3356, 2186, 3355, 3022, 3023,
	3323, 3017, 3018, 3020, 3305, 3303, 3302, 3299, 3065, 3298,
	2321, 2322, 2376, 2663, 3292, 3290, 1221, 1222, 1223, 1220,
	2324, 2325, 3274, 3264, 3177, 3127, 3180, 3087, 3180, 3180,
	3263, 3249, 3248, 1148, 3153, 2662, 192, 2198, 3088, 3063,
	1221, 1222, 1223, 1220, 3031, 2205, 3024, 3016, 3015, 3009,
	3070, 3202, 2943, 2705, 3069, 3198, 2742, 2554, 2550, 1501,
	1501, 3136, 1221, 1222, 1223, 1220, 3140, 2222, 3155, 2549,
	2231, 2789, 2227, 2228, 2229, 3086, 2224, 2232, 2233, 2234,
	2235, 2236, 2237, 2238, 2239, 2240, 2241, 1499, 1499, 2218,
	3200, 2217, 3160, 2216, 2215, 2213, 1338, 2209, 3203, 3204,
	3164, 3166, 2208, 2206, 2197, 1034, 647, 1034, 3149, 3135,
	3126, 3175, 1034, 3101, 3138, 3139, 2194, 1031, 2193, 1033,
	2101, 3150, 1465, 3146, 1811, 1990, 1990, 1462, 1810, 3176,
	1809, 1775, 3185, 1774, 3159, 1765, 1513, 2346, 1034, 2345,
	2624, 3038, 3039, 3708, 1511, 3893, 1290, 3040, 3041, 3042,
	3043, 196, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051,
	3052, 3053, 3181, 3182, 3800, 3186, 3737, 3723, 1126, 1122,
	1123, 1124, 1125, 3718, 2629, 1148, 2628, 2627, 2625, 2633,
	2716, 1560, 2529, 3608, 3590, 3923, 2661, 3586, 3262, 3817,
	2660, 2536, 3564, 3548, 3456, 3454, 3208, 1235, 1234, 1244,
	1245, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1236, 3423,
	3422, 3419, 3183, 1221, 1222, 1223, 1220, 1221, 1222, 1223,
	1220, 3418, 192, 3384, 2491, 3381, 3227, 3228, 2609, 3379,
	3346, 1571, 1562, 1576, 647, 3215, 3214, 1579, 3221, 1568,
	3217, 3220, 1400, 3225, 1510, 2626, 3815, 2659, 653, 3158,
	3238, 2875, 1235, 1234, 1244, 1245, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1236, 2800, 2751, 3242, 2750, 3245, 3246,
	3247, 2658, 2828, 2829, 1221, 1222, 1223, 1220, 2744, 2710,
	134, 3569, 2657, 2667, 2564, 2473, 2418, 2844, 2845, 2314,
	3251, 3257, 2654, 1818, 2286, 1818, 2251, 1700, 1221, 1222,
	1223, 1220, 2436, 192, 2073, 3313, 2061, 1853, 3315, 1221,
	1222, 1223, 1220, 2882, 1818, 1818, 3275, 1824, 1643, 1221,
	1222, 1223, 1220, 1594, 1569, 1349, 3277, 3276, 2915, 2653,
	1334, 1330, 3281, 3280, 2617, 1329, 3294, 1328, 1327, 2442,
	2446, 2447, 2448, 2443, 2450, 2444, 2449, 1539, 134, 2445,
	647, 1990, 1326, 3286, 3317, 134, 1221, 1222, 1223, 1220,
	1325, 3350, 2652, 1324, 646, 1137, 1323, 1322, 134, 1321,
	1320, 134, 134, 1319, 1318, 1146, 1317, 2456, 2009, 3369,
	1316, 1315, 1314, 1313, 134, 1312, 1311, 2630, 2631, 1221,
	1222, 1223, 1220, 2646, 3306, 1310, 1309, 2572, 1174, 2575,
	1308, 1307, 3387, 3322, 3310, 1148, 3312, 1306, 1303, 1302,
	3325, 1301, 1299, 1298, 3177, 1297, 1294, 1287, 1148, 1286,
	1221, 1222, 1223, 1220, 1284, 1283, 1282, 1281, 1280, 1279,
	1148, 1278, 3435, 1277, 1276, 1275, 1501, 2767, 1274, 1273,
	3339, 2636, 2770, 1268, 1267, 1266, 3371, 1265, 1185, 1034,
	1131, 3813, 3341, 3811, 3388, 647, 1034, 1990, 3234, 3235,
	3378, 1148, 3380, 2614, 1499, 2612, 2620, 3427, 1221, 1222,
	1223, 1220, 1713, 2634, 2635, 3437, 3420, 3417, 2318, 2812,
	2300, 2637, 2638, 3367, 1173, 3921, 3374, 3880, 3237, 2731,
	213, 3410, 1221, 1222, 1223, 1220, 3368, 2643, 2484, 1221,
	1222, 1223, 1220, 1148, 2104, 1184, 3240, 2911, 3239, 2907,
	2899, 3450, 2912, 3460, 3458, 3447, 2909, 3426, 3429, 3424,
	2906, 2910, 3459, 2908, 2905, 1670, 1818, 2913, 3434, 2447,
	2448, 2577, 118, 64, 3439, 63, 2567, 1394, 3122, 3444,
	3441, 3442, 3497, 1881, 1882, 3448, 3445, 2386, 3451, 3449,
	3452, 3504, 2899, 3430, 3173, 1148, 3174, 2442, 2446, 2447,
	2448, 2443, 2450, 2444, 2449, 2824, 3478, 2445, 1876, 1877,
	1878, 3457, 2825, 2826, 2827, 3278, 3279, 1148, 1501, 1501,
	2989, 3252, 1979, 3133, 1554, 2562, 2601, 3474, 1607, 3475,
	1588, 3502, 3503, 3464, 2273, 3541, 2063, 3541, 649, 650,
	1179, 651, 3462, 3096, 2768, 2769, 1499, 1711, 2582, 2583,
	1148, 3558, 1148, 3089, 3535, 3536, 2778, 3531, 2752, 2338,
	3561, 2309, 3563, 1885, 1852, 3932, 3529, 1761, 1760, 1501,
	1345, 1346, 3720, 3511, 3205, 3510, 3509, 2430, 3532, 1343,
	1344, 3506, 3491, 1341, 1342, 1339, 1340, 647, 3520, 1148,
	1148, 2425, 1991, 1148, 1148, 1457, 1456, 1711, 1212, 1664,
	3546, 1664, 3534, 3545, 3371, 3244, 2937, 2118, 2274, 3538,
	2133, 3610, 1409, 1385, 1432, 3900, 3898, 3605, 3858, 3835,
	3557, 3566, 3567, 3834, 3832, 1887, 2008, 3620, 3574, 3594,
	3595, 3572, 3417, 3606, 3607, 3570, 3626, 3627, 3529, 3529,
	3777, 3738, 3529, 3529, 3623, 3622, 3410, 3559, 3470, 1501,
	3295, 3271, 3270, 3255, 2371, 1034, 2341, 3617, 1609, 3254,
	1460, 2947, 1745, 1407, 3314, 3611, 2992, 1471, 2692, 3653,
	3925, 3924, 3925, 2302, 3616, 2196, 1353, 1499, 1170, 3924,
	3646, 3588, 3618, 3250, 1145, 200, 3, 1507, 3638, 884,
	885, 886, 887, 1424, 1145, 72, 2, 3944, 3945, 1,
	134, 2673, 3633, 134, 134, 1822, 134, 1347, 888, 883,
	1477, 2465, 3641, 3645, 949, 2042, 1505, 1826, 890, 3689,
	3683, 2921, 2922, 3243, 2924, 3483, 2696, 3484, 2153, 2888,
	2423, 2290, 3116, 1395, 3637, 1148, 942, 1767, 1624, 1056,
	1162, 1621, 1161, 1159, 1716, 3706, 1032, 773, 3712, 134,
	2107, 2876, 3670, 3677, 2850, 3619, 3931, 1032, 3960, 3892,
	3934, 2954, 1641, 2956, 3685, 3684, 757, 3686, 3478, 3826,
	3743, 3896, 3745, 134, 3636, 3702, 2158, 3698, 1217, 1148,
	2969, 967, 1818, 814, 1664, 1501, 784, 1818, 1285, 1600,
	3036, 3034, 1058, 3681, 783, 3336, 2721, 3624, 2131, 2940,
	3691, 1055, 3719, 968, 2090, 3740, 3634, 1555, 1559, 2337,
	3699, 3796, 3568, 1499, 3169, 2786, 1583, 3791, 3382, 3728,
	3154, 3487, 3485, 3486, 3731, 3156, 3157, 690, 3529, 2021,
	1741, 3766, 621, 3008, 1016, 3756, 3609, 1738, 2103, 1034,
	691, 1740, 1737, 1739, 1743, 1744, 2317, 1148, 3739, 1742,
	3849, 3722, 922, 2299, 1253, 923, 915, 3030, 2740, 2739,
	1681, 1226, 3778, 1698, 3054, 3055, 1263, 729, 2183, 2718,
	3405, 2933, 3764, 71, 70, 69, 68, 221, 775, 220,
	3654, 3524, 3769, 3822, 3772, 3936, 755, 754, 753, 752,
	3795, 751, 750, 2441, 1148, 3773, 3529, 2440, 3780, 2438,
	2437, 2004, 2003, 1501, 2070, 3789, 3820, 3131, 3823, 3810,
	3812, 3814, 3816, 2815, 2810, 1930, 3794, 1928, 1469, 2366,
	3824, 2373, 1927, 3803, 3877, 3806, 3807, 3585, 2860, 3477,
	1875, 1499, 2362, 1947, 3809, 2831, 1944, 1943, 2823, 3581,
	3575, 1975, 3819, 3529, 3687, 3540, 3389, 3390, 3831, 3829,
	1501, 3229, 3396, 3689, 2308, 1081, 3347, 3348, 3349, 1077,
	1079, 1080, 3353, 3354, 3842, 1078, 2622, 3223, 2343, 3868,
	3241, 3091, 2282, 2281, 2279, 3876, 2278, 3859, 1499, 3562,
	3861, 1370, 3765, 3845, 3862, 3863, 3505, 2489, 2487, 3860,
	1128, 3236, 3857, 1748, 1749, 1750, 1751, 1752, 1753, 1746,
	1747, 3232, 2115, 2129, 2988, 2005, 2001, 3885, 2000, 3886,
	2890, 3887, 2431, 3888, 3899, 3889, 3901, 3902, 3184, 3661,
	3897, 1880, 916, 3895, 2297, 41, 115, 105, 175, 1148,
	56, 3756, 3904, 1235, 1234, 1244, 1245, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1236, 1869, 174, 55, 3712, 3913,
	1874, 3560, 113, 172, 54, 100, 99, 3915, 3916, 3914,
	112, 3919, 3930, 3922, 3938, 3920, 170, 3937, 53, 205,
	3926, 3927, 3928, 3929, 204, 207, 206, 203, 3911, 2540,
	2541, 3949, 3942, 1148, 202, 1543, 201, 3836, 3544, 878,
	44, 43, 176, 3950, 42, 3795, 3951, 3953, 106, 57,
	40, 39, 3394, 3959, 3962, 1235, 1234, 1244, 1245, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1236, 38, 1925, 1926,
	34, 13, 12, 35, 22, 21, 1100, 3969, 1628, 20,
	26, 32, 1664, 31, 127, 3938, 3976, 126, 3937, 3975,
	30, 125, 3406, 124, 123, 3962, 3977, 122, 121, 120,
	29, 3981, 19, 48, 47, 3397, 46, 9, 116, 111,
	2459, 109, 28, 110, 107, 103, 3392, 101, 83, 82,
	81, 3414, 3415, 96, 95, 94, 2050, 3393, 93, 92,
	91, 89, 2050, 2050, 2050, 90, 966, 80, 79, 78,
	77, 76, 98, 104, 102, 196, 61, 187, 158, 87,
	97, 88, 86, 3370, 85, 84, 75, 74, 73, 156,
	155, 154, 3373, 188, 3398, 153, 152, 150, 151, 149,
	179, 148, 147, 146, 189, 2008, 145, 144, 49, 50,
	51, 52, 166, 165, 134, 167, 169, 171, 168, 173,
	163, 161, 164, 132, 3287, 162, 160, 66, 11, 1085,
	114, 3289, 18, 25, 4, 0, 0, 0, 119, 0,
	3612, 3613, 0, 0, 0, 3614, 192, 0, 3032, 1108,
	1112, 1114, 1116, 1118, 1119, 1121, 0, 1126, 1122, 1123,
	1124, 1125, 3304, 1103, 1104, 1105, 1106, 1083, 1084, 1109,
	0, 1086, 0, 1088, 1089, 1090, 1091, 1087, 1092, 1093,
	1094, 1095, 1096, 1099, 1101, 1097, 1098, 1107, 0, 0,
	3413, 0, 2352, 0, 0, 1111, 1113, 1115, 1117, 1120,
	0, 0, 1235, 1234, 1244, 1245, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1236, 0, 0, 0, 3402, 0, 0,
	0, 0, 0, 140, 141, 0, 142, 143, 1247, 0,
	1251, 0, 0, 0, 1102, 0, 0, 0, 0, 3399,
	3403, 3401, 3400, 2180, 0, 0, 1248, 1250, 1246, 0,
	1249, 1235, 1234, 1244, 1245, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1236, 0, 0, 0, 0, 1235, 1234, 1244,
	1245, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1236, 3408,
	3409, 1235, 1234, 1244, 1245, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1236, 0, 0, 157, 185, 194, 186, 117,
	0, 3555, 3556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1818, 0, 0, 184, 178,
	177, 0, 0, 0, 3732, 67, 0, 0, 3416, 1818,
	0, 0, 3453, 0, 0, 3455, 0, 0, 134, 0,
	3395, 0, 0, 0, 0, 0, 3407, 0, 134, 0,
	0, 0, 3461, 0, 0, 0, 1976, 0, 0, 0,
	0, 1937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2618, 2619, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 181, 182, 0,
	0, 1979, 1946, 3779, 0, 2287, 2288, 2289, 3783, 3784,
	0, 1980, 1981, 0, 0, 0, 0, 0, 0, 0,
	2304, 2305, 2306, 2307, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 1945, 0, 3804,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 1953, 183, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2008, 2008, 2008, 2008, 2008, 3412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2008, 702, 701, 708,
	698, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	706, 0, 707, 711, 130, 0, 692, 0, 0, 0,
	0, 0, 1969, 0, 0, 0, 716, 60, 0, 0,
	1110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3411, 0, 0, 0, 0, 0, 0, 3906,
	3907, 720, 0, 0, 722, 0, 62, 0, 0, 721,
	0, 0, 0, 134, 0, 0, 0, 0, 134, 0,
	0, 1507, 0, 1745, 1936, 1938, 1935, 0, 0, 1932,
	0, 0, 0, 0, 1957, 2050, 0, 0, 0, 134,
	0, 138, 193, 0, 139, 1963, 0, 0, 0, 159,
	134, 0, 0, 1948, 58, 1931, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1951, 1985, 0, 3678, 1952,
	1954, 1956, 0, 1958, 1959, 1960, 1964, 1965, 1966, 1968,
	1971, 1972, 1973, 0, 0, 0, 0, 0, 0, 0,
	1961, 1970, 1962, 1976, 0, 0, 0, 0, 1937, 0,
	0, 0, 1940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 45, 0, 0, 0, 0, 1977, 59, 1979, 1946,
	0, 0, 0, 0, 0, 0, 0, 0, 1980, 1981,
	0, 135, 136, 0, 0, 137, 0, 693, 695, 694,
	0, 0, 1976, 0, 1933, 1934, 0, 0, 700, 0,
	0, 0, 0, 0, 1945, 0, 0, 0, 0, 0,
	704, 0, 1974, 0, 0, 0, 0, 719, 0, 0,
	0, 1953, 0, 0, 697, 0, 0, 1979, 1272, 1950,
	0, 1741, 0, 0, 0, 0, 1949, 0, 1738, 0,
	0, 0, 1740, 1737, 1739, 1743, 1744, 0, 0, 0,
	1742, 0, 0, 0, 0, 0, 0, 0, 0, 1032,
	1967, 134, 0, 0, 0, 0, 134, 0, 0, 1955,
	3711, 0, 0, 2008, 0, 0, 0, 0, 0, 0,
	1953, 0, 1983, 1982, 0, 0, 0, 0, 0, 1969,
	0, 0, 134, 0, 0, 0, 3802, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2756, 0, 0, 0, 0, 1942, 0, 699, 703, 709,
	0, 710, 712, 0, 0, 713, 714, 715, 1969, 0,
	717, 718, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1936, 2781, 1935, 0, 0, 2780, 0, 0, 0,
	0, 1957, 0, 0, 0, 0, 0, 1978, 3873, 0,
	1984, 0, 1963, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 1748, 1749, 1750, 1751, 1752, 1753,
	1746, 1747, 1951, 1985, 0, 0, 1952, 1954, 1956, 0,
	1958, 1959, 1960, 1964, 1965, 1966, 1968, 1971, 1972, 1973,
	0, 0, 0, 0, 0, 0, 0, 1961, 1970, 1962,
	1957, 0, 0, 0, 0, 0, 0, 0, 0, 1940,
	0, 1963, 0, 0, 0, 0, 0, 0, 3873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1951, 1985, 1977, 0, 1952, 1954, 1956, 0, 1958,
	1959, 1960, 1964, 1965, 1966, 1968, 1971, 1972, 1973, 0,
	0, 0, 0, 0, 0, 0, 1961, 1970, 1962, 0,
	0, 1933, 1934, 0, 0, 0, 3873, 0, 0, 0,
	0, 0, 0, 2938, 2939, 0, 696, 0, 0, 1974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1977, 0, 0, 0, 1950, 0, 0, 0,
	0, 0, 0, 1949, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3979, 0, 0, 0, 0, 1967, 0, 0,
	0, 0, 0, 0, 0, 0, 1955, 0, 1974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1983,
	1982, 0, 0, 0, 0, 1950, 0, 0, 0, 0,
	0, 0, 1949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 702, 701, 708, 698, 0,
	134, 0, 0, 0, 0, 0, 1967, 705, 706, 0,
	707, 711, 0, 0, 692, 1955, 0, 0, 0, 0,
	0, 1100, 1942, 0, 716, 0, 0, 0, 0, 0,
	0, 1976, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 2008, 1075, 0, 0, 0, 0, 0, 0, 0,
	3539, 0, 0, 0, 1978, 0, 1979, 1984, 1108, 1112,
	1114, 1116, 1118, 1119, 1121, 0, 1126, 1122, 1123, 1124,
	1125, 0, 1103, 1104, 1105, 1106, 1083, 1084, 1109, 0,
	1086, 0, 1088, 1089, 1090, 1091, 1087, 1092, 1093, 1094,
	1095, 1096, 1099, 1101, 1097, 1098, 1107, 0, 0, 192,
	0, 0, 0, 0, 1111, 1113, 1115, 1117, 1120, 1953,
	0, 0, 0, 3547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3125, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 3137, 0,
	0, 0, 0, 134, 1108, 1112, 1114, 1116, 1118, 1119,
	1121, 0, 1126, 1122, 1123, 1124, 1125, 0, 1103, 1104,
	1105, 1106, 1083, 1084, 1109, 0, 1086, 1969, 1088, 1089,
	1090, 1091, 1087, 1092, 1093, 1094, 1095, 1096, 1099, 1101,
	1097, 1098, 1107, 0, 0, 0, 0, 0, 0, 0,
	1111, 1113, 1115, 1117, 1120, 693, 695, 694, 0, 0,
	0, 0, 0, 0, 0, 0, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 704, 0,
	0, 0, 0, 0, 0, 719, 0, 0, 0, 1102,
	0, 0, 697, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1963, 0, 0, 0, 0, 2050, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1951, 1985, 0, 0, 1952, 1954, 1956, 0, 1958, 1959,
	1960, 1964, 1965, 1966, 1968, 1971, 1972, 1973, 0, 0,
	0, 0, 0, 0, 0, 1961, 1970, 1962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1977, 0, 0, 0, 699, 703, 709, 0, 710,
	712, 0, 0, 713, 714, 715, 0, 0, 717, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1974, 0, 0,
	0, 0, 0, 3283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1950, 0, 0, 0, 0, 0,
	0, 1949, 0, 0, 0, 0, 0, 0, 0, 1110,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1967, 0, 0, 0, 0,
	0, 0, 0, 0, 1955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 791, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 782, 548, 498, 416, 370, 566, 565, 2050,
	0, 849, 857, 0, 696, 1110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 772, 826,
	825, 759, 769, 0, 0, 299, 219, 493, 614, 495,
	494, 760, 0, 761, 765, 768, 764, 762, 763, 0,
	841, 0, 3543, 0, 0, 0, 0, 728, 740, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 738, 0, 0, 0, 0,
	792, 0, 739, 0, 0, 787, 766, 770, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 2050, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 767, 790,
	794, 320, 863, 788, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	864, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 785, 0, 611, 0, 449, 0, 0, 847,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	789, 0, 407, 388, 860, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 1769,
	1768, 1770, 461, 354, 355, 0, 333, 281, 282, 630,
	845, 384, 576, 609, 610, 500, 3593, 859, 840, 842,
	843, 846, 850, 851, 852, 853, 854, 856, 858, 862,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 861, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 793, 551, 552, 374, 375, 376, 377, 848, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 870, 844, 869,
	871, 872, 868, 873, 874, 855, 749, 0, 800, 866,
	865, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 833, 807, 808, 809, 746,
	810, 804, 805, 747, 806, 834, 798, 830, 831, 774,
	801, 811, 829, 812, 832, 835, 836, 875, 876, 818,
	802, 247, 877, 815, 837, 828, 827, 813, 799, 838,
	839, 781, 776, 816, 817, 803, 821, 822, 823, 748,
	795, 796, 797, 819, 820, 777, 778, 779, 780, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 824, 619, 420, 0, 620,
	791, 631, 496, 497, 632, 608, 0, 741, 0, 386,
	0, 512, 545, 534, 618, 499, 0, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 326, 1819, 0, 356,
	549, 531, 541, 532, 517, 518, 519, 526, 336, 520,
	521, 522, 491, 523, 492, 524, 525, 782, 548, 498,
	416, 370, 566, 565, 0, 0, 849, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2033, 0, 0,
	736, 0, 0, 772, 826, 825, 759, 769, 0, 0,
	299, 219, 493, 614, 495, 494, 760, 0, 761, 765,
	768, 764, 762, 763, 0, 841, 0, 0, 0, 0,
	0, 0, 728, 740, 0, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 737,
	738, 0, 0, 0, 0, 792, 0, 739, 0, 0,
	2034, 766, 770, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 767, 790, 794, 320, 863, 788, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 864, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 785, 0, 611,
	0, 449, 0, 0, 847, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 789, 0, 407, 388, 860,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 553, 0, 468,
	635, 636, 637, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 554, 571, 538, 507, 470, 562, 504,
	508, 510, 509, 574, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 630, 845, 384, 576, 609, 610,
	500, 0, 859, 840, 842, 843, 846, 850, 851, 852,
	853, 854, 856, 858, 862, 629, 0, 555, 570, 633,
	569, 626, 390, 0, 410, 567, 514, 0, 559, 533,
	0, 560, 529, 564, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 589, 590, 591, 286, 473, 593, 594,
	595, 596, 597, 598, 599, 592, 861, 536, 513, 539,
	453, 516, 515, 0, 0, 550, 793, 551, 552, 374,
	375, 376, 377, 848, 577, 304, 472, 400, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 543,
	540, 638, 0, 600, 601, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	544, 479, 603, 606, 604, 605, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	530, 557, 870, 844, 869, 871, 872, 868, 873, 874,
	855, 749, 0, 800, 866, 865, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 585, 584,
	583, 582, 581, 580, 579, 578, 0, 0, 527, 428,
	313, 275, 309, 310, 317, 627, 624, 432, 628, 0,
	283, 506, 357, 0, 399, 331, 572, 573, 0, 0,
	833, 807, 808, 809, 746, 810, 804, 805, 747, 806,
	834, 798, 830, 831, 774, 801, 811, 829, 812, 832,
	835, 836, 875, 876, 818, 802, 247, 877, 815, 837,
	828, 827, 813, 799, 838, 839, 781, 776, 816, 817,
	803, 821, 822, 823, 748, 795, 796, 797, 819, 820,
	777, 778, 779, 780, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 625, 0, 0, 0, 0, 0,
	0, 0, 556, 568, 602, 0, 612, 613, 615, 617,
	824, 619, 420, 0, 620, 0, 631, 496, 497, 632,
	608, 0, 741, 196, 791, 0, 0, 0, 0, 0,
	0, 0, 0, 386, 0, 512, 545, 534, 618, 499,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	326, 0, 0, 356, 549, 531, 541, 532, 517, 518,
	519, 526, 336, 520, 521, 522, 491, 523, 492, 524,
	525, 1256, 548, 498, 416, 370, 566, 565, 0, 0,
	849, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 0, 772, 826, 825,
	759, 769, 0, 0, 299, 219, 493, 614, 495, 494,
	760, 0, 761, 765, 768, 764, 762, 763, 0, 841,
	0, 0, 0, 0, 0, 0, 728, 740, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 737, 738, 0, 0, 0, 0, 792,
	0, 739, 0, 0, 787, 766, 770, 0, 0, 0,
	0, 289, 422, 439, 300, 412, 452, 305, 419, 295,
	385, 409, 0, 0, 291, 437, 418, 367, 346, 347,
	290, 0, 404, 324, 338, 321, 383, 767, 790, 794,
	320, 863, 788, 447, 293, 0, 446, 382, 433, 438,
	368, 362, 0, 292, 435, 366, 361, 350, 328, 864,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 785, 0, 611, 0, 449, 0, 0, 847, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 789,
	0, 407, 388, 860, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 553, 0, 468, 635, 636, 637, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 554, 571, 538,
	507, 470, 562, 504, 508, 510, 509, 574, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 630, 845,
	384, 576, 609, 610, 500, 0, 859, 840, 842, 843,
	846, 850, 851, 852, 853, 854, 856, 858, 862, 629,
	0, 555, 570, 633, 569, 626, 390, 0, 410, 567,
	514, 0, 559, 533, 0, 560, 529, 564, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 589, 590, 591,
	286, 473, 593, 594, 595, 596, 597, 598, 599, 592,
	861, 536, 513, 539, 453, 516, 515, 0, 0, 550,
	793, 551, 552, 374, 375, 376, 377, 848, 577, 304,
	472, 400, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 543, 540, 638, 0, 600, 601, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 544, 479, 603, 606, 604, 605,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 530, 557, 870, 844, 869, 871,
	872, 868, 873, 874, 855, 749, 0, 800, 866, 865,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 585, 584, 583, 582, 581, 580, 579, 578,
	0, 0, 527, 428, 313, 275, 309, 310, 317, 627,
	624, 432, 628, 0, 283, 506, 357, 159, 399, 331,
	572, 573, 0, 0, 833, 807, 808, 809, 746, 810,
	804, 805, 747, 806, 834, 798, 830, 831, 774, 801,
	811, 829, 812, 832, 835, 836, 875, 876, 818, 802,
	247, 877, 815, 837, 828, 827, 813, 799, 838, 839,
	781, 776, 816, 817, 803, 821, 822, 823, 748, 795,
	796, 797, 819, 820, 777, 778, 779, 780, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 625, 0,
	0, 0, 0, 0, 0, 0, 556, 568, 602, 0,
	612, 613, 615, 617, 824, 619, 420, 0, 620, 791,
	631, 496, 497, 632, 608, 0, 741, 0, 386, 0,
	512, 545, 534, 618, 499, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 326, 3978, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 782, 548, 498, 416,
	370, 566, 565, 0, 0, 849, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 772, 826, 825, 759, 769, 0, 0, 299,
	219, 493, 614, 495, 494, 760, 0, 761, 765, 768,
	764, 762, 763, 0, 841, 0, 0, 0, 0, 0,
	0, 728, 740, 0, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 737, 738,
	0, 0, 0, 0, 792, 0, 739, 0, 0, 787,
	766, 770, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 767, 790, 794, 320, 863, 788, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 864, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 785, 0, 611, 0,
	449, 0, 0, 847, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 789, 0, 407, 388, 860, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 845, 384, 576, 609, 610, 500,
	0, 859, 840, 842, 843, 846, 850, 851, 852, 853,
	854, 856, 858, 862, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 861, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 793, 551, 552, 374, 375,
	376, 377, 848, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 870, 844, 869, 871, 872, 868, 873, 874, 855,
	749, 0, 800, 866, 865, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	506, 357, 0, 399, 331, 572, 573, 0, 0, 833,
	807, 808, 809, 746, 810, 804, 805, 747, 806, 834,
	798, 830, 831, 774, 801, 811, 829, 812, 832, 835,
	836, 875, 876, 818, 802, 247, 877, 815, 837, 828,
	827, 813, 799, 838, 839, 781, 776, 816, 817, 803,
	821, 822, 823, 748, 795, 796, 797, 819, 820, 777,
	778, 779, 780, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 824,
	619, 420, 0, 620, 791, 631, 496, 497, 632, 608,
	0, 741, 0, 386, 0, 512, 545, 534, 618, 499,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	326, 0, 0, 356, 549, 531, 541, 532, 517, 518,
	519, 526, 336, 520, 521, 522, 491, 523, 492, 524,
	525, 782, 548, 498, 416, 370, 566, 565, 0, 0,
	849, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 0, 772, 826, 825,
	759, 769, 0, 0, 299, 219, 493, 614, 495, 494,
	760, 0, 761, 765, 768, 764, 762, 763, 0, 841,
	0, 0, 0, 0, 0, 0, 728, 740, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 737, 738, 0, 0, 0, 0, 792,
	0, 739, 0, 0, 787, 766, 770, 0, 0, 0,
	0, 289, 422, 439, 300, 412, 452, 305, 419, 295,
	385, 409, 0, 0, 291, 437, 418, 367, 346, 347,
	290, 0, 404, 324, 338, 321, 383, 767, 790, 794,
	320, 863, 788, 447, 293, 0, 446, 382, 433, 438,
	368, 362, 0, 292, 435, 366, 361, 350, 328, 864,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 785, 0, 611, 0, 449, 0, 0, 847, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 789,
	0, 407, 388, 860, 3874, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 553, 0, 468, 635, 636, 637, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 554, 571, 538,
	507, 470, 562, 504, 508, 510, 509, 574, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 630, 845,
	384, 576, 609, 610, 500, 0, 859, 840, 842, 843,
	846, 850, 851, 852, 853, 854, 856, 858, 862, 629,
	0, 555, 570, 633, 569, 626, 390, 0, 410, 567,
	514, 0, 559, 533, 0, 560, 529, 564, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 589, 590, 591,
	286, 473, 593, 594, 595, 596, 597, 598, 599, 592,
	861, 536, 513, 539, 453, 516, 515, 0, 0, 550,
	793, 551, 552, 374, 375, 376, 377, 848, 577, 304,
	472, 400, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 543, 540, 638, 0, 600, 601, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 544, 479, 603, 606, 604, 605,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 530, 557, 870, 844, 869, 871,
	872, 868, 873, 874, 855, 749, 0, 800, 866, 865,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 585, 584, 583, 582, 581, 580, 579, 578,
	0, 0, 527, 428, 313, 275, 309, 310, 317, 627,
	624, 432, 628, 0, 283, 506, 357, 0, 399, 331,
	572, 573, 0, 0, 833, 807, 808, 809, 746, 810,
	804, 805, 747, 806, 834, 798, 830, 831, 774, 801,
	811, 829, 812, 832, 835, 836, 875, 876, 818, 802,
	247, 877, 815, 837, 828, 827, 813, 799, 838, 839,
	781, 776, 816, 817, 803, 821, 822, 823, 748, 795,
	796, 797, 819, 820, 777, 778, 779, 780, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 625, 0,
	0, 0, 0, 0, 0, 0, 556, 568, 602, 0,
	612, 613, 615, 617, 824, 619, 420, 0, 620, 791,
	631, 496, 497, 632, 608, 0, 741, 0, 386, 0,
	512, 545, 534, 618, 499, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 326, 1819, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 782, 548, 498, 416,
	370, 566, 565, 0, 0, 849, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 772, 826, 825, 759, 769, 0, 0, 299,
	219, 493, 614, 495, 494, 760, 0, 761, 765, 768,
	764, 762, 763, 0, 841, 0, 0, 0, 0, 0,
	0, 728, 740, 0, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 737, 738,
	0, 0, 0, 0, 792, 0, 739, 0, 0, 787,
	766, 770, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 767, 790, 794, 320, 863, 788, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 864, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 785, 0, 611, 0,
	449, 0, 0, 847, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 789, 0, 407, 388, 860, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 845, 384, 576, 609, 610, 500,
	0, 859, 840, 842, 843, 846, 850, 851, 852, 853,
	854, 856, 858, 862, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 861, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 793, 551, 552, 374, 375,
	376, 377, 848, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 870, 844, 869, 871, 872, 868, 873, 874, 855,
	749, 0, 800, 866, 865, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	506, 357, 0, 399, 331, 572, 573, 0, 0, 833,
	807, 808, 809, 746, 810, 804, 805, 747, 806, 834,
	798, 830, 831, 774, 801, 811, 829, 812, 832, 835,
	836, 875, 876, 818, 802, 247, 877, 815, 837, 828,
	827, 813, 799, 838, 839, 781, 776, 816, 817, 803,
	821, 822, 823, 748, 795, 796, 797, 819, 820, 777,
	778, 779, 780, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 824,
	619, 420, 0, 620, 791, 631, 496, 497, 632, 608,
	0, 741, 0, 386, 0, 512, 545, 534, 618, 499,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	326, 0, 0, 356, 549, 531, 541, 532, 517, 518,
	519, 526, 336, 520, 521, 522, 491, 523, 492, 524,
	525, 782, 548, 498, 416, 370, 566, 565, 0, 0,
	849, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 0, 772, 826, 825,
	759, 769, 0, 0, 299, 219, 493, 614, 495, 494,
	760, 0, 761, 765, 768, 764, 762, 763, 0, 841,
	0, 0, 0, 0, 0, 0, 728, 740, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 737, 738, 1538, 0, 0, 0, 792,
	0, 739, 0, 0, 787, 766, 770, 0, 0, 0,
	0, 289, 422, 439, 300, 412, 452, 305, 419, 295,
	385, 409, 0, 0, 291, 437, 418, 367, 346, 347,
	290, 0, 404, 324, 338, 321, 383, 767, 790, 794,
	320, 863, 788, 447, 293, 0, 446, 382, 433, 438,
	368, 362, 0, 292, 435, 366, 361, 350, 328, 864,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 785, 0, 611, 0, 449, 0, 0, 847, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 789,
	0, 407, 388, 860, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 553, 0, 468, 635, 636, 637, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 554, 571, 538,
	507, 470, 562, 504, 508, 510, 509, 574, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 630, 845,
	384, 576, 609, 610, 500, 0, 859, 840, 842, 843,
	846, 850, 851, 852, 853, 854, 856, 858, 862, 629,
	0, 555, 570, 633, 569, 626, 390, 0, 410, 567,
	514, 0, 559, 533, 0, 560, 529, 564, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 589, 590, 591,
	286, 473, 593, 594, 595, 596, 597, 598, 599, 592,
	861, 536, 513, 539, 453, 516, 515, 0, 0, 550,
	793, 551, 552, 374, 375, 376, 377, 848, 577, 304,
	472, 400, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 543, 540, 638, 0, 600, 601, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 544, 479, 603, 606, 604, 605,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 530, 557, 870, 844, 869, 871,
	872, 868, 873, 874, 855, 749, 0, 800, 866, 865,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 585, 584, 583, 582, 581, 580, 579, 578,
	0, 0, 527, 428, 313, 275, 309, 310, 317, 627,
	624, 432, 628, 0, 283, 506, 357, 0, 399, 331,
	572, 573, 0, 0, 833, 807, 808, 809, 746, 810,
	804, 805, 747, 806, 834, 798, 830, 831, 774, 801,
	811, 829, 812, 832, 835, 836, 875, 876, 818, 802,
	247, 877, 815, 837, 828, 827, 813, 799, 838, 839,
	781, 776, 816, 817, 803, 821, 822, 823, 748, 795,
	796, 797, 819, 820, 777, 778, 779, 780, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 625, 0,
	0, 0, 0, 0, 0, 0, 556, 568, 602, 0,
	612, 613, 615, 617, 824, 619, 420, 0, 620, 0,
	631, 496, 497, 632, 608, 791, 741, 0, 2204, 0,
	0, 0, 0, 0, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 782, 548, 498, 416, 370, 566, 565, 0,
	0, 849, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 772, 826,
	825, 759, 769, 0, 0, 299, 219, 493, 614, 495,
	494, 760, 0, 761, 765, 768, 764, 762, 763, 0,
	841, 0, 0, 0, 0, 0, 0, 728, 740, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 738, 0, 0, 0, 0,
	792, 0, 739, 0, 0, 787, 766, 770, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 767, 790,
	794, 320, 863, 788, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	864, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 785, 0, 611, 0, 449, 0, 0, 847,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	789, 0, 407, 388, 860, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	845, 384, 576, 609, 610, 500, 0, 859, 840, 842,
	843, 846, 850, 851, 852, 853, 854, 856, 858, 862,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 861, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 793, 551, 552, 374, 375, 376, 377, 848, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 870, 844, 869,
	871, 872, 868, 873, 874, 855, 749, 0, 800, 866,
	865, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 833, 807, 808, 809, 746,
	810, 804, 805, 747, 806, 834, 798, 830, 831, 774,
	801, 811, 829, 812, 832, 835, 836, 875, 876, 818,
	802, 247, 877, 815, 837, 828, 827, 813, 799, 838,
	839, 781, 776, 816, 817, 803, 821, 822, 823, 748,
	795, 796, 797, 819, 820, 777, 778, 779, 780, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 824, 619, 420, 0, 620,
	791, 631, 496, 497, 632, 608, 0, 741, 0, 386,
	0, 512, 545, 534, 618, 499, 0, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 326, 0, 0, 356,
	549, 531, 541, 532, 517, 518, 519, 526, 336, 520,
	521, 522, 491, 523, 492, 524, 525, 782, 548, 498,
	416, 370, 566, 565, 0, 0, 849, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 772, 826, 825, 759, 769, 0, 0,
	299, 219, 493, 614, 495, 494, 760, 0, 761, 765,
	768, 764, 762, 763, 0, 841, 0, 0, 0, 0,
	0, 0, 728, 740, 0, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 737,
	738, 1812, 0, 0, 0, 792, 0, 739, 0, 0,
	787, 766, 770, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 767, 790, 794, 320, 863, 788, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 864, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 785, 0, 611,
	0, 449, 0, 0, 847, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 789, 0, 407, 388, 860,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 553, 0, 468,
	635, 636, 637, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 554, 571, 538, 507, 470, 562, 504,
	508, 510, 509, 574, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 630, 845, 384, 576, 609, 610,
	500, 0, 859, 840, 842, 843, 846, 850, 851, 852,
	853, 854, 856, 858, 862, 629, 0, 555, 570, 633,
	569, 626, 390, 0, 410, 567, 514, 0, 559, 533,
	0, 560, 529, 564, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 589, 590, 591, 286, 473, 593, 594,
	595, 596, 597, 598, 599, 592, 861, 536, 513, 539,
	453, 516, 515, 0, 0, 550, 793, 551, 552, 374,
	375, 376, 377, 848, 577, 304, 472, 400, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 543,
	540, 638, 0, 600, 601, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	544, 479, 603, 606, 604, 605, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	530, 557, 870, 844, 869, 871, 872, 868, 873, 874,
	855, 749, 0, 800, 866, 865, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 585, 584,
	583, 582, 581, 580, 579, 578, 0, 0, 527, 428,
	313, 275, 309, 310, 317, 627, 624, 432, 628, 0,
	283, 506, 357, 0, 399, 331, 572, 573, 0, 0,
	833, 807, 808, 809, 746, 810, 804, 805, 747, 806,
	834, 798, 830, 831, 774, 801, 811, 829, 812, 832,
	835, 836, 875, 876, 818, 802, 247, 877, 815, 837,
	828, 827, 813, 799, 838, 839, 781, 776, 816, 817,
	803, 821, 822, 823, 748, 795, 796, 797, 819, 820,
	777, 778, 779, 780, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 625, 0, 0, 0, 0, 0,
	0, 0, 556, 568, 602, 0, 612, 613, 615, 617,
	824, 619, 420, 0, 620, 791, 631, 496, 497, 632,
	608, 0, 741, 0, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 782, 548, 498, 416, 370, 566, 565, 0,
	0, 849, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 772, 826,
	825, 759, 769, 0, 0, 299, 219, 493, 614, 495,
	494, 760, 0, 761, 765, 768, 764, 762, 763, 0,
	841, 0, 0, 0, 0, 0, 0, 728, 740, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 738, 0, 0, 0, 0,
	792, 0, 739, 0, 0, 787, 766, 770, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 767, 790,
	794, 320, 863, 788, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	864, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 785, 0, 611, 0, 449, 0, 0, 847,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	789, 0, 407, 388, 860, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	845, 384, 576, 609, 610, 500, 0, 859, 840, 842,
	843, 846, 850, 851, 852, 853, 854, 856, 858, 862,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 861, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 793, 551, 552, 374, 375, 376, 377, 848, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 870, 844, 869,
	871, 872, 868, 873, 874, 855, 749, 0, 800, 866,
	865, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 833, 807, 808, 809, 746,
	810, 804, 805, 747, 806, 834, 798, 830, 831, 774,
	801, 811, 829, 812, 832, 835, 836, 875, 876, 818,
	802, 247, 877, 815, 837, 828, 827, 813, 799, 838,
	839, 781, 776, 816, 817, 803, 821, 822, 823, 748,
	795, 796, 797, 819, 820, 777, 778, 779, 780, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 824, 619, 420, 0, 620,
	791, 631, 496, 497, 632, 608, 0, 741, 0, 386,
	0, 512, 545, 534, 618, 499, 0, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 326, 0, 0, 356,
	549, 531, 541, 532, 517, 518, 519, 526, 336, 520,
	521, 522, 491, 523, 492, 524, 525, 782, 548, 498,
	416, 370, 566, 565, 0, 0, 849, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 772, 826, 825, 759, 769, 0, 0,
	299, 219, 493, 614, 495, 494, 2670, 0, 2671, 765,
	768, 764, 762, 763, 0, 841, 0, 0, 0, 0,
	0, 0, 728, 740, 0, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 737,
	738, 0, 0, 0, 0, 792, 0, 739, 0, 0,
	787, 766, 770, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 767, 790, 794, 320, 863, 788, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 864, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 785, 0, 611,
	0, 449, 0, 0, 847, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 789, 0, 407, 388, 860,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 553, 0, 468,
	635, 636, 637, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 554, 571, 538, 507, 470, 562, 504,
	508, 510, 509, 574, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 630, 845, 384, 576, 609, 610,
	500, 0, 859, 840, 842, 843, 846, 850, 851, 852,
	853, 854, 856, 858, 862, 629, 0, 555, 570, 633,
	569, 626, 390, 0, 410, 567, 514, 0, 559, 533,
	0, 560, 529, 564, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 589, 590, 591, 286, 473, 593, 594,
	595, 596, 597, 598, 599, 592, 861, 536, 513, 539,
	453, 516, 515, 0, 0, 550, 793, 551, 552, 374,
	375, 376, 377, 848, 577, 304, 472, 400, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 543,
	540, 638, 0, 600, 601, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	544, 479, 603, 606, 604, 605, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	530, 557, 870, 844, 869, 871, 872, 868, 873, 874,
	855, 749, 0, 800, 866, 865, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 585, 584,
	583, 582, 581, 580, 579, 578, 0, 0, 527, 428,
	313, 275, 309, 310, 317, 627, 624, 432, 628, 0,
	283, 506, 357, 0, 399, 331, 572, 573, 0, 0,
	833, 807, 808, 809, 746, 810, 804, 805, 747, 806,
	834, 798, 830, 831, 774, 801, 811, 829, 812, 832,
	835, 836, 875, 876, 818, 802, 247, 877, 815, 837,
	828, 827, 813, 799, 838, 839, 781, 776, 816, 817,
	803, 821, 822, 823, 748, 795, 796, 797, 819, 820,
	777, 778, 779, 780, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 625, 0, 0, 0, 0, 0,
	0, 0, 556, 568, 602, 0, 612, 613, 615, 617,
	824, 619, 420, 0, 620, 791, 631, 496, 497, 632,
	608, 0, 741, 0, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 1682, 0, 0, 0, 744, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 782, 548, 498, 416, 370, 566, 565, 0,
	0, 849, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 772, 826,
	825, 759, 769, 0, 0, 299, 219, 493, 614, 495,
	494, 760, 0, 761, 765, 768, 764, 762, 763, 0,
	841, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 738, 0, 0, 0, 0,
	792, 0, 739, 0, 0, 787, 766, 770, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 767, 790,
	794, 320, 863, 788, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	864, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 785, 0, 611, 0, 449, 0, 0, 847,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	789, 0, 407, 388, 860, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	1683, 1684, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	845, 384, 576, 609, 610, 500, 0, 859, 840, 842,
	843, 846, 850, 851, 852, 853, 854, 856, 858, 862,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 861, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 793, 551, 552, 374, 375, 376, 377, 848, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 870, 844, 869,
	871, 872, 868, 873, 874, 855, 749, 0, 800, 866,
	865, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 833, 807, 808, 809, 746,
	810, 804, 805, 747, 806, 834, 798, 830, 831, 774,
	801, 811, 829, 812, 832, 835, 836, 875, 876, 818,
	802, 247, 877, 815, 837, 828, 827, 813, 799, 838,
	839, 781, 776, 816, 817, 803, 821, 822, 823, 748,
	795, 796, 797, 819, 820, 777, 778, 779, 780, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 824, 619, 420, 0, 620,
	791, 631, 496, 497, 632, 608, 0, 741, 0, 386,
	0, 512, 545, 534, 618, 499, 0, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 326, 0, 0, 356,
	549, 531, 541, 532, 517, 518, 519, 526, 336, 520,
	521, 522, 491, 523, 492, 524, 525, 782, 548, 498,
	416, 370, 566, 565, 0, 0, 849, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 772, 826, 825, 759, 769, 0, 0,
	299, 219, 493, 614, 495, 494, 760, 0, 761, 765,
	768, 764, 762, 763, 0, 841, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 737,
	738, 0, 0, 0, 0, 792, 0, 739, 0, 0,
	787, 766, 770, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 767, 790, 794, 320, 863, 788, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 864, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 785, 0, 611,
	0, 449, 0, 0, 847, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 789, 0, 407, 388, 860,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 553, 0, 468,
	635, 636, 637, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 554, 571, 538, 507, 470, 562, 504,
	508, 510, 509, 574, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 630, 845, 384, 576, 609, 610,
	500, 0, 859, 840, 842, 843, 846, 850, 851, 852,
	853, 854, 856, 858, 862, 629, 0, 555, 570, 633,
	569, 626, 390, 0, 410, 567, 514, 0, 559, 533,
	0, 560, 529, 564, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 589, 590, 591, 286, 473, 593, 594,
	595, 596, 597, 598, 599, 592, 861, 536, 513, 539,
	453, 516, 515, 0, 0, 550, 793, 551, 552, 374,
	375, 376, 377, 848, 577, 304, 472, 400, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 543,
	540, 638, 0, 600, 601, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	544, 479, 603, 606, 604, 605, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	530, 557, 870, 844, 869, 871, 872, 868, 873, 874,
	855, 749, 0, 800, 866, 865, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 585, 584,
	583, 582, 581, 580, 579, 578, 0, 0, 527, 428,
	313, 275, 309, 310, 317, 627, 624, 432, 628, 0,
	283, 506, 357, 0, 399, 331, 572, 573, 0, 0,
	833, 807, 808, 809, 746, 810, 804, 805, 747, 806,
	834, 798, 830, 831, 774, 801, 811, 829, 812, 832,
	835, 836, 875, 876, 818, 802, 247, 877, 815, 837,
	828, 827, 813, 799, 838, 839, 781, 776, 816, 817,
	803, 821, 822, 823, 748, 795, 796, 797, 819, 820,
	777, 778, 779, 780, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 625, 0, 0, 0, 0, 0,
	0, 0, 556, 568, 602, 0, 612, 613, 615, 617,
	824, 619, 420, 0, 620, 791, 631, 496, 497, 632,
	608, 0, 741, 0, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 782, 548, 498, 416, 370, 566, 565, 0,
	0, 849, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 772, 826,
	825, 759, 769, 0, 0, 299, 219, 493, 614, 495,
	494, 760, 0, 761, 765, 768, 764, 762, 763, 0,
	841, 0, 0, 0, 0, 0, 0, 728, 740, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 738, 0, 0, 0, 0,
	792, 0, 739, 0, 0, 787, 766, 770, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 767, 790,
	794, 320, 863, 788, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	864, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 785, 0, 611, 0, 449, 0, 0, 847,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	789, 0, 407, 388, 860, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	845, 384, 576, 609, 610, 500, 0, 859, 840, 842,
	843, 846, 850, 851, 852, 853, 854, 856, 858, 862,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 861, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 793, 551, 552, 374, 375, 376, 377, 848, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 870, 844, 869,
	871, 872, 868, 873, 874, 855, 749, 0, 800, 866,
	865, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 833, 807, 808, 809, 746,
	810, 804, 805, 747, 806, 834, 798, 830, 831, 774,
	801, 811, 829, 812, 832, 835, 836, 875, 876, 818,
	802, 247, 877, 815, 837, 828, 827, 813, 799, 838,
	839, 781, 776, 816, 817, 803, 821, 822, 823, 748,
	795, 796, 797, 819, 820, 777, 778, 779, 780, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 824, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 0, 741, 196, 61,
	187, 158, 0, 0, 0, 0, 0, 0, 386, 0,
	512, 545, 534, 618, 499, 0, 188, 0, 0, 0,
	0, 0, 0, 179, 0, 326, 0, 189, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 132, 548, 498, 416,
	370, 566, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 614, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 157, 185,
	194, 186, 117, 0, 0, 607, 0, 0, 611, 0,
	449, 0, 0, 211, 0, 0, 0, 421, 0, 0,
	353, 184, 178, 177, 465, 0, 407, 388, 223, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 586,
	587, 588, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 444, 319, 384, 576, 609, 610, 500,
	0, 563, 501, 511, 311, 535, 547, 546, 380, 460,
	214, 558, 561, 490, 224, 0, 555, 570, 528, 569,
	225, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 445, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 469, 551, 552, 374, 375,
	376, 377, 337, 577, 304, 472, 400, 130, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	222, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 229, 294, 432, 230, 0, 283,
	506, 357, 159, 399, 331, 572, 573, 58, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 575, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 226, 45, 212, 215, 217, 216, 0,
	59, 556, 568, 602, 5, 612, 613, 615, 617, 616,
	619, 420, 196, 620, 135, 227, 496, 497, 228, 608,
	0, 0, 386, 0, 512, 545, 534, 618, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	132, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 2354,
	2357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 2358, 449, 0, 0, 0, 2353, 0,
	2352, 421, 2350, 2355, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 2356, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 599, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 0,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 159, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 0, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1291, 0, 0, 218, 0,
	0, 759, 769, 0, 0, 299, 219, 493, 614, 495,
	494, 760, 0, 761, 765, 768, 764, 762, 763, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 766, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 767, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 611, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 196, 61, 187, 158,
	0, 0, 0, 0, 0, 0, 386, 657, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 663, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	661, 662, 0, 607, 0, 0, 611, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 599, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 469, 551, 552, 374, 375, 376, 377,
	658, 660, 304, 472, 400, 672, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	159, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	0, 620, 0, 631, 496, 497, 632, 608, 386, 0,
	512, 545, 534, 618, 499, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 0, 548, 498, 416,
	370, 566, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 614, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 2513,
	2516, 2517, 2518, 2519, 2520, 2521, 0, 2526, 2522, 2523,
	2524, 2525, 0, 2508, 2509, 2510, 2511, 1083, 2492, 2514,
	0, 2493, 382, 2494, 2495, 2496, 2497, 1087, 2498, 2499,
	2500, 2501, 2502, 2505, 2506, 2503, 2504, 2512, 394, 360,
	395, 343, 372, 371, 373, 1111, 1113, 1115, 1117, 1120,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 611, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 2507, 0, 407, 388, 634, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 319, 384, 576, 609, 610, 500,
	0, 563, 501, 511, 311, 535, 547, 546, 380, 460,
	0, 558, 561, 490, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 445, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 469, 551, 552, 374, 375,
	376, 377, 337, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	2515, 357, 0, 399, 331, 572, 573, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 575, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 616,
	619, 420, 0, 620, 0, 631, 496, 497, 632, 608,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 0, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 2354, 2357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	611, 2358, 449, 0, 0, 0, 2353, 0, 2352, 421,
	2350, 2355, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 2356, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 0, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 0, 620, 0, 631, 496, 497,
	632, 608, 386, 0, 512, 545, 534, 618, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	0, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	2375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 2374, 449, 0, 0, 0, 2380, 2377,
	2379, 421, 0, 2378, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 2372, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 599, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 0,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 0, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 0, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 614, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 2375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 611, 2374, 449, 0, 0, 0,
	2380, 2377, 2379, 421, 0, 2378, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 386, 0, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 2074, 0,
	0, 0, 0, 326, 0, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 2075, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 1221, 1222, 1223, 1220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 611, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 599, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 469, 551, 552, 374, 375, 376, 377,
	337, 577, 304, 472, 400, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	0, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	196, 620, 0, 631, 496, 497, 632, 608, 0, 0,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 132, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 2124, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	611, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 159, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 196, 620, 0, 631, 496, 497,
	632, 608, 0, 0, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 132, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 2110, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 614, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 611, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 159, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 386, 0, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 1015, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 1022, 1023, 0, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1026, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 1009, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 997, 447, 293, 996, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 611, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 1013, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 1014, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 1017, 551, 552, 374, 375, 376, 377,
	337, 577, 1012, 472, 400, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 1024, 1010, 1020, 1011, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 1021, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	0, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	196, 620, 0, 631, 496, 497, 632, 608, 0, 0,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 132, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2006, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	611, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 159, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 0, 620, 0, 631, 496, 497,
	632, 608, 386, 0, 512, 545, 534, 618, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	0, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 1022, 1023, 0,
	0, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1026, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 997, 447, 293, 996, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 599, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 1024,
	2026, 1020, 2027, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 1021, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 0,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 0, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 2892, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 0, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 614, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 2895, 0, 0, 0,
	2894, 607, 0, 0, 611, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 386, 0, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 1504, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 1502, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 611, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 599, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 469, 551, 552, 374, 375, 376, 377,
	337, 577, 304, 472, 400, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	0, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	0, 620, 0, 631, 496, 497, 632, 608, 386, 0,
	512, 545, 534, 618, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 1498, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 0, 548, 498, 416,
	370, 566, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 1502, 0, 0, 0, 299,
	219, 493, 614, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 611, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 634, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 319, 384, 576, 609, 610, 500,
	0, 563, 501, 511, 311, 535, 547, 546, 380, 460,
	0, 558, 561, 490, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 445, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 469, 551, 552, 374, 375,
	376, 377, 337, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	506, 357, 0, 399, 331, 572, 573, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 575, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 616,
	619, 420, 0, 620, 0, 631, 496, 497, 632, 608,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 0, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3933, 0, 218, 826, 0, 0, 0, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	611, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 0, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 0, 620, 0, 631, 496, 497,
	632, 608, 386, 0, 512, 545, 534, 618, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	0, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 1502,
	0, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 599, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 0,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 0, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 0, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 614, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 611, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 2419,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 947, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 386, 0, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 1502, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1712, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 611, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 599, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 469, 551, 552, 374, 375, 376, 377,
	337, 577, 304, 472, 400, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	0, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	0, 620, 0, 631, 496, 497, 632, 608, 386, 0,
	512, 545, 534, 618, 499, 0, 0, 0, 0, 0,
	2455, 0, 0, 0, 0, 326, 0, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 0, 548, 498, 416,
	370, 566, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 2457, 0, 0, 0, 299,
	219, 493, 614, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 611, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 634, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 319, 384, 576, 609, 610, 500,
	0, 563, 501, 511, 311, 535, 547, 546, 380, 460,
	0, 558, 561, 490, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 445, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 469, 551, 552, 374, 375,
	376, 377, 337, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	506, 357, 0, 399, 331, 572, 573, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 575, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 616,
	619, 420, 0, 620, 0, 631, 496, 497, 632, 608,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 2074, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 0, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 2075, 0, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	611, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 0, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 0, 620, 0, 631, 496, 497,
	632, 608, 386, 0, 512, 545, 534, 618, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	0, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 3100,
	3102, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 599, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 0,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 0, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 2477, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 0, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 1502, 0, 0, 0, 299, 219, 493, 614, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 611, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 386, 0, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 645, 326, 0, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 611, 0, 449, 0,
	644, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 599, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 469, 551, 552, 374, 375, 376, 377,
	337, 577, 304, 472, 400, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	0, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	0, 620, 0, 631, 496, 497, 632, 608, 386, 0,
	512, 545, 534, 618, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 0, 548, 498, 416,
	370, 566, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 826, 0, 0, 0, 0, 0, 299,
	219, 493, 614, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 611, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 634, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 319, 384, 576, 609, 610, 500,
	0, 563, 501, 511, 311, 535, 547, 546, 380, 460,
	0, 558, 561, 490, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 445, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 469, 551, 552, 374, 375,
	376, 377, 337, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	506, 357, 0, 399, 331, 572, 573, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 575, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 616,
	619, 420, 0, 620, 0, 631, 496, 497, 632, 608,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 0, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3912, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	611, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 0, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 0, 620, 0, 631, 496, 497,
	632, 608, 386, 0, 512, 545, 534, 618, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	0, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 3690,
	0, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 599, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 0,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 0, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 0, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 614, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 611, 0, 449, 0, 0, 0,
	3821, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 386, 0, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3530, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 611, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 599, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 469, 551, 552, 374, 375, 376, 377,
	337, 577, 304, 472, 400, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	0, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	0, 620, 0, 631, 496, 497, 632, 608, 386, 0,
	512, 545, 534, 618, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 0, 548, 498, 416,
	370, 566, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3705, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 614, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 611, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 634, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 319, 384, 576, 609, 610, 500,
	0, 563, 501, 511, 311, 535, 547, 546, 380, 460,
	0, 558, 561, 490, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 445, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 469, 551, 552, 374, 375,
	376, 377, 337, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	506, 357, 0, 399, 331, 572, 573, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 575, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 616,
	619, 420, 0, 620, 0, 631, 496, 497, 632, 608,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 0, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	611, 0, 449, 0, 0, 0, 3621, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 0, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 0, 620, 0, 631, 496, 497,
	632, 608, 386, 0, 512, 545, 534, 618, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	0, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 3134,
	0, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 599, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 0,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 0, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 0, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 614, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 611, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 386, 0, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2006, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 611, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 599, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 469, 551, 552, 374, 375, 376, 377,
	337, 577, 304, 472, 400, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	0, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	0, 620, 0, 631, 496, 497, 632, 608, 386, 0,
	512, 545, 534, 618, 499, 0, 0, 3340, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 0, 548, 498, 416,
	370, 566, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 614, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 611, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 634, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 319, 384, 576, 609, 610, 500,
	0, 563, 501, 511, 311, 535, 547, 546, 380, 460,
	0, 558, 561, 490, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 445, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 469, 551, 552, 374, 375,
	376, 377, 337, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	506, 357, 0, 399, 331, 572, 573, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 575, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 616,
	619, 420, 0, 620, 0, 631, 496, 497, 632, 608,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 0, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	611, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 0, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 0, 620, 0, 631, 496, 497,
	632, 608, 386, 0, 512, 545, 534, 618, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	0, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2996, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 599, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 0,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 0, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 0, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 1502, 0, 0, 0, 299, 219, 493, 614, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 611, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 386, 0, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 2457, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 611, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 599, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 469, 551, 552, 374, 375, 376, 377,
	337, 577, 304, 472, 400, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	0, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	0, 620, 0, 631, 496, 497, 632, 608, 386, 0,
	512, 545, 534, 618, 499, 0, 0, 2814, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 0, 548, 498, 416,
	370, 566, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 614, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 611, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 634, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 319, 384, 576, 609, 610, 500,
	0, 563, 501, 511, 311, 535, 547, 546, 380, 460,
	0, 558, 561, 490, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 445, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 469, 551, 552, 374, 375,
	376, 377, 337, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	506, 357, 0, 399, 331, 572, 573, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 575, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 616,
	619, 420, 0, 620, 0, 631, 496, 497, 632, 608,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 0, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	611, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 0, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 0, 620, 0, 631, 496, 497,
	632, 608, 386, 0, 512, 545, 534, 618, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	0, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 2574,
	0, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 599, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 0,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 0, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 0, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 614, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 611, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 386, 0, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 2533, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 611, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 599, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 469, 551, 552, 374, 375, 376, 377,
	337, 577, 304, 472, 400, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	0, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	0, 620, 2310, 631, 496, 497, 632, 608, 386, 0,
	512, 545, 534, 618, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 0, 548, 498, 416,
	370, 566, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 614, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 611, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 634, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 319, 384, 576, 609, 610, 500,
	0, 563, 501, 511, 311, 535, 547, 546, 380, 460,
	0, 558, 561, 490, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 445, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 469, 551, 552, 374, 375,
	376, 377, 337, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	506, 357, 0, 399, 331, 572, 573, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 575, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 616,
	619, 420, 0, 620, 0, 631, 496, 497, 632, 608,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 0, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 1860, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	611, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 0, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 0, 620, 0, 631, 496, 497,
	632, 608, 386, 0, 512, 545, 534, 618, 499, 0,
	1989, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	0, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 599, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 0,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 0, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 0, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 1502, 0, 0, 0, 299, 219, 493, 614, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 611, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 1894, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 386, 0, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 611, 0, 449, 0,
	0, 1531, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 599, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 469, 551, 552, 374, 375, 376, 377,
	337, 577, 304, 472, 400, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	0, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	0, 620, 0, 631, 496, 497, 632, 608, 386, 0,
	512, 545, 534, 618, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 645, 326, 0, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 0, 548, 498, 416,
	370, 566, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 614, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 611, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 634, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 319, 384, 576, 609, 610, 500,
	0, 563, 501, 511, 311, 535, 547, 546, 380, 460,
	0, 558, 561, 490, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 445, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 469, 551, 552, 374, 375,
	376, 377, 337, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	506, 357, 0, 399, 331, 572, 573, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 575, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 616,
	619, 420, 0, 620, 0, 631, 496, 497, 632, 608,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 0, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 655,
	611, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 0, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 0, 620, 0, 631, 496, 497,
	632, 608, 386, 0, 512, 545, 534, 618, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	0, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 599, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 947,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 0, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 386, 0, 512, 545, 534, 618,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 549, 531, 541, 532, 517,
	518, 519, 526, 336, 520, 521, 522, 491, 523, 492,
	524, 525, 0, 548, 498, 416, 370, 566, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 614, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 611, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 634, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 553, 0, 468, 635, 636, 637, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 554, 571,
	538, 507, 470, 562, 504, 508, 510, 509, 574, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 630,
	319, 384, 576, 609, 610, 500, 0, 563, 501, 511,
	311, 535, 547, 546, 380, 460, 0, 558, 561, 490,
	629, 0, 555, 570, 633, 569, 626, 390, 0, 410,
	567, 514, 0, 559, 533, 0, 560, 529, 564, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 589, 590,
	591, 286, 473, 593, 594, 595, 596, 597, 598, 599,
	592, 445, 536, 513, 539, 453, 516, 515, 0, 0,
	550, 469, 551, 552, 374, 375, 376, 377, 337, 577,
	304, 472, 400, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 540, 638, 0, 600, 601,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 544, 479, 603, 606, 604,
	605, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 530, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 584, 583, 582, 581, 580, 579,
	578, 0, 0, 527, 428, 313, 275, 309, 310, 317,
	627, 624, 432, 628, 0, 283, 506, 357, 0, 399,
	331, 572, 573, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 575,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 625,
	0, 0, 0, 0, 0, 0, 0, 556, 568, 602,
	0, 612, 613, 615, 617, 616, 619, 420, 0, 620,
	0, 631, 496, 497, 632, 608, 386, 0, 512, 545,
	534, 618, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 549, 531, 541,
	532, 517, 518, 519, 526, 336, 520, 521, 522, 491,
	523, 492, 524, 525, 0, 548, 498, 416, 370, 566,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	614, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 1481, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 611, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 634, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 553, 0, 468, 635, 636, 637,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	554, 571, 538, 507, 470, 562, 504, 508, 510, 509,
	574, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 630, 319, 384, 576, 609, 610, 500, 0, 563,
	501, 511, 311, 535, 547, 546, 380, 460, 0, 558,
	561, 490, 629, 0, 555, 570, 633, 569, 626, 390,
	0, 410, 567, 514, 0, 559, 533, 0, 560, 529,
	564, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	589, 590, 591, 286, 473, 593, 594, 595, 596, 597,
	598, 599, 592, 445, 536, 513, 539, 453, 516, 515,
	0, 0, 550, 469, 551, 552, 374, 375, 376, 377,
	337, 577, 304, 472, 400, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 540, 638, 0,
	600, 601, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 544, 479, 603,
	606, 604, 605, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 530, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 584, 583, 582, 581,
	580, 579, 578, 0, 0, 527, 428, 313, 275, 309,
	310, 317, 627, 624, 432, 628, 0, 283, 506, 357,
	0, 399, 331, 572, 573, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 575, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 625, 0, 0, 0, 0, 0, 0, 0, 556,
	568, 602, 0, 612, 613, 615, 617, 616, 619, 420,
	0, 620, 0, 631, 496, 497, 632, 608, 386, 0,
	512, 545, 534, 618, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 549,
	531, 541, 532, 517, 518, 519, 526, 336, 520, 521,
	522, 491, 523, 492, 524, 525, 0, 548, 498, 416,
	370, 566, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 614, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 1479, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 611, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 634, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 553, 0, 468, 635,
	636, 637, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 554, 571, 538, 507, 470, 562, 504, 508,
	510, 509, 574, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 630, 319, 384, 576, 609, 610, 500,
	0, 563, 501, 511, 311, 535, 547, 546, 380, 460,
	0, 558, 561, 490, 629, 0, 555, 570, 633, 569,
	626, 390, 0, 410, 567, 514, 0, 559, 533, 0,
	560, 529, 564, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 589, 590, 591, 286, 473, 593, 594, 595,
	596, 597, 598, 599, 592, 445, 536, 513, 539, 453,
	516, 515, 0, 0, 550, 469, 551, 552, 374, 375,
	376, 377, 337, 577, 304, 472, 400, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 543, 540,
	638, 0, 600, 601, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 544,
	479, 603, 606, 604, 605, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 530,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 584, 583,
	582, 581, 580, 579, 578, 0, 0, 527, 428, 313,
	275, 309, 310, 317, 627, 624, 432, 628, 0, 283,
	506, 357, 0, 399, 331, 572, 573, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 575, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 625, 0, 0, 0, 0, 0, 0,
	0, 556, 568, 602, 0, 612, 613, 615, 617, 616,
	619, 420, 0, 620, 0, 631, 496, 497, 632, 608,
	386, 0, 512, 545, 534, 618, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 549, 531, 541, 532, 517, 518, 519, 526, 336,
	520, 521, 522, 491, 523, 492, 524, 525, 0, 548,
	498, 416, 370, 566, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 614, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	611, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	634, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 723, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 553, 0,
	468, 635, 636, 637, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 554, 571, 538, 507, 470, 562,
	504, 508, 510, 509, 574, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 630, 319, 384, 576, 609,
	610, 500, 0, 563, 501, 511, 311, 535, 547, 546,
	380, 460, 0, 558, 561, 490, 629, 0, 555, 570,
	633, 569, 626, 390, 0, 410, 567, 514, 0, 559,
	533, 0, 560, 529, 564, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 589, 590, 591, 286, 473, 593,
	594, 595, 596, 597, 598, 599, 592, 445, 536, 513,
	539, 453, 516, 515, 0, 0, 550, 469, 551, 552,
	374, 375, 376, 377, 337, 577, 304, 472, 400, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	543, 540, 638, 0, 600, 601, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 544, 479, 603, 606, 604, 605, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 530, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	584, 583, 582, 581, 580, 579, 578, 0, 0, 527,
	428, 313, 275, 309, 310, 317, 627, 624, 432, 628,
	0, 283, 506, 357, 0, 399, 331, 572, 573, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 575, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 625, 0, 0, 0, 0,
	0, 0, 0, 556, 568, 602, 0, 612, 613, 615,
	617, 616, 619, 420, 0, 620, 0, 631, 496, 497,
	632, 608, 386, 0, 512, 545, 534, 618, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 549, 531, 541, 532, 517, 518, 519,
	526, 336, 520, 521, 522, 491, 523, 492, 524, 525,
	0, 548, 498, 416, 370, 566, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 614, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 611, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 634, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 680, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	553, 0, 468, 635, 636, 637, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 554, 571, 538, 507,
	470, 562, 504, 508, 510, 509, 574, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 630, 319, 384,
	576, 609, 610, 500, 0, 563, 501, 511, 311, 535,
	547, 546, 380, 460, 0, 558, 561, 490, 629, 0,
	555, 570, 633, 569, 626, 390, 0, 410, 567, 514,
	0, 559, 533, 0, 560, 529, 564, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 589, 590, 591, 286,
	473, 593, 594, 595, 596, 597, 598, 681, 592, 445,
	536, 513, 539, 453, 516, 515, 0, 0, 550, 469,
	551, 552, 374, 375, 376, 377, 337, 577, 304, 472,
	400, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 543, 540, 638, 0, 600, 601, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 544, 479, 603, 606, 604, 605, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 530, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 584, 583, 582, 581, 580, 579, 578, 0,
	0, 527, 428, 313, 275, 309, 310, 317, 627, 624,
	432, 628, 0, 283, 506, 357, 0, 399, 331, 572,
	573, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 575, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 625, 0, 0,
	0, 0, 0, 0, 0, 556, 568, 602, 0, 612,
	613, 615, 617, 616, 619, 420, 0, 620, 0, 631,
	496, 497, 632, 608, 702, 701, 708, 698, 0, 0,
	1976, 0, 0, 0, 0, 0, 705, 706, 0, 707,
	711, 0, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 716, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1976, 0, 0, 0, 0, 1221,
	1222, 1223, 1220, 0, 0, 0, 0, 0, 720, 0,
	0, 722, 0, 0, 0, 0, 721, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1953, 1979,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1745, 0,
	0, 0, 1953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3682, 0, 0, 0, 1969, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1969, 0, 0, 0, 693, 695, 694, 0, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 704, 1957, 0,
	0, 0, 0, 0, 719, 0, 0, 0, 0, 1963,
	0, 697, 0, 0, 0, 687, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1951,
	1985, 0, 0, 1952, 1954, 1956, 0, 1958, 1959, 1960,
	1964, 1965, 1966, 1968, 1971, 1972, 1973, 0, 0, 0,
	0, 0, 1957, 0, 1961, 1970, 1962, 0, 0, 0,
	0, 0, 0, 1963, 0, 0, 1741, 0, 0, 0,
	0, 0, 0, 1738, 0, 0, 0, 1740, 1737, 1739,
	1743, 1744, 0, 1951, 1985, 1742, 0, 1952, 1954, 1956,
	1977, 1958, 1959, 1960, 1964, 1965, 1966, 1968, 1971, 1972,
	1973, 0, 0, 0, 0, 0, 0, 0, 1961, 1970,
	1962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 699, 703, 709, 0, 710, 712,
	0, 0, 713, 714, 715, 0, 1974, 717, 718, 0,
	0, 0, 0, 0, 1977, 0, 0, 0, 0, 0,
	0, 0, 0, 1950, 0, 0, 0, 0, 0, 0,
	1949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1967, 0, 0, 0, 0, 0,
	1974, 0, 0, 1955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1950, 0, 0,
	0, 0, 0, 0, 1949, 0, 0, 0, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1748,
	1749, 1750, 1751, 1752, 1753, 1746, 1747, 0, 1967, 0,
	0, 0, 0, 0, 0, 0, 0, 1955, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 696, 0, 0, 0, 0, 0, 0,
	0, 3547, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3547,
}

var yyPact = [...]int{
	317, -1000, -1000, -1000, -330, 14315, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47921, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 469, 47921,
	-325, 29883, 46055, -1000, -1000, 2722, -1000, 46677, 16193, 47921,
	560, 551, 47921, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 961, -1000, 50409,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 894, 51041,
	49787, 11181, -206, -1000, 1712, -31, 2644, 546, -209, -212,
	1117, 1129, 1274, 1274, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 295, 997, 47299,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 258, 243, 960, 997, 21173, 128,
	122, 1712, 458, -84, 270, -1000, 1471, 4012, 190, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11181, 11181, 14315, -365, 14315, 11181, 47921, 47921, -1000, -1000,
	-1000, -1000, -325, 46677, 894, 51041, 11181, 2644, 546, -209,
	-212, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -84, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 122, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4974, -1000, 1638, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2364,
	3136, 1637, 2643, 861, 46055, 47921, -1000, 144, 861, -1000,
	-1000, -1000, 1712, 3513, -1000, 47921, 47921, 197, 1925, -1000,
	982, 962, 667, 411, 378, 1632, -1000, -1000, -1000, -1000,
	-1000, -1000, 774, 3491, -1000, 47921, 47921, 3172, 47921, -1000,
	2302, 811, -1000, 4424, 3334, 1262, 1002, 3194, -1000, -1000,
	3134, -1000, 389, 764, 304, 757, 468, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 322, -1000, 3401, -1000, -1000, 357,
	-1000, -1000, 327, -1000, -1000, -1000, 121, -1000, -1000, -1000,
	-1000, -1000, -1000, -6, -1000, -1000, 1190, 2310, 11181, 2041,
	-1000, 4062, 1648, -1000, -1000, -1000, 6800, 13056, 13056, 13056,
	13056, 47921, -1000, -1000, 2989, 11181, 3133, 3131, 3130, 3129,
	-1000, -1000, -1000, -1000, -1000, -1000, 1631, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2037, -1000, -1000, -1000,
	13681, -1000, 3125, 3124, 3121, 3120, 3119, 3117, 3115, 3114,
	3113, 3112, 3111, 3110, 3105, 3103, 2832, 15561, 3102, 2635,
	2634, 3101, 3099, 3098, 2633, 3097, 3095, 3094, 2832, 2832,
	3093, 3087, 3086, 3082, 3081, 3072, 3071, 3069, 3068, 3067,
	3066, 3062, 3060, 3059, 3056, 3055, 3053, 3052, 3049, 3046,
	3038, 3024, 3023, 3021, 3017, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1485, -1000,
	3016, 3503, 2908, -1000, 3383, 3381, 3377, 3368, -263, 3011,
	2277, -1000, -1000, 119, 3489, 47921, -289, 47921, 2626, -90,
	2625, -92, -1000, -70, -1000, -1000, 1105, -1000, 1081, -1000,
	893, 893, 893, 47921, 47921, 224, 1052, 893, 893, 893,
	893, 893, 935, 893, 3419, 958, 951, 950, 949, 893,
	-39, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1924, 1914,
	3248, 1044, -1000, -1000, -1000, -1000, 1553, 47921, -1000, 2928,
	2624, 1711, 1711, 3475, 3475, 3418, 850, 836, 822, 1711,
	633, -1000, 1912, 1912, 1912, 1912, 1711, 522, 827, 3422,
	3422, 120, 1912, 70, 1711, 1711, 70, 1711, 1711, -1000,
	1895, 251, -269, -1000, -1000, -1000, -1000, 1912, 1912, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3395, 3394, 894, 894,
	47921, 894, 192, 47921, 894, 894, 894, 47921, 903, 49,
	49165, 48543, 2313, 2302, 800, 795, 1566, 1851, -1000, 1733,
	47921, 47921, 1733, 1733, 24285, 23663, -1000, 47921, -1000, 3503,
	2908, 2829, 1706, 2821, 2908, -98, 2611, 894, 894, 894,
	894, 894, 316, 894, 894, 894, 894, 894, 47921, 47921,
	45433, 894, 894, 894, 894, 9300, 9300, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14315, 2176, 2135, 189,
	-10, -307, 283, -1000, -1000, 47921, 3313, 306, -1000, -1000,
	-1000, 2867, -1000, 2918, 2918, 2918, 2918, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2918, 2918, 2925,
	3010, -1000, -1000, 2917, 2917, 2917, 2867, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2919, 2919, 2923, 2923, 2919, 47921, -118, -1000,
	-1000, 11181, 47921, 3321, 405, 3009, 861, -1000, -1000, 47921,
	169, 444, 3503, 3319, 3422, 3467, -1000, -1000, 1628, 2274,
	2610, -1000, 378, -1000, 396, 378, -1000, 445, 445, 1823,
	-1000, 1245, -1000, -1000, -1000, -1000, -1000, -1000, 47921, -6,
	432, -1000, -1000, 2553, 3004, -1000, 653, 1219, 1574, -1000,
	252, 5062, 38591, 2302, 38591, 47921, -1000, -1000, -1000, -1000,
	-1000, -1000, 117, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 355, -1000, 11181,
	11181, 11181, 11181, 11181, -1000, 736, 12431, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 13056, 13056, 13056, 13056, 13056, 13056,
	13056, 13056, 13056, 13056, 13056, 13056, 2983, 1877, 13056, 13056,
	13056, 13056, 26773, 1706, 3157, 1565, 308, 1648, 1648, 1648,
	1648, 11181, -1000, 1934, 2310, 11181, 11181, 11181, 11181, 47921,
	-1000, -1000, 51007, 11181, 11181, 4342, 11181, 3365, 11181, 11181,
	11181, 2820, 5541, 47921, 11181, -1000, 2818, 2816, -1000, -1000,
	2054, 11181, -1000, -1000, 11181, -1000, -1000, 11181, 13056, 11181,
	-1000, 11181, 11181, 11181, -1000, -1000, 3301, 3365, 3365, 3365,
	1893, 11181, 11181, 3365, 3365, 3365, 1845, 3365, 3365, 3365,
	3365, 3365, 3365, 3365, 3365, 3365, 3365, 2815, 2813, 2809,
	10556, 3422, -206, -1000, 8675, 3319, 3422, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -265, 3003, 47921,
	2604, 2603, -339, 173, 487, 47921, 1192, 410, 2267, -104,
	2259, 37, 1115, 1092, 1103, -1000, 2600, 1944, 47921, 47921,
	3359, -1000, 2993, 47921, 893, 893, 893, -1000, 43567, 38591,
	47921, 47921, 2302, 47921, 47921, 47921, 893, 893, 893, 893,
	47921, -1000, 3285, 38591, 3257, 903, -1000, 47921, 1553, 3358,
	47921, 410, 3475, 13056, 13056, -1000, -1000, 11181, -1000, 44811,
	1912, 1711, 1711, -1000, -1000, 47921, -1000, -1000, -1000, 1912,
	47921, 1912, 1912, 3475, 1912, -1000, -1000, -1000, 1711, 1711,
	-1000, -1000, 11181, -1000, -1000, 1912, 1912, -1000, -1000, 3475,
	47921, 110, 3475, 3475, 78, -1000, -1000, -1000, 1711, 47921,
	47921, 893, 47921, -1000, 47921, 47921, -1000, -1000, 47921, 47921,
	4300, 47921, 43567, 44189, 3391, -1000, 38591, 47921, 47921, 1547,
	-1000, 930, 36103, -1000, 1508, -1000, 24, -1000, 20, 49,
	1733, 49, 1733, 929, -1000, 642, 749, 22419, 550, 38591,
	6166, -1000, -1000, 1733, 1733, 6166, 6166, 1666, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1537, -1000, 290, 3422, -1000,
	-1000, -1000, -1000, -1000, 2254, 410, 47921, 43567, 38591, 2302,
	47921, 894, 47921, 47921, 47921, 47921, 47921, -1000, 2992, 1626,
	-1000, 3330, 47921, 47921, 47921, 47921, 1520, -1000, -1000, 19303,
	1612, 1520, -1000, 1951, -1000, 11181, 14315, -246, 11181, 14315,
	14315, 11181, 14315, -1000, 11181, 301, -1000, -1000, -1000, -1000,
	2247, -1000, 2246, -1000, -1000, -1000, -1000, -1000, 2598, 2598,
	-1000, 2238, -1000, -1000, -1000, -1000, 2231, -1000, -1000, 2225,
	-1000, -1000, -1000, -1000, -149, 2805, 1190, -1000, 2572, 3193,
	-207, -1000, 20551, 47921, 47921, 405, -344, 1913, 1911, 1906,
	-1000, -207, -1000, 19927, 47921, 3422, -1000, -220, 3319, 11181,
	47921, -1000, 3416, -1000, -1000, 378, -1000, -1000, -1000, 445,
	435, -1000, -1000, -1000, -1000, -1000, -1000, 1610, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 464, -86,
	-99, 1535, -1000, 47921, -1000, -1000, 252, 38591, 40457, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 286, -1000, -1000, 180,
	-1000, 928, 249, 1818, -1000, -1000, 215, 208, 188, 1011,
	2310, -1000, 1964, 1964, 1965, -1000, 740, -1000, -1000, -1000,
	-1000, 2989, -1000, -1000, -1000, 2080, 1821, -1000, 1740, 1740,
	1672, 1672, 1672, 1672, 1672, 1948, 1948, -1000, -1000, -1000,
	6800, 2983, 13056, 13056, 13056, 13056, 991, 991, 4092, 4078,
	-1000, -1000, -1000, -1000, 11181, 179, 1946, -1000, 11181, 2465,
	1615, 2271, 1470, 1587, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2803, 2801, 2335, 3488, 2789, 11181,
	-1000, -1000, 1816, 1779, 1778, -1000, 2236, 9931, -1000, -1000,
	-1000, 2788, 1586, 2787, -1000, -1000, -1000, 2782, 1770, 1364,
	2780, 2529, 2779, 2778, 2776, 2774, 1530, 11181, 11181, 11181,
	11181, 2761, 1761, 1751, 11181, 11181, 11181, 11181, 2755, 11181,
	11181, 11181, 11181, 11181, 11181, 11181, 11181, 11181, 11181, 123,
	123, 123, 1529, 1519, -1000, -1000, 1748, -1000, 2310, -1000,
	-1000, 3319, -1000, 2982, 2224, 1518, -1000, -1000, -321, 2484,
	47921, 47921, 172, 47921, 2569, -291, 47921, -1000, -1000, 2566,
	-1000, 2562, -1000, -1000, -1000, 1112, 1063, 1095, 2547, 3328,
	3414, 921, 47921, 1353, 2980, 47921, 47921, 47921, 288, -1000,
	-1000, 1275, -1000, 249, -27, 563, 1251, 3168, 3486, -127,
	47921, 47921, 47921, 47921, 3356, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42945, -1000, 2975, 1744, -1000, -1000, -1000,
	1648, 1648, 2310, 3166, 47921, 47921, 3475, 3475, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1912, 3475, 3475, 1577, 1711,
	1912, -1000, -1000, 1912, -344, -1000, 1912, -1000, -344, 1585,
	-344, 47921, -1000, -1000, -1000, 3354, 2928, 1514, -1000, -1000,
	-1000, 3465, 1667, 881, 881, 1126, 828, 3463, 18059, -1000,
	1797, 1349, 926, 3274, 382, -1000, 1797, -145, 864, 1797,
	1797, 1797, 1797, 1797, 1797, 1797, 766, 758, 1797, 1797,
	1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1125,
	1797, 1797, 1797, 1797, 1797, -1000, 1797, 2972, 554, -1000,
	-1000, -1000, -1000, -1000, -1000, 819, 684, 279, 3390, 429,
	-1000, 424, 1275, 3376, 461, 47921, 47921, 3041, 1489, -1000,
	-1000, -1000, -1000, -1000, 27395, 27395, 21797, 27395, -1000, 212,
	49, 80, -1000, -1000, 1508, 6166, 1508, 6166, 2220, -1000,
	-1000, 922, -1000, -1000, 1251, -1000, 47921, 47921, -1000, -1000,
	2971, 1905, -1000, -1000, 15561, -1000, 6166, 6166, -1000, -1000,
	29261, 47921, -1000, -17, -1000, 5, 3319, -1000, -1000, 1220,
	-1000, -1000, 1497, 1251, 3187, 47921, 1220, 1220, 1220, -1000,
	-1000, 16815, 47921, 47921, -1000, -1000, -1000, -1000, 3475, 9300,
	-1000, 36103, -1000, -1000, 42323, -1000, 41701, 3475, 1930, -1000,
	14315, 2130, 187, -1000, 273, -310, 185, 2018, 183, 2310,
	-1000, -1000, 2754, 2743, 1742, -1000, 1741, 2742, 1735, 1724,
	2218, -1000, 52, -1000, 3315, 1284, -1000, 2970, -1000, 1723,
	3245, -1000, 1487, -1000, 1904, 1722, -1000, -1000, -1000, 11181,
	41079, 11181, 1284, 1707, 3240, 1487, 3319, 2526, -1000, 1463,
	-1000, 2048, 1584, 191, -1000, -1000, -1000, 47921, 894, 2553,
	1702, 40457, 1384, -1000, 908, 1583, 1580, -1000, 38591, 362,
	38591, -1000, 38591, -1000, -1000, 412, -1000, 47921, 3317, -1000,
	-1000, -1000, 2484, 1894, -342, 47921, -1000, -1000, -1000, -1000,
	-1000, 1696, -1000, 991, 991, 4092, 2883, -1000, 13056, -1000,
	13056, 3150, -1000, 1880, -1000, 11181, 2125, 3925, 11181, 3925,
	2756, 25529, 47921, -1000, -1000, 11181, 11181, -1000, 3126, -1000,
	-1000, -1000, -1000, 11181, 11181, 2187, -1000, 47921, -1000, -1000,
	-1000, -1000, 25529, -1000, 13056, -1000, -1000, -1000, -1000, 11181,
	1459, 1459, 3078, 1694, 123, 123, 123, 3047, 3014, 2977,
	1689, 123, 2967, 2956, 2932, 2875, 2871, 2720, 2698, 2674,
	2641, 2627, -1000, 2969, -1000, -1000, 2015, 11806, 8675, -1000,
	-1000, 321, 1460, 2212, 2517, 124, -1000, 1888, -1000, 2516,
	47921, 47921, 1180, -1000, 47921, 3481, -1000, 2514, -1000, -1000,
	-1000, 1051, 2513, -1000, 495, 2057, 167, 319, 2738, 1434,
	-1000, -1000, 47921, -1000, -1000, -1000, 16815, 2928, 2965, 2928,
	151, 1797, 645, 38591, 790, -1000, 47921, 2179, 1878, 3178,
	1017, 3311, 47921, 2964, 406, 2953, 2951, 3353, 544, 5070,
	47921, 1444, -1000, 1569, 4012, -1000, 47921, -1000, 2302, -1000,
	1711, -1000, -1000, 3475, -1000, -1000, 11181, 11181, 3475, 1711,
	1711, -1000, 1912, -1000, 47921, -1000, -344, 544, 5070, 3351,
	4597, 775, 2757, -1000, 47921, -1000, -1000, -1000, 952, -1000,
	1088, 893, 47921, 1997, 1088, 1994, 2950, -1000, -1000, 47921,
	47921, 47921, 47921, -1000, -1000, 47921, -1000, 47921, 47921, 47921,
	47921, 47921, 39835, -1000, 47921, 47921, -1000, 47921, 1991, 47921,
	1988, 3294, -1000, 1797, 1797, 1016, -1000, -1000, 603, -1000,
	39835, 2210, 2208, 2204, 2195, 2511, 2510, 2508, 1797, 1797,
	2193, 2507, 39213, 2505, 1469, 2192, 2182, 2175, 2178, 2500,
	1374, -1000, 2499, 2158, 2118, 2111, 47921, 2937, 2431, 547,
	-1000, -1000, 2057, 151, 1797, 418, 47921, 1876, 1875, 645,
	562, -29, 23041, -1000, -1000, -1000, 47921, 36103, 36103, 36103,
	36103, 36103, -1000, 3226, 3211, 3225, -1000, 3218, 3209, 3229,
	3019, 47921, 36103, 2928, -1000, 39213, -1000, -1000, -1000, 1706,
	1685, 3259, 1080, 11181, -1000, -1000, 13, 11, -1000, -1000,
	-1000, -1000, 38591, 2497, 550, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3412, 47921, 47921, 886, 2737, 1428, -1000, -1000,
	-1000, 5070, 2918, 2918, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2918, 2918, 2925, -1000, -1000, 2917, 2917,
	2917, 2867, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2919, 2919, 2923, 2923, 2919, -1000, -1000, 3472,
	-1000, 1420, -1000, -1000, 1375, -1000, 3472, 1938, -335, 14315,
	1726, 1727, -1000, 11181, 14315, 11181, -247, 404, -251, -1000,
	-1000, -1000, 2496, -1000, -1000, -1000, 2174, -1000, 2166, -1000,
	168, 214, 1978, -207, 8675, 442, 47921, -207, 47921, 8675,
	-1000, 47921, 175, -350, -352, 166, 422, -207, 3412, 52,
	11181, 3306, -1000, -1000, 47921, 2163, -1000, -1000, -1000, 3479,
	38591, 2302, 1679, 37969, -1000, 352, -1000, 276, 602, 2494,
	-1000, 939, 118, 2492, 2484, -1000, -1000, -1000, -1000, 13056,
	1648, -1000, -1000, -1000, 2310, 11181, 2734, -1000, 1078, 1078,
	2229, 2733, 2732, -1000, 2918, 2918, -1000, 2867, 2917, 2867,
	1078, 1078, 2731, -1000, 2102, 2595, -1000, 2446, 2435, 11181,
	-1000, 2729, 4013, 1449, -50, -180, 123, 123, -1000, -1000,
	-1000, -1000, 123, 123, 123, 123, -1000, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 862, -101, -273,
	-102, -279, -1000, 2724, 1418, -1000, -1000, -1000, -1000, -1000,
	4342, 1417, 574, 574, 2484, 2483, -1000, 907, 2481, 1109,
	47921, 2480, -294, -1000, -1000, 2478, -1000, -1000, 47921, 2474,
	-1000, 680, 47921, 47921, 2473, 2472, 1353, 5070, 2723, 3348,
	17437, 3338, 2296, -1000, -1000, -1000, 28639, 609, -1000, -1000,
	-1000, 755, 282, 2155, 601, -1000, 47921, 573, 3256, 1874,
	2466, 47921, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3311, -1000, 924, 528, 34859, 14939, -1000, 414, 47921, -1000,
	17437, 17437, 414, 533, 1892, -1000, 861, 1255, 129, 36103,
	47921, -1000, 35481, 2719, -1000, 1251, 3475, -1000, 2310, 2310,
	-344, 3475, 3475, 1711, -1000, -1000, 533, -1000, 414, -1000,
	1085, 18681, 575, 457, 446, -1000, 739, -1000, -1000, 857,
	3279, 5070, -1000, 47921, -1000, 47921, -1000, 47921, 47921, 893,
	11181, 3279, 47921, 905, -1000, 1184, 529, 516, 846, 846,
	1408, -1000, 3341, -1000, -1000, 1397, -1000, -1000, -1000, -1000,
	47921, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25529, 25529,
	3373, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2464, 2463, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47921, 1677, -1000, 1873, 2154,
	2456, 2296, 28639, 1872, 1733, 2452, 2451, 609, 2179, 1867,
	931, 47921, -1000, 1225, 47921, 47921, -1000, 1467, -1000, 1865,
	3147, 3177, 3147, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3210, -1000, 3208, -1000, -1000, -1000, 1467, -1000, -1000, -1000,
	-1000, -1000, 1080, -1000, 3411, 1088, 1088, 1088, 2717, -1000,
	-1000, -1000, 1384, 2716, -1000, -1000, -1000, 3498, -1000, -1000,
	-1000, -1000, -1000, -1000, 16815, 3310, 3469, 3462, 37347, 3469,
	-1000, -335, 1743, -1000, 2088, 182, 1932, 47921, -1000, -1000,
	-1000, 2715, 2708, -229, 184, 3461, 3460, 1124, -1000, 2707,
	1381, -207, -1000, -1000, 1284, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -207, -1000, 1284, -1000, 168, -1000, -1000, 3300,
	-1000, -1000, 2302, -1000, 264, -1000, -1000, -1000, -1000, -1000,
	-1000, 238, -1000, 47921, -1000, 1380, 116, -1000, 2310, -1000,
	-1000, -1000, -1000, -1000, 3925, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11181, -1000, -1000, -1000,
	2414, -1000, -1000, 11181, 2700, 2449, 2699, 2447, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3503, -1000, 3459, 1670, 2694, 2692,
	1624, 2691, 2690, -1000, 11181, 2689, 4342, 1027, 2445, 1027,
	-1000, -1000, 460, 28017, 47921, 3477, -1000, 47921, 2443, -1000,
	-1000, 2057, 675, 731, -1000, -1000, -1000, -1000, 964, 414,
	2685, 1340, -1000, -1000, -1000, -1000, 414, -1000, 2442, 248,
	-1000, -1000, -1000, -1000, 2433, 2432, 2112, -1000, -1000, 2083,
	1575, 271, -1000, -1000, -1000, -1000, -1000, -1000, 2094, 47921,
	36725, 2287, 1861, -346, -1000, 2916, -1000, 1797, 1797, 1797,
	47921, 1622, -1000, 1797, 1797, 2682, -1000, -1000, 2680, 2679,
	-130, 866, 1794, 1791, -1000, 2110, 27395, 36103, 35481, 1280,
	-1000, 1246, -1000, -1000, -1000, -1000, -1000, -1000, 3475, 866,
	-1000, 590, 2097, 13056, 2915, 13056, 2911, 604, 2909, 1617,
	-1000, 47921, -1000, -1000, 47921, 3891, 2907, -1000, 2897, 3164,
	572, 2896, 2895, 47921, 2402, -1000, 3279, 47921, 799, 3282,
	-1000, -1000, -1000, 462, 448, -1000, -1000, 691, -1000, 47921,
	-1000, 47921, -1000, 1599, -1000, 25529, -1000, -1000, 1598, -1000,
	2431, 2428, 4342, -1000, -1000, 248, 2423, 6166, -1000, -1000,
	-1000, 3256, 2421, 2094, 47921, -1000, 47921, 1225, 1225, 3503,
	47921, 8675, -1000, -1000, 11181, 2881, -1000, 11181, -1000, -1000,
	-1000, -1000, -1000, 2880, 3273, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1919, -1000, 11181, 11181, -1000, -1000, 884, 14315,
	-253, 399, -1000, -1000, -1000, -232, 2418, -1000, -1000, 3457,
	2417, 2311, 47921, -1000, -1000, 1284, 1284, -229, -1000, -1000,
	1251, -1000, -1000, 1098, 771, -1000, 2665, 2390, -1000, 2345,
	123, -1000, 123, -1000, 246, 11181, -1000, 2416, -1000, -1000,
	-1000, 2405, -1000, -1000, 2331, -1000, 2663, -1000, 2404, -1000,
	-1000, 47921, -1000, -1000, 1108, 2393, -347, 2391, 2057, 2057,
	47921, 5070, -133, -130, 17437, -133, -1000, -1000, 394, -1000,
	-1000, 438, -1000, -1000, 2082, 650, -1000, -1000, 2389, 661,
	-1000, 1225, -1000, 1854, 2013, 2341, 32993, 25529, 26773, 2388,
	-1000, -1000, 34859, 1919, 1919, 5105, 355, 51108, -1000, 2879,
	1132, 1739, -1000, 2091, -1000, 2089, -1000, 3475, 1280, 127,
	-1000, -1000, 1678, -1000, 1132, 2757, 3456, -1000, 3796, 47921,
	3724, 47921, 2878, 1853, 13056, -1000, 857, 2990, -1000, -1000,
	3891, -1000, -1000, 2005, 13056, -1000, -1000, 2386, 26773, 1048,
	1852, 1847, 1077, 2873, -1000, 712, 3496, -1000, -1000, -1000,
	975, 2870, -1000, 1977, 1972, -1000, 47921, -1000, 32993, 32993,
	979, 979, 32993, 32993, 2869, 846, -1000, -1000, 13056, -1000,
	-1000, 1797, 1797, -1000, -1000, -1000, 1797, 1474, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2287, -1000, -1000, 1220, -1000,
	3422, -1000, -1000, 2310, 47921, 2310, 34237, -1000, 3454, 3453,
	-1000, 2310, 255, -1000, -335, 47921, 47921, -234, 2086, -1000,
	2384, 177, -1000, -1000, 1208, -232, -237, 78, 25529, 1820,
	-1000, -1000, -1000, -1000, -1000, 2659, -1000, 927, -1000, -1000,
	-1000, 1190, 2658, 2646, -1000, -1000, -1000, -1000, 47921, -1000,
	2323, -1000, 2381, 2380, 654, -115, -1000, -1000, 477, -1000,
	-1000, -1000, 623, 2303, -1000, -1000, 425, -1000, -1000, -1000,
	2094, 2378, -1000, -1000, 115, -1000, 1808, 1595, -1000, 2867,
	11181, -1000, -1000, -1000, -1000, -1000, -1000, 825, -1000, 414,
	51054, -1000, 1349, 26151, -1000, 1098, 825, 554, 31749, 727,
	330, -1000, 2085, -1000, -1000, 3503, -1000, 711, -1000, 605,
	-1000, 1588, -1000, 1548, 33615, 2078, 2828, -1000, 4656, 988,
	-1000, -1000, 4092, -1000, -1000, -1000, -1000, -1000, -1000, 2376,
	2371, -1000, -1000, -1000, -1000, -1000, 2075, 2859, 59, 3371,
	2361, -1000, -1000, 2853, 1538, 1524, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1505, 1494, 32993, -1000,
	-1000, 4092, 2065, 2064, 25529, 1797, -1000, -1000, 1488, 1483,
	-1000, -1000, -1000, -1000, -1000, -314, -1000, -1000, -1000, 2852,
	-1000, -1000, 3450, -234, -240, 2346, 159, 207, -1000, 2342,
	-1000, -1000, 936, -210, 148, 145, 143, -1000, -1000, -1000,
	11181, -1000, -1000, -1000, 109, -1000, 1807, -1000, -1000, 2057,
	47921, 708, -1000, -1000, -1000, -1000, 217, -1000, -1000, -1000,
	-1000, -1000, -1000, 2341, 2329, -1000, 32993, 3341, 2243, 576,
	3449, -1000, 51108, -1000, 1797, -1000, 576, 1464, -1000, 1797,
	1797, -1000, 540, -1000, 1725, -1000, 2056, -1000, 3422, -1000,
	539, -1000, 587, -1000, -1000, -1000, 1445, -1000, -1000, -1000,
	4656, 622, -1000, 849, 2850, -1000, -1000, 2440, 11181, 2832,
	1797, 2350, -111, 32993, 3141, 3139, 2934, 2877, 1443, -1000,
	-1000, -1000, 25529, -1000, -1000, 32371, -1000, 47921, 2311, -1000,
	-1000, 2324, -1000, 898, 186, 207, -1000, 3433, 170, 3432,
	3428, 1173, 1961, -1000, 140, 138, 133, -1000, -1000, -1000,
	-1000, -1000, 2323, 2322, 2319, 571, -1000, 343, -1000, -1000,
	-1000, 416, -1000, -1000, 3341, -1000, 3427, 775, -1000, 25529,
	-1000, -1000, 31749, 1919, 1919, -1000, -1000, 2047, -1000, -1000,
	-1000, -1000, 2045, -1000, -1000, -1000, 1431, -1000, 47921, 1050,
	8050, -1000, 2120, -1000, 47921, -1000, 3176, -1000, 314, 1423,
	416, 979, 416, 979, 416, 979, 416, 979, 338, -1000,
	-1000, -1000, 1409, -1000, -1000, -1000, 2831, 2044, 184, 174,
	3425, -1000, 2311, 3424, 2311, 2311, -1000, 147, 936, -1000,
	-1000, -1000, -1000, -1000, -1000, 2318, -1000, -1000, -1000, -1000,
	1797, 1797, 2317, 2315, 518, -1000, -1000, -1000, 31127, 575,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 622, 51108, -1000,
	8050, 1407, -1000, 2310, -1000, 846, -1000, -1000, 3174, 2874,
	3485, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 47921, 3364, 24907, 163, -1000, -1000, -1000, 2312, -1000,
	2311, -1000, -1000, 1789, -1000, -271, 2043, 2022, -1000, -1000,
	47921, -1000, 47921, 590, -1000, 51108, 1402, -1000, 8050, -1000,
	-1000, 3487, -1000, 3493, 1043, 1043, 416, 416, 416, 416,
	-1000, -1000, 47921, -1000, 1396, -1000, -1000, -1000, 1185, -1000,
	-1000, -1000, -1000, 2308, -1000, -1000, 2090, -1000, -1000, -1000,
	1307, 2757, -1000, -1000, -1000, -1000, -1000, 2072, 719, -1000,
	1170, -1000, 1750, -1000, 30505, 47921, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 47921, 7425, -1000, 1130, -1000, -1000, 2310,
	47921, -1000,
}

var yyPgo = [...]int{
	0, 173, 3515, 246, 183, 4084, 103, 256, 320, 277,
	255, 4083, 4082, 4080, 4078, 3305, 3303, 4077, 4076, 4075,
	4072, 4071, 4070, 4069, 4068, 4067, 4066, 4065, 4063, 4062,
	4061, 4060, 4059, 4058, 4057, 4056, 4053, 4052, 4051, 4049,
	4048, 4047, 4046, 4045, 4041, 4040, 4039, 254, 4038, 4037,
	4036, 4035, 4034, 4032, 4031, 4030, 4029, 4024, 4023, 4022,
	4021, 4020, 4019, 4018, 4017, 4016, 4015, 4011, 4010, 4009,
	4008, 4005, 4004, 4003, 4000, 3999, 3998, 3997, 3995, 241,
	3994, 3993, 259, 3992, 3302, 3991, 3989, 3988, 3987, 3986,
	3984, 3983, 3982, 247, 3980, 3979, 3978, 3977, 3974, 3973,
	3971, 3970, 3967, 3964, 3963, 3961, 352, 3960, 3959, 3958,
	3955, 234, 3954, 325, 3953, 178, 143, 3952, 3951, 3950,
	3947, 3931, 3930, 3929, 3928, 3924, 3922, 3921, 3920, 3919,
	244, 212, 76, 3918, 48, 3917, 3916, 222, 3915, 156,
	3914, 154, 3910, 3909, 3907, 3906, 3905, 3904, 3899, 3898,
	3896, 3890, 3886, 3885, 3884, 3883, 3882, 3877, 3876, 3860,
	3858, 3857, 3856, 3855, 3854, 61, 3852, 263, 3851, 77,
	3849, 177, 3842, 78, 3840, 83, 141, 261, 1983, 260,
	258, 187, 186, 3838, 3836, 309, 3835, 225, 231, 181,
	118, 47, 3834, 147, 3833, 265, 51, 36, 243, 155,
	57, 174, 136, 3832, 211, 101, 117, 3831, 3821, 151,
	3820, 242, 185, 3818, 115, 3817, 3816, 3813, 3812, 3811,
	205, 196, 3806, 3804, 138, 3803, 3802, 67, 133, 3801,
	80, 128, 170, 126, 3798, 2489, 130, 90, 3797, 132,
	108, 3796, 89, 3795, 3791, 3790, 3789, 188, 3785, 3784,
	137, 74, 3782, 3777, 3776, 72, 3775, 82, 3774, 39,
	3771, 59, 3770, 3769, 3768, 3767, 3766, 3765, 3763, 3762,
	3760, 3759, 3758, 3757, 56, 3756, 3755, 7, 13, 16,
	3754, 26, 3752, 171, 3751, 3749, 167, 3748, 198, 3747,
	3745, 100, 98, 3744, 99, 164, 3743, 9, 27, 79,
	3737, 3734, 226, 883, 111, 161, 3732, 275, 3731, 3730,
	3729, 165, 3727, 3723, 633, 3722, 3721, 3719, 3718, 3717,
	3716, 49, 3715, 1, 216, 44, 3713, 135, 142, 3711,
	38, 31, 3710, 52, 121, 204, 140, 104, 3709, 3708,
	3707, 658, 200, 106, 28, 0, 102, 223, 180, 3706,
	3705, 3704, 250, 3703, 240, 201, 235, 245, 269, 176,
	3701, 3700, 71, 3699, 158, 30, 55, 148, 66, 22,
	227, 3698, 1047, 8, 190, 3697, 208, 3696, 197, 17,
	116, 157, 3695, 3694, 33, 270, 3693, 3691, 3690, 139,
	3689, 3688, 182, 85, 3686, 3685, 3683, 3682, 40, 3681,
	37, 14, 3680, 110, 3676, 253, 3670, 271, 145, 191,
	175, 166, 232, 230, 87, 84, 3668, 1841, 163, 107,
	15, 3666, 229, 3664, 257, 125, 3662, 91, 3659, 249,
	266, 214, 3657, 192, 10, 50, 41, 29, 45, 12,
	264, 206, 3653, 3652, 23, 54, 3651, 86, 3648, 19,
	3647, 3646, 42, 3645, 65, 5, 3644, 3642, 18, 21,
	3641, 35, 210, 172, 127, 96, 75, 3640, 3639, 53,
	146, 3638, 144, 162, 159, 3637, 81, 3636, 3635, 3634,
	3633, 758, 3631, 252, 3630, 3629, 3627, 3626, 3625, 3624,
	3622, 3621, 3620, 220, 3619, 114, 43, 3618, 3616, 3613,
	3611, 88, 153, 3610, 3608, 3606, 3604, 32, 149, 3602,
	11, 3601, 24, 20, 34, 3600, 109, 3599, 3, 193,
	3596, 3592, 4, 3590, 3589, 2, 3588, 3586, 134, 3585,
	105, 25, 169, 112, 3584, 3581, 93, 209, 150, 3580,
	3577, 97, 236, 207, 3574, 129, 239, 262, 3573, 219,
	3572, 3571, 3570, 3569, 3568, 3567, 1219, 3566, 3563, 233,
	64, 92, 3562, 221, 122, 3561, 3560, 95, 168, 124,
	123, 58, 94, 3559, 119, 203, 3558, 202, 3556, 238,
	3554, 3553, 113, 3552, 3551, 3548, 3547, 194, 3546, 3545,
	195, 228, 3541, 3540, 272, 3539, 3538, 3537, 3535, 3531,
	3529, 3528, 3527, 3526, 3525, 251, 199, 3523,
}

//line mysql_sql.y:12564
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 600, 603, 603, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 121,
	121, 336, 336, 337, 337, 123, 332, 332, 331, 331,
	124, 125, 126, 579, 579, 127, 128, 157, 578, 578,
	159, 159, 159, 159, 159, 452, 122, 122, 122, 122,
	122, 163, 163, 163, 163, 163, 120, 585, 585, 585,
	586, 586, 117, 146, 145, 148, 148, 147, 147, 144,
	144, 140, 143, 143, 142, 142, 141, 136, 138, 138,
	137, 139, 139, 118, 106, 119, 527, 527, 526, 526,
	525, 525, 477, 477, 478, 478, 323, 323, 323, 524,
	524, 524, 523, 523, 522, 522, 521, 521, 519, 519,
	520, 518, 517, 517, 517, 515, 515, 515, 511, 511,
	513, 512, 512, 514, 506, 506, 509, 509, 507, 507,
	507, 507, 510, 505, 505, 505, 504, 504, 105, 105,
	105, 419, 419, 104, 104, 433, 433, 433, 433, 433,
	431, 431, 431, 431, 431, 431, 430, 430, 429, 429,
	434, 434, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 94, 94, 94, 94, 94, 94, 99,
	99, 99, 100, 591, 591, 590, 590, 592, 592, 592,
	592, 593, 593, 97, 97, 97, 98, 428, 428, 428,
	95, 96, 96, 418, 418, 423, 423, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	427, 427, 427, 425, 425, 424, 424, 426, 426, 88,
	88, 88, 91, 90, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 89, 89, 89, 89, 89, 89, 83,
	83, 83, 83, 83, 82, 82, 84, 84, 415, 415,
	414, 101, 101, 102, 588, 588, 587, 589, 589, 589,
	589, 103, 109, 109, 109, 109, 109, 109, 109, 109,
	108, 108, 111, 111, 110, 112, 93, 93, 93, 93,
	93, 93, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 552, 552,
	552, 552, 554, 554, 350, 351, 604, 353, 349, 349,
	349, 548, 548, 549, 550, 551, 551, 551, 107, 14,
	210, 210, 451, 451, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 13, 81, 86, 86, 87, 287,
	287, 288, 282, 282, 289, 289, 162, 290, 290, 290,
	295, 295, 296, 296, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 269, 269, 269, 264,
	264, 264, 264, 265, 265, 266, 266, 267, 267, 267,
	267, 268, 268, 342, 342, 291, 291, 291, 293, 293,
	292, 286, 284, 284, 284, 284, 284, 284, 284, 285,
	285, 285, 285, 285, 294, 294, 79, 85, 85, 85,
	85, 566, 566, 80, 577, 577, 481, 481, 364, 364,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 487, 488, 360, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 54, 57, 58, 161, 53, 53, 53,
	404, 404, 52, 605, 605, 335, 335, 67, 66, 56,
	68, 69, 70, 71, 72, 73, 51, 65, 65, 65,
	65, 65, 65, 65, 65, 76, 500, 500, 607, 607,
	607, 74, 75, 480, 480, 480, 64, 63, 62, 61,
	60, 60, 50, 50, 49, 49, 55, 152, 59, 153,
	153, 357, 357, 357, 359, 359, 355, 606, 606, 447,
	447, 358, 358, 48, 48, 48, 48, 77, 356, 356,
	334, 354, 354, 354, 12, 12, 10, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 26, 27, 29, 412, 412, 409,
	28, 20, 19, 19, 23, 22, 18, 18, 21, 24,
	25, 25, 9, 9, 9, 9, 15, 15, 16, 182,
	182, 236, 236, 560, 560, 556, 556, 557, 557, 557,
	558, 558, 559, 559, 113, 494, 494, 494, 494, 494,
	494, 8, 8, 205, 205, 493, 493, 493, 493, 493,
	493, 416, 416, 416, 537, 537, 537, 538, 204, 204,
	199, 199, 495, 495, 381, 539, 539, 503, 503, 502,
	502, 501, 501, 202, 202, 203, 203, 185, 185, 131,
	131, 508, 508, 508, 508, 516, 516, 476, 476, 274,
	274, 325, 325, 326, 326, 175, 175, 176, 176, 176,
	176, 176, 176, 594, 594, 595, 596, 597, 597, 598,
	598, 598, 599, 599, 599, 599, 599, 545, 545, 547,
	547, 546, 201, 201, 197, 197, 198, 198, 198, 196,
	196, 195, 194, 194, 193, 191, 191, 191, 192, 192,
	192, 209, 209, 178, 178, 178, 177, 177, 177, 177,
	177, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 179, 179, 553, 553, 553, 482, 482,
	482, 490, 490, 304, 304, 305, 305, 486, 486, 303,
	303, 180, 180, 181, 181, 181, 181, 302, 302, 301,
	190, 190, 189, 188, 188, 188, 183, 183, 183, 183,
	184, 313, 313, 312, 312, 311, 311, 311, 311, 116,
	129, 129, 130, 208, 208, 310, 309, 309, 309, 309,
	207, 207, 206, 206, 200, 200, 187, 187, 187, 187,
	308, 186, 306, 584, 584, 583, 583, 582, 580, 580,
	580, 581, 581, 581, 581, 529, 529, 529, 529, 529,
	343, 343, 343, 348, 348, 346, 346, 346, 346, 346,
	352, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 39, 219, 220, 40, 221, 221, 222,
	222, 223, 223, 224, 225, 226, 226, 226, 226, 38,
	211, 211, 212, 212, 213, 213, 214, 215, 215, 215,
	218, 216, 217, 217, 602, 602, 601, 37, 37, 30,
	166, 166, 167, 167, 167, 169, 169, 270, 270, 270,
	168, 168, 170, 170, 170, 561, 563, 563, 565, 564,
	564, 564, 567, 567, 567, 567, 567, 568, 568, 568,
	568, 569, 569, 31, 149, 149, 173, 173, 154, 572,
	572, 572, 571, 571, 573, 573, 574, 574, 329, 329,
	330, 330, 164, 165, 165, 156, 151, 172, 172, 172,
	172, 172, 174, 174, 238, 238, 150, 155, 158, 160,
	562, 570, 570, 570, 413, 413, 410, 411, 411, 408,
	407, 407, 407, 576, 576, 575, 575, 575, 344, 344,
	32, 403, 403, 405, 406, 406, 406, 397, 397, 397,
	397, 36, 401, 401, 402, 402, 402, 402, 402, 402,
	402, 398, 398, 400, 400, 396, 396, 396, 396, 396,
	396, 396, 396, 35, 171, 171, 395, 395, 392, 392,
	390, 390, 391, 391, 389, 389, 389, 393, 393, 43,
	78, 44, 45, 46, 42, 394, 394, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 133, 132, 132,
	132, 132, 132, 135, 135, 328, 328, 327, 327, 134,
	271, 271, 41, 249, 249, 468, 468, 463, 463, 463,
	463, 463, 484, 484, 484, 464, 464, 464, 465, 465,
	465, 467, 467, 467, 466, 466, 466, 466, 466, 483,
	483, 485, 485, 485, 435, 435, 436, 436, 436, 439,
	439, 455, 455, 456, 456, 454, 454, 461, 461, 460,
	460, 459, 459, 458, 458, 457, 457, 457, 457, 450,
	450, 449, 449, 437, 437, 437, 437, 437, 438, 438,
	438, 448, 448, 453, 453, 300, 300, 299, 299, 257,
	257, 258, 258, 298, 298, 255, 255, 256, 256, 256,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 535, 535, 536, 260,
	260, 272, 272, 272, 272, 272, 272, 259, 259, 261,
	261, 237, 237, 235, 235, 227, 227, 227, 227, 227,
	228, 228, 229, 229, 230, 230, 230, 234, 234, 233,
	233, 233, 233, 231, 231, 232, 232, 232, 232, 232,
	232, 421, 421, 532, 532, 533, 533, 528, 528, 528,
	531, 531, 531, 531, 531, 531, 531, 531, 534, 534,
	534, 530, 530, 239, 322, 322, 322, 345, 345, 345,
	345, 347, 321, 321, 321, 254, 254, 253, 253, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 420, 420, 361, 361, 362, 362, 281, 280, 280,
	280, 280, 280, 278, 279, 277, 277, 277, 277, 277,
	276, 276, 275, 275, 275, 399, 399, 273, 273, 263,
	263, 263, 262, 262, 262, 462, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 319, 319, 319, 320, 320,
	320, 320, 320, 320, 320, 320, 371, 371, 377, 377,
	544, 544, 543, 240, 240, 240, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 250, 250, 250, 444, 444,
	444, 444, 445, 445, 445, 445, 446, 446, 446, 442,
	442, 443, 443, 382, 383, 383, 491, 491, 492, 492,
	440, 440, 441, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 499, 499, 499, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 555, 555, 555, 540, 540, 540,
	541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
	541, 541, 542, 542, 542, 542, 542, 542, 542, 542,
	542, 542, 542, 542, 542, 542, 542, 542, 542, 317,
	317, 317, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	384, 384, 385, 385, 496, 496, 496, 496, 496, 496,
	497, 497, 498, 498, 498, 498, 489, 489, 489, 489,
	489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
	489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
	489, 489, 489, 489, 489, 369, 314, 314, 314, 386,
	378, 378, 379, 379, 380, 380, 372, 372, 372, 372,
	372, 372, 373, 373, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 374, 374, 376, 376,
	388, 388, 388, 387, 387, 387, 387, 387, 387, 387,
	252, 252, 252, 252, 366, 366, 366, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 242,
	242, 242, 242, 246, 246, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 247,
	247, 247, 247, 247, 245, 245, 245, 245, 245, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 114, 115,
	115, 244, 324, 324, 469, 469, 472, 472, 470, 470,
	471, 473, 473, 473, 474, 474, 474, 475, 475, 475,
	479, 479, 333, 333, 333, 341, 341, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 5, 1, 3, 3, 1, 2, 2, 2,
	1, 2, 2, 3, 4, 4, 6, 1, 1, 1,
	2, 4, 6, 1, 4, 1, 3, 3, 4, 4,
	4, 4, 3, 3, 2, 4, 4, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 2, 2, 0, 1, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 3, 4, 4, 1, 2, 9, 7, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 2, 4, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	3, 4, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 1, 1, 1, 1, 6, 4,
	1, 1, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 10, 7, 4, 4, 3, 1,
	3, 3, 1, 3, 1, 6, 7, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 6, 3, 3, 1, 1, 7, 7, 7, 8,
	8, 0, 4, 7, 0, 3, 0, 2, 0, 1,
	1, 1, 1, 4, 2, 2, 3, 3, 4, 5,
	3, 4, 4, 2, 2, 2, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 3, 3, 2, 5, 5,
	0, 2, 7, 0, 1, 0, 1, 5, 5, 3,
	3, 2, 4, 4, 4, 4, 4, 1, 1, 1,
	3, 3, 1, 1, 1, 6, 0, 1, 1, 1,
	1, 5, 5, 0, 1, 1, 3, 3, 3, 4,
	7, 7, 5, 4, 7, 8, 3, 3, 2, 3,
	4, 0, 2, 2, 0, 2, 2, 1, 1, 1,
	1, 0, 1, 5, 5, 6, 4, 3, 1, 3,
	1, 1, 3, 5, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 1, 3, 1,
	4, 6, 6, 4, 4, 4, 4, 4, 3, 6,
	3, 5, 1, 1, 2, 2, 11, 8, 9, 1,
	3, 2, 4, 0, 2, 0, 1, 1, 1, 1,
	0, 1, 0, 1, 4, 2, 1, 5, 4, 4,
	2, 5, 5, 1, 3, 2, 1, 5, 4, 4,
	2, 0, 5, 4, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 6, 4, 5,
	7, 4, 5, 0, 1, 3, 8, 0, 6, 0,
	4, 6, 1, 1, 1, 1, 1, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 3, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 4, 0, 2, 0,
	2, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 3, 1, 1, 1, 1, 4, 4, 4, 3,
	3, 2, 2, 2, 2, 2, 3, 2, 3, 4,
	1, 3, 4, 0, 2, 1, 1, 2, 2, 2,
	0, 1, 2, 4, 1, 3, 1, 3, 2, 3,
	1, 4, 3, 0, 1, 1, 2, 5, 2, 2,
	2, 0, 2, 3, 3, 0, 1, 3, 1, 3,
	0, 1, 2, 1, 1, 0, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 1, 7, 1, 3, 0,
	1, 1, 3, 1, 3, 0, 1, 1, 1, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 0, 1, 1,
	1, 0, 2, 7, 8, 10, 2, 2, 8, 0,
	3, 3, 0, 3, 0, 3, 0, 5, 1, 3,
	0, 3, 3, 0, 2, 9, 8, 0, 2, 2,
	3, 3, 0, 2, 0, 2, 4, 4, 4, 4,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 1, 3, 3, 4, 0, 2, 2, 2, 2,
	2, 2, 2, 6, 0, 4, 1, 1, 0, 3,
	0, 1, 1, 2, 4, 4, 4, 0, 1, 8,
	2, 4, 4, 4, 9, 0, 2, 11, 9, 11,
	8, 6, 9, 7, 10, 7, 6, 2, 2, 9,
	4, 5, 3, 0, 4, 1, 3, 0, 3, 6,
	0, 2, 10, 0, 2, 0, 2, 0, 3, 2,
	4, 3, 0, 2, 1, 0, 2, 3, 0, 2,
	3, 0, 2, 1, 0, 3, 2, 4, 3, 0,
	1, 0, 1, 1, 0, 6, 0, 3, 5, 0,
	4, 0, 3, 1, 3, 4, 5, 0, 3, 1,
	3, 2, 3, 1, 2, 0, 4, 6, 5, 0,
	2, 0, 2, 4, 5, 4, 5, 1, 5, 6,
	5, 0, 3, 0, 1, 1, 3, 3, 3, 0,
	4, 1, 3, 3, 3, 0, 1, 1, 3, 2,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 5, 4, 5, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 5, 5, 5, 5,
	0, 1, 1, 3, 1, 1, 1, 1, 1, 7,
	9, 7, 9, 2, 1, 7, 9, 7, 9, 8,
	5, 0, 1, 0, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 3, 3, 2,
	2, 1, 5, 6, 4, 1, 1, 1, 5, 4,
	1, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 2, 2, 0, 3, 0, 3, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 3, 5, 2, 2, 2, 2, 4, 1,
	1, 2, 5, 6, 8, 6, 6, 6, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 4, 7, 9,
	7, 7, 7, 9, 7, 7, 0, 2, 0, 1,
	1, 2, 4, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 2, 2, 2, 0, 1, 1, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	5, 0, 1, 3, 0, 1, 0, 2, 0, 2,
	0, 1, 6, 8, 8, 6, 6, 5, 5, 5,
	6, 6, 6, 6, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 4, 4, 4, 3, 4,
	6, 6, 7, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 8, 4, 2, 3, 2, 4, 2, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 4, 4, 4,
	0, 1, 2, 3, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 3,
	0, 1, 1, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 1, 1, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 1, 3, 4, 4, 5, 4,
	5, 3, 4, 5, 6, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 4, 4, 1, 2, 3,
	5, 1, 1, 3, 0, 1, 0, 3, 0, 3,
	3, 0, 3, 5, 0, 3, 5, 0, 1, 1,
	0, 1, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -600, -603, -2, -5, 629, -1, -4, -115, -88,
	-7, -14, -117, -118, -8, -113, -9, -10, -12, -92,
	-108, -110, -112, -111, -47, -11, -107, -82, -83, -94,
	-101, -104, -105, -106, -119, -114, -116, -175, -120, -121,
	-122, -163, -125, -127, -128, 619, -89, -90, -91, -33,
	-32, -31, -30, -149, -154, -157, -159, -123, 552, 625,
	455, 14, 504, -15, -16, -545, -17, 263, -349, -350,
	-351, -353, -604, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -152,
	-153, -77, -57, -78, -58, -161, -124, -80, -79, -85,
	-81, -86, -151, -156, -13, -162, -87, 237, -84, 76,
	-95, -96, -97, -98, -99, -100, -102, -103, 379, 385,
	442, 618, 61, -176, -178, 639, 640, 643, 539, 542,
	161, 162, 164, 165, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 233, 16, 547,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-150, -25, -155, -23, -158, -160, -126, 258, 257, 38,
	324, 325, 326, 383, 256, 234, 236, 15, 31, 42,
	358, -177, 84, 540, 235, -179, 13, 645, -6, -3,
	-2, -136, -140, -144, -147, -148, -145, -146, -4, -115,
	119, 248, 620, -345, 375, 621, 623, 622, 87, 95,
	-338, -340, 455, 263, 379, 385, 618, 640, 643, 539,
	542, 554, 555, 556, 557, 558, 559, 560, 561, 563,
	564, 565, 566, 567, 568, 569, 579, 580, 570, 571,
	572, 573, 574, 575, 576, 577, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	507, 604, 605, 606, 607, 535, 562, 598, 599, 600,
	601, 356, 357, 544, 275, 299, 410, 305, 312, 161,
	180, 174, 203, 194, 540, 169, 279, 317, 280, 94,
	164, 490, 109, 467, 439, 167, 294, 296, 298, 536,
	537, 369, 301, 534, 300, 302, 304, 538, 281, 359,
	190, 185, 293, 277, 183, 282, 40, 283, 208, 284,
	285, 549, 463, 355, 469, 309, 52, 437, 184, 464,
	297, 466, 212, 216, 481, 482, 178, 179, 471, 484,
	207, 210, 211, 255, 352, 353, 43, 546, 267, 485,
	214, 206, 201, 493, 313, 311, 205, 177, 200, 278,
	65, 218, 217, 219, 433, 434, 435, 436, 286, 287,
	373, 480, 197, 186, 360, 170, 23, 488, 262, 468,
	386, 288, 306, 314, 213, 215, 269, 274, 329, 548,
	441, 273, 310, 486, 182, 266, 295, 261, 489, 171,
	388, 289, 165, 303, 483, 492, 64, 401, 176, 168,
	636, 252, 162, 271, 276, 290, 291, 292, 533, 316,
	315, 307, 541, 198, 268, 204, 188, 175, 199, 163,
	270, 491, 402, 616, 358, 420, 196, 193, 272, 245,
	487, 470, 166, 424, 403, 191, 318, 611, 612, 613,
	374, 351, 319, 320, 189, 259, 461, 462, 323, 430,
	341, 404, 440, 411, 405, 225, 226, 327, 473, 475,
	209, 614, 330, 331, 332, 465, 333, 334, 335, 336,
	378, 56, 58, 96, 99, 98, 641, 642, 63, 29,
	364, 367, 399, 406, 343, 617, 545, 340, 344, 346,
	345, 368, 25, 422, 390, 426, 425, 48, 49, 50,
	53, 54, 55, 57, 59, 60, 51, 532, 383, 396,
	494, 45, 47, 393, 27, 370, 421, 443, 339, 423,
	454, 46, 452, 453, 474, 26, 372, 371, 62, 44,
	429, 431, 432, 321, 337, 381, 626, 495, 376, 392,
	395, 377, 342, 366, 397, 67, 66, 389, 627, 384,
	382, 338, 550, 551, 347, 578, 361, 438, 529, 528,
	527, 526, 525, 524, 523, 522, 324, 325, 326, 407,
	408, 409, 419, 412, 413, 414, 415, 416, 417, 418,
	457, 458, 628, 476, 478, 479, 477, 240, 644, 362,
	363, 243, 630, 631, 97, 632, 634, 633, 28, 635,
	638, -426, -424, -345, 540, 618, 385, 539, 542, 379,
	358, 640, 643, 383, 263, 324, 325, 326, 455, 356,
	-221, -345, 644, -185, 247, 39, -235, -345, -185, -84,
	-16, -15, -177, -178, -235, 242, -354, 24, 437, -93,
	438, 237, 238, 84, 77, -345, -9, -106, -8, -113,
	-82, -175, 442, -352, -345, 324, 324, -352, 242, -347,
	273, 418, -345, -481, 248, -430, -403, 274, -429, -405,
	-432, -406, 32, 233, 235, 234, 552, 270, 16, 383,
	244, 14, 13, 384, 256, 25, 26, 28, 15, 385,
	387, 29, 388, 391, 392, 393, 42, 396, 397, 263,
	87, 95, 90, 281, -220, -345, -380, -372, 116, -375,
	-367, -368, -370, -323, -519, -365, 84, 143, 144, 151,
	117, 646, -369, -462, 36, 119, 558, 562, 598, 505,
	-315, -316, -317, -318, -319, -320, -345, -520, -518, 90,
	100, 102, 106, 107, 105, 103, 155, 187, 104, 91,
	156, -178, 87, -540, 568, -339, 591, 604, 605, 606,
	607, 590, 61, -489, -498, 241, -496, 154, 192, 259,
	188, 14, 149, 430, 189, 599, 600, 601, 565, 587,
	507, 569, 579, 594, 560, 561, 563, 555, 556, 557,
	559, 570, 572, 586, -499, 582, 592, 593, 578, 602,
	603, 595, 596, 597, 634, 89, 88, 585, 584, 571,
	566, 567, 573, 554, 564, 574, 575, 583, 588, 589,
	367, 109, 368, 369, 497, 359, 370, 248, 437, 70,
	371, 372, 373, 374, 375, 504, 376, 71, 377, 366,
	263, 420, 378, 191, 209, 509, 508, 510, 501, 498,
	496, 499, 500, 502, 503, 576, 577, 581, -129, -130,
	609, -594, -307, -595, 6, 7, 8, 9, -596, 156,
	-585, 439, 548, 90, 317, 356, 17, 497, 637, 538,
	637, 538, 166, 163, -417, 166, 115, 171, 170, -417,
	637, 168, 636, 327, 269, -394, -166, 356, 420, 333,
	96, 273, -397, -395, 536, -483, 321, 317, 293, 243,
	112, -167, 253, 252, 110, 497, 241, 394, 312, 56,
	58, -556, -557, 230, 231, 232, -547, 530, -546, -345,
	637, 369, 98, 99, 636, 27, 242, 380, 269, 475,
	473, 474, 476, 477, 478, 479, -65, -500, -480, 470,
	469, -358, 462, 468, 460, 472, 463, 357, 335, 552,
	334, 233, 630, 537, 531, -333, 404, 440, 494, 495,
	381, 441, 481, 483, 464, 109, 195, 192, 243, 245,
	242, 636, 356, 497, 420, 96, 333, 242, -556, 163,
	481, 483, 439, 273, 418, 41, -423, 430, -422, -424,
	482, 493, 88, 89, 480, -333, 109, 461, 461, -594,
	-307, -176, -178, -116, -545, 538, 637, 243, 356, 420,
	273, 244, 242, 533, 536, 245, 497, 241, 324, 380,
	269, 333, 96, 168, 636, -482, -553, 32, -490, 227,
	228, 229, 33, 34, -1, 123, 645, -372, -372, -6,
	648, -6, -372, -345, -345, 158, -242, -246, -243, -245,
	-244, -248, -247, 192, 193, 154, 196, 202, 198, 199,
	200, 201, 203, 204, 205, 206, 207, 210, 211, 208,
	31, 209, 259, 188, 189, 190, 191, 212, 174, 194,
	545, 220, 175, 221, 176, 222, 177, 223, 178, 179,
	224, 180, 183, 184, 185, 186, 182, 157, -210, 90,
	32, 84, 157, 90, -202, 265, -185, -235, -227, 157,
	646, -202, -594, -195, -196, 11, -235, -321, -345, 439,
	126, -93, 77, -93, 438, 77, -93, 438, 237, -548,
	-549, -550, -552, 237, 438, 437, 238, -111, 157, 281,
	17, -352, -352, 82, -235, -405, 273, -430, -403, 36,
	81, 158, 246, 158, 81, 84, 381, 356, 420, 382,
	497, 242, 394, 245, 273, 395, 356, 420, 242, 245,
	497, 273, 356, 242, 245, 420, 273, 395, 356, 460,
	461, 245, 27, 386, 389, 390, 461, -504, 493, 158,
	115, 112, 113, 114, -372, 133, -387, 126, 127, 128,
	129, 130, 131, 132, 140, 139, 150, 143, 144, 145,
	146, 147, 148, 149, 141, 142, 136, 116, 134, 138,
	135, 118, 153, -178, -372, -380, 61, -370, -370, -370,
	-370, -345, -462, -377, -372, 84, 84, 84, 84, 157,
	103, 90, -372, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, -497, 84, 84, -384, -385,
	84, 84, -365, -321, 84, 90, 90, 84, 84, 84,
	90, 84, 84, 84, -385, -385, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, -196, 158, -195, 84, -195, -196, -179, -178, 32,
	33, 32, 33, 32, 33, 32, 33, -597, 627, 84,
	100, 641, 225, 17, -345, 636, -345, 90, 541, 90,
	541, 486, 547, 169, 170, 171, -392, 248, -392, -392,
	-219, -345, -221, 380, 245, 533, 245, -167, -392, -392,
	-392, -392, -392, 244, -392, 24, 242, 242, 242, 242,
	-392, 504, 126, 126, 59, -558, 173, 158, -547, -201,
	84, 90, -357, 134, 138, -357, -303, 18, -303, 24,
	271, 271, 271, -357, 311, -605, -606, 17, 136, -355,
	-606, -355, -355, -357, -607, 244, 471, 43, 272, 271,
	-197, -198, 22, -197, 465, 461, -447, 466, 467, -359,
	-606, -358, -357, -357, -358, -357, -357, -357, 32, 242,
	245, 497, 333, 631, -605, -605, 31, 31, -481, -481,
	-235, -481, -481, 531, -334, -345, -481, -481, -481, -287,
	-288, -235, -559, 247, -591, -590, 484, -593, 486, 163,
	-424, 163, -424, 87, -405, 273, 273, 158, 126, 24,
	-425, 126, 137, -424, -424, -425, -425, -259, 41, -344,
	154, -345, 90, -259, 41, -588, -587, -235, -196, -179,
	-178, 85, 85, 85, 541, 90, -481, -481, -481, -481,
	-481, -483, -481, -481, -481, -481, -481, -352, -211, -345,
	-221, 248, -481, -481, -481, -481, -180, -181, 145, -372,
	-345, -180, -3, -138, -137, 120, 121, 123, 621, 375,
	620, 624, 618, -424, 41, -475, 402, 401, -469, -471,
	84, -470, 84, -470, -470, -470, -470, -470, 84, 84,
	-472, 84, -472, -472, -469, -473, 84, -473, -474, 84,
	-474, -473, -345, -451, 547, -378, -380, -345, 39, -493,
	61, -175, 84, 31, 84, -202, -345, 189, 168, 635,
	-494, 61, -175, 84, 31, -196, -131, 39, -198, 21,
	157, 100, 90, -111, -93, 77, -111, -93, -93, 85,
	158, -551, 106, 107, -554, 207, 198, -345, -109, 90,
	-7, -8, -9, -10, -47, -82, -79, -175, 234, 539,
	542, -521, -519, 84, 32, 429, 81, 17, -431, 242,
	497, 380, 269, 245, 356, -429, -412, -409, -407, -344,
	-405, -408, -407, -434, -321, 461, -132, 444, 443, 323,
	-372, -372, -372, -372, -372, 105, 116, 351, 106, 107,
	-367, -388, 32, 319, 320, -368, -368, -368, -368, -368,
	-368, -368, -368, -368, -368, -368, -368, -376, -386, -462,
	84, 136, 134, 138, 135, 118, -370, -370, -368, -368,
	-261, -344, 154, 85, 158, -372, -544, -543, 120, -372,
	-372, -372, -372, -345, -541, -542, 511, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 371, 366, 372,
	370, 359, 378, 373, 374, 191, 528, 529, 522, 523,
	524, 525, 526, 527, -378, -378, -372, -541, -378, -314,
	33, 32, -380, -380, -380, 85, -372, -555, 349, 348,
	350, -199, -345, -378, 85, 85, 85, 100, -380, -380,
	-378, -368, -378, -378, -378, -378, -542, -314, -314, -314,
	-314, 145, -380, -380, -314, -314, -314, -314, 145, -314,
	-314, -314, -314, -314, -314, -314, -314, -314, -314, 85,
	85, 85, 145, -380, -197, -130, -502, -501, -372, 41,
	-131, -198, -598, 628, 84, -321, -586, 90, 90, 646,
	168, 636, 17, 497, -345, 17, 242, -579, 32, 541,
	100, 541, 100, 487, 488, 167, 170, 169, 90, 116,
	-345, -345, 35, 84, -211, -392, -392, -392, -563, -345,
	91, -413, -410, -407, -345, -345, -403, -345, -334, -235,
	-392, -392, -392, -392, -235, -270, 53, 54, 55, -407,
	-168, 56, 57, -559, -546, 35, -200, -345, -579, -303,
	-370, -370, -372, -407, 273, -605, -357, -357, -335, -334,
	-359, -354, -359, -359, -303, -355, -357, -357, -372, -359,
	-355, -303, -345, 461, -303, -303, -447, -357, -356, -345,
	-356, -392, -334, -335, -335, -235, -235, -282, -289, -283,
	-290, 265, 239, 364, 365, 236, 234, 11, 235, -297,
	312, -393, 505, -265, -266, 77, 42, -268, 263, 406,
	399, 275, 279, 94, 280, 439, 281, 244, 283, 284,
	285, 300, 302, 255, 286, 287, 288, 430, 289, 162,
	301, 290, 291, 292, 382, -260, 6, 336, 547, 41,
	51, 52, 453, 452, 550, 276, -345, -563, -561, 31,
	-345, 31, -413, -345, -345, 158, 246, -188, -190, -187,
	-183, -184, -189, -306, -308, -186, 84, -235, -178, -345,
	158, 485, 487, 488, -591, -425, -591, -425, 246, 32,
	429, -428, 429, 32, -403, -422, 481, 483, -418, 90,
	430, -408, -427, 81, 154, -501, -425, -425, -427, -427,
	153, 158, -589, 486, 487, 230, -197, 100, -579, -237,
	-235, -563, -412, -403, -345, -481, -237, -237, -237, -347,
	-347, 84, 157, 36, -345, -345, -345, -345, -302, 158,
	-301, 17, -346, -345, 35, 90, 157, -302, -139, -137,
	122, -372, -6, 620, -372, -6, -6, -372, -6, -372,
	-479, 403, 100, 100, -324, 90, -324, 100, 100, 100,
	553, 85, 90, -416, 81, -495, -381, -539, 609, -204,
	85, -199, -537, -538, -199, -203, -345, -493, -227, 126,
	126, 126, -495, -204, 85, -537, -197, 610, -131, -194,
	-193, -372, -345, 24, -111, -93, -549, 157, 356, 158,
	-200, -431, -411, -408, -433, 145, -345, -419, 158, 547,
	649, 88, 246, -576, -575, 421, 85, 158, -505, 247,
	504, 90, 646, 437, 225, 226, 105, 351, 106, 107,
	-462, -380, -376, -370, -370, -368, -368, -374, 260, -374,
	115, -372, 647, -371, -543, 122, -372, 35, 158, 35,
	158, 82, 157, 85, 85, 17, 17, 85, -372, 85,
	85, 85, 85, 17, 17, -372, 85, 157, 85, 85,
	85, 85, 82, 85, 158, 85, 85, 85, 85, 158,
	-380, -380, -372, -380, 85, 85, 85, -372, -372, -372,
	-380, 85, -372, -372, -372, -372, -372, -372, -372, -372,
	-372, -372, -441, 456, -441, -441, 158, 158, 158, 85,
	-131, 84, 100, 158, 642, -328, -327, 90, -345, -345,
	168, 636, -345, 90, 636, -345, 90, 90, 168, 171,
	171, 170, 90, 36, 24, 310, 24, -220, -222, -223,
	-224, -225, -226, 136, 159, 160, 84, -235, -235, -235,
	-565, 407, -577, 158, 41, -575, 497, -164, 323, -396,
	82, -171, 17, 547, -235, -235, -235, -235, -249, 35,
	17, -182, -236, -345, 84, 85, 158, -404, 82, -345,
	-335, -303, -303, -359, -303, -303, 158, 23, -357, -359,
	-359, -227, -355, -227, 157, -227, -334, -468, 35, -201,
	158, 21, 265, -234, -342, -231, -233, 250, -362, -232,
	253, -533, 251, 249, 110, 254, 308, 111, 244, -342,
	-342, 250, -269, 246, 35, -342, -285, 244, 354, 308,
	251, 21, 265, -284, 244, 111, -345, 250, 254, 251,
	249, -341, 126, -333, 153, 246, 43, 382, -341, 551,
	265, -341, -341, -341, -341, -341, -341, -341, 282, 282,
	-341, -341, -341, -341, -341, -341, -341, -341, -341, -341,
	-341, 163, -341, -341, -341, -341, -341, -341, 84, 328,
	277, 278, 310, -566, 407, 31, 362, 362, 363, -577,
	31, -172, 356, -288, -286, -356, 31, -309, -310, -311,
	-312, -313, 68, 72, 74, 78, 69, 70, 71, 75,
	73, 31, 158, -343, -348, 35, -345, 90, -343, -178,
	-190, -188, -343, 84, -590, -592, 489, 486, 492, -427,
	-427, 100, 246, 84, 126, -427, -427, 41, -344, -587,
	493, 487, -131, 158, 81, -237, -212, -213, -214, -215,
	-242, -321, 193, 196, 198, 199, 200, 201, 203, 204,
	205, 206, 207, 210, 211, 208, 209, 259, 188, 189,
	190, 191, 212, 174, 194, 545, 175, 176, 177, 178,
	179, 180, 183, 184, 185, 186, 182, -345, -221, -303,
	-181, -190, -345, 90, -345, 145, -303, 123, -6, 121,
	-143, -142, -141, 124, 618, 624, 123, 123, 123, 85,
	85, 85, 158, 85, 85, 85, 158, 85, 158, 100,
	-508, 466, 40, 158, 84, 85, 158, 61, 158, 126,
	85, 158, -372, -345, 90, -372, 85, 61, -131, 90,
	158, -191, 37, 38, 157, 439, -345, -519, 85, -433,
	158, 246, 157, 157, -409, 385, -344, -411, 21, 547,
	-321, 39, -328, 126, 646, -345, 85, -374, -374, 115,
	-370, -367, 85, 123, -372, 121, -240, -242, 401, 402,
	-372, -240, -241, -247, 154, 192, 259, 191, 190, 188,
	401, 402, -259, -345, -372, -372, 85, -372, -372, 17,
	-345, -259, -368, -372, -196, -196, 85, 85, -440, -441,
	-440, -440, 85, 85, 85, 85, -440, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 84, 100, 102,
	100, 102, -501, -599, 63, 626, 62, 429, 105, 313,
	158, 100, 90, 647, 158, 126, 90, -345, -345, 17,
	242, -345, 17, 90, 171, 90, -578, 317, 356, -452,
	100, 317, 356, 497, 393, 85, 158, -321, -212, -201,
	84, -201, -568, 468, 409, 419, -341, -364, -363, 358,
	42, -487, 430, 415, 416, -410, 273, -334, -574, 97,
	126, 81, 340, 344, 346, 345, 341, 342, 343, -390,
	-391, -389, -393, -561, 84, 84, -175, 35, 134, -171,
	84, 84, 35, -463, 330, -242, -235, -182, -345, 17,
	158, -560, 157, -1, -345, -403, -357, -303, -372, -372,
	-303, -357, -357, -359, -345, -227, -463, -242, 35, -283,
	239, 235, -437, 310, 311, -438, -453, 313, -455, 84,
	-239, -321, -232, -532, -533, -392, -345, 111, -532, 111,
	84, -239, -321, -321, -286, -321, -345, -345, -345, -345,
	-293, -292, -321, -295, 32, -296, -345, -345, -345, -345,
	111, -345, 111, -264, 41, 48, 49, 50, -341, -341,
	195, -267, 41, 429, 431, 432, -295, 100, 100, 100,
	100, 90, 90, 90, -341, -341, 100, 90, -348, 90,
	-534, 170, 45, 46, 100, 100, 100, 100, 41, 90,
	-272, 41, 293, 297, 294, 295, 296, 90, 100, 41,
	100, 41, 100, 41, -345, 84, -535, -536, 90, 329,
	-452, -568, -341, 362, -424, 126, 126, -364, -573, 323,
	-174, 497, 32, -205, 239, 235, -561, -415, -414, -321,
	-187, -187, -187, -187, -187, 68, 79, 68, 68, 68,
	73, 68, 73, 68, -311, 79, -415, -189, -201, -348,
	85, -584, -583, -582, -580, 76, 247, 77, -378, 486,
	490, 491, -411, -360, 90, -418, -209, 24, -235, -235,
	-485, 303, 304, 85, 158, -242, -305, 19, 157, -305,
	119, -6, -139, -141, -372, -6, -372, 620, 375, 621,
	90, 100, 100, -516, 450, 445, 447, 111, -381, -503,
	-502, 61, -175, -199, -495, -538, -501, -345, 647, 647,
	647, 647, 61, -175, -495, -209, -508, -193, -192, 44,
	-345, 100, 17, -408, -403, 145, 145, -345, 386, -419,
	90, 408, 90, 242, 647, 90, -328, -367, -372, 85,
	-250, 179, 178, -250, 35, 85, 85, -470, -470, -469,
	-472, -469, -250, -250, 85, 85, 24, 85, 85, 85,
	-372, 85, 85, 158, -491, 506, -492, 580, -440, -440,
	-440, -440, -440, -440, -440, -440, -440, -440, -440, -440,
	-440, -440, -440, -440, -383, -382, 265, 451, 633, 633,
	451, 633, 633, 85, 158, -541, 158, -336, 318, -336,
	-327, 90, 246, 90, 168, -345, 90, 636, 90, -345,
	90, 310, -345, -345, 90, 90, -224, -242, 85, 35,
	-228, -229, -230, -239, -231, -233, 35, -569, 94, -564,
	90, -345, 91, -570, 94, 410, 156, 360, 41, 411,
	412, 427, 355, 100, 100, 417, -562, -345, -173, 242,
	356, -572, 52, 126, 90, -235, -389, -333, 153, 284,
	333, -300, -299, -345, 90, -228, -175, -235, -228, -228,
	-175, -464, 332, 21, 100, 144, -202, 82, 157, -190,
	-236, -345, 145, 85, -303, -227, -303, -303, -357, -464,
	-175, -449, 314, 84, -447, 84, -447, 111, 341, -456,
	-454, 265, -291, 45, 47, -242, -530, -345, -528, -530,
	-345, -528, -528, -392, -372, -291, -239, 246, 31, 235,
	-294, 338, 339, 344, 346, -420, 309, 116, -420, 158,
	-191, 158, -345, -259, -259, 31, 90, 90, -237, 85,
	158, 126, 100, 90, -569, -564, 126, -425, 90, 90,
	-570, -574, 126, -238, 242, -334, 158, -205, -205, -303,
	158, 126, -207, -206, 81, 82, -208, 81, -206, 68,
	68, -303, -582, -581, 24, -533, -533, -533, 85, 85,
	15, -214, 41, -304, 20, 21, 145, -304, 123, 121,
	123, 123, -345, 85, 85, -476, 611, -512, -514, 445,
	21, 21, 15, 247, 85, -495, -495, -516, 45, 46,
	-403, -419, 430, -235, 158, 647, -240, -372, 85, -372,
	85, 90, 85, 90, -196, 21, 85, 158, 85, 85,
	85, 158, 85, 85, -372, 85, -541, -337, 189, 90,
	-337, 356, -346, -345, 17, -345, 90, -452, 310, 310,
	242, 240, -175, 85, 158, -175, 90, -567, 421, 90,
	90, 100, 41, 100, 156, 413, -488, -165, 94, -237,
	32, -205, -571, 94, 126, 646, 84, -341, -341, -341,
	-345, 85, 158, -341, -341, 85, 85, 85, -257, 547,
	-465, 264, 100, 144, 100, 144, 100, -343, -190, -345,
	-303, -560, 157, -303, -465, -439, 315, 100, -368, 84,
	-368, 84, -448, 312, 84, 85, 158, -345, -321, -254,
	-253, -251, 105, 116, 41, 399, -252, 94, 153, 298,
	301, 300, 276, 299, -281, -361, 81, 405, 338, 339,
	-393, 611, 535, 249, 110, 111, 387, -362, 84, 84,
	82, 318, 84, 84, -530, 85, -291, -321, 41, -294,
	41, 352, 352, 309, -292, -345, 153, -259, 85, -536,
	90, -541, -567, 90, -427, -572, 90, -165, -237, -561,
	-196, -414, -501, -372, 84, -372, 84, 68, 11, 19,
	-365, -372, -380, 248, -6, 621, 375, -274, 612, 90,
	21, 90, -510, 90, -415, -476, -134, -271, -333, 281,
	85, 85, 85, -440, -440, -443, -442, -446, 451, 310,
	459, -380, 90, 90, 85, 85, 90, -345, 168, 90,
	646, 90, -452, -452, -345, -216, -242, -169, 547, -257,
	-230, -169, 21, 547, 359, 41, 100, 41, 414, 90,
	-173, 126, 106, 107, -329, -330, 90, -398, -400, -321,
	84, -259, -261, 90, -299, -365, -365, -255, -175, 35,
	-256, -297, -393, 547, -133, -132, -255, 547, 84, -466,
	162, 100, 144, 100, 100, -303, -303, -466, -455, 21,
	85, -434, 85, -434, 84, 126, -368, -454, -457, 61,
	-251, 105, -368, 90, -261, -262, 41, 297, 293, 126,
	126, -263, 41, 277, 278, -273, 84, 308, 15, 195,
	84, 111, 111, -235, -398, -398, -531, 340, 341, 342,
	347, 344, 346, 345, 343, -531, -398, -398, 84, -421,
	-420, -368, -341, -341, -341, 153, -571, -197, -200, -529,
	-345, 249, 21, 21, -486, 547, -345, -345, -325, 613,
	100, 90, 447, -274, -477, 614, -506, -447, -259, 126,
	85, -445, 118, 413, 417, -366, -369, 100, 102, 187,
	156, 85, 85, -345, -332, -331, 90, 90, 90, 310,
	546, -170, 60, 493, 90, 91, 408, 90, 91, 359,
	-165, 90, 647, 158, 126, 85, 158, -469, -372, -435,
	265, -175, 158, -297, -333, -134, -435, -258, -298, -345,
	90, -484, 170, 331, 547, 100, 144, 100, -196, -467,
	170, 331, -438, 85, 85, 85, -434, 100, 85, -461,
	-458, 84, -297, 267, 136, 90, 90, 100, 84, -496,
	31, 90, -399, 84, 85, 85, 85, 85, -398, 100,
	100, -259, -341, 85, 85, 158, 638, 84, 21, -325,
	-478, 615, 90, -515, 450, -509, -507, 445, 446, 447,
	448, 90, -444, -445, 417, -366, -369, 609, 457, 457,
	457, 647, 158, 126, -452, -218, -345, 308, 430, -330,
	90, -401, -400, -191, 85, -436, 317, 21, -297, -341,
	-436, 85, 158, -341, -341, 331, 100, 144, 100, -197,
	331, -450, 316, 85, -461, -297, -460, -459, 315, 268,
	84, 85, -372, -384, -341, 85, -276, -275, 543, -398,
	-401, 82, -401, 82, -401, 82, -401, 82, 85, -259,
	-345, 249, -326, -345, -510, 90, -517, 247, -513, -514,
	449, -507, 21, 447, 21, 21, -135, 158, 115, 458,
	458, 458, -331, 90, 90, -217, 35, 452, 386, -402,
	255, 352, 353, 94, 547, 338, 339, -191, 21, -437,
	-259, -298, -365, -365, 100, 100, 85, 158, -345, 264,
	84, -379, -373, -372, 264, 85, -345, -280, -278, -279,
	81, 464, 306, 307, 85, -531, -531, -531, -531, -281,
	85, 158, -524, 84, 100, -512, -511, -513, 21, -510,
	21, -510, -510, 454, -444, 90, -341, -341, 90, 90,
	337, -321, 84, -449, -459, -458, -379, 85, 158, -420,
	-279, 81, -278, 81, 16, 15, -401, -401, -401, -401,
	-345, -527, 31, 85, -523, -522, -322, -518, -345, 450,
	451, 90, -510, 126, -602, -601, 632, 100, 100, -345,
	-434, -439, 85, -373, -277, 303, 304, 31, 170, -277,
	-526, -525, -323, 85, 158, 157, 90, 90, 85, -455,
	105, 41, 305, 158, 126, -522, -345, -525, 41, -372,
	157, -345,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 309, 310, 311, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 0, 0,
	0, 0, 0, 692, 693, 0, 656, 0, 0, 0,
	0, 0, 0, 539, 540, 541, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 414, 415, 416,
	417, 418, 419, 420, 421, 422, 423, 0, 334, 330,
	253, 254, 255, 256, 257, 258, 341, 342, 516, 0,
	0, 0, 0, 775, -2, 97, 0, 0, 0, 0,
	323, 0, 314, 314, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, -2, 705, 0,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 398, 399, 400,
	394, 395, 397, 396, -2, 0, 0, 705, 0, 0,
	0, 783, 0, 0, 0, 826, 848, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1367, 1368,
	1369, 1370, 2154, 2124, -2, 1893, 1870, 2047, 2048, 1948,
	1959, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194,
	2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204,
	2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214,
	2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224,
	2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234,
	2235, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2049, 2050, 2051, 2052,
	2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
	2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
	2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, -2, 2082,
	2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092,
	2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102,
	2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112,
	2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
	2123, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133,
	2134, 2135, 2136, 2137, 2138, 2139, -2, -2, -2, 2143,
	2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153,
	2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164,
	2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174,
	2175, 0, 307, 305, 1840, 1870, 1893, 1948, 1959, 1960,
	1995, 2047, 2048, 2081, 2124, 2140, 2141, 2142, 2154, 0,
	0, 967, 0, 753, 0, 0, 758, 1315, 753, 335,
	694, 695, 783, 809, 654, 0, 372, 0, 1884, 376,
	2131, 0, 0, 0, 0, 651, 366, 367, 368, 369,
	370, 371, 0, 0, 940, 0, 0, 362, 0, 329,
	1950, 2153, 1371, 0, 0, 0, 0, 0, 196, 1091,
	198, 1093, 202, 210, 0, 0, 0, 215, 216, 219,
	220, 221, 222, 223, 0, 227, 0, 229, 232, 0,
	234, 235, 0, 238, 239, 240, 0, 250, 251, 252,
	1094, 1095, 1096, -2, 125, 965, 1798, 1684, 0, 1691,
	1704, 1715, 1448, 1449, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1459, 1460, 0, 1488, 2190, 2231, 2232, 0,
	1468, 1469, 1470, 1471, 1472, 1473, 136, 148, 149, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 0, 1745, 1746, 1747,
	1655, 1435, 1367, 0, 2199, 0, 2221, 2226, 2227, 2228,
	2229, 2220, 0, 0, 1640, 0, 1630, 0, 0, -2,
	-2, 0, 0, 2020, -2, 2233, 2234, 2235, 2196, 2217,
	2225, 2200, 2201, 2224, 2192, 2193, 2194, 2187, 2188, 2189,
	2191, 2203, 2205, 2216, 0, 2212, 2222, 2223, 2129, 0,
	0, 0, 0, 0, 2171, 150, 151, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1651, -2, -2, 1654, -2, 1657,
	-2, -2, -2, -2, 1662, 1663, -2, 1665, -2, -2,
	-2, -2, -2, -2, -2, 1642, 1643, 1644, 1645, 1634,
	1635, 1636, 1637, 1638, 1639, -2, -2, -2, 809, 890,
	0, 809, 0, 784, 831, 834, 837, 840, 787, 0,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 325, 313, 315, 0, 319, 0, 312,
	1128, 1128, 1128, 0, 0, 0, 0, 1128, 1128, 1128,
	1128, 1128, 0, 1128, 0, 0, 0, 0, 0, 1128,
	0, 1000, 1098, 1099, 1100, 1126, 1127, 1200, 0, 0,
	0, 710, 706, 707, 708, 709, 797, 0, 799, 802,
	0, 631, 631, 859, 859, 577, 0, 0, 0, 631,
	0, 591, 583, 0, 0, 0, 631, 0, 0, 804,
	804, 0, 634, 641, 631, 631, -2, 631, 631, 628,
	631, 0, 0, 1140, 597, 598, 599, 583, 583, 602,
	603, 604, 614, 615, 642, 1822, 0, 0, 516, 516,
	0, 516, 516, 0, 516, 516, 516, 0, 712, 1990,
	1891, 1965, 1850, 1950, 2153, 0, 280, 2020, 285, 0,
	1892, 1911, 0, 0, 1929, 0, -2, 0, 351, 809,
	0, 0, 783, 0, 0, 0, 0, 516, 516, 516,
	516, 516, 1199, 516, 516, 516, 516, 516, 0, 0,
	0, 516, 516, 516, 516, 0, 0, 849, 850, 845,
	846, 847, 851, 852, 5, 6, 19, 0, 0, 0,
	0, 0, 0, 104, 103, 0, 1799, 1817, 1750, 1751,
	1752, 1804, 1754, 1808, 1808, 1808, 1808, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1808, 1808, 0,
	0, 1797, 1774, 1806, 1806, 1806, 1804, 1801, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1811, 1811, 1814, 1814, 1811, 0, 412, 410,
	411, 1680, 0, 0, 0, 0, 753, 757, 1313, 0,
	0, 0, 809, -2, 0, 0, 655, 373, 1372, 0,
	0, 377, 0, 378, 0, 0, 380, 0, 0, 0,
	401, 0, 404, 388, 389, 390, 391, 384, 0, 176,
	0, 364, 365, 0, 0, 331, 0, 0, 0, 517,
	0, 0, 0, 0, 0, 0, 207, 203, 211, 214,
	224, 231, 0, 243, 245, 248, 204, 212, 217, 218,
	225, 246, 205, 208, 209, 213, 247, 249, 206, 226,
	230, 244, 228, 233, 236, 237, 242, 0, 177, 0,
	0, 0, 0, 0, 1690, 0, 0, 1723, 1724, 1725,
	1726, 1727, 1728, 1729, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 1684, 0, 0, 1454, 1455, 1456,
	1457, 0, 1461, 0, 1489, 0, 0, 0, 0, 0,
	1744, 1748, 0, 1680, 1680, 0, 1680, 1676, 0, 0,
	0, 0, 0, 0, 1680, 1613, 0, 0, 1615, 1631,
	0, 0, 1617, 1618, 0, 1621, 1622, 1680, 0, 1680,
	1626, 1680, 1680, 1680, 1609, 1610, 0, 1676, 1676, 1676,
	1676, 0, 0, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
	1676, 1676, 1676, 1676, 1676, 1676, 1676, 0, 0, 0,
	0, 804, 0, 810, 0, -2, 0, 828, 830, 832,
	833, 835, 836, 838, 839, 841, 842, 789, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 322, 0, 0, 0, 0,
	0, 964, 0, 0, 1128, 1128, 1128, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 1128, 1128, 1128, 1128,
	0, 1146, 0, 0, 0, 712, 711, 0, 798, 0,
	0, 0, 859, 0, 0, 574, 575, 0, 576, 0,
	583, 631, 631, 589, 590, 585, 584, 637, 638, 634,
	0, 634, 634, 859, 0, 608, 609, 610, 631, 631,
	616, 805, 0, 617, 618, 634, 0, 639, 640, 859,
	0, 0, 859, 859, 0, 626, 627, 629, 631, 0,
	0, 1128, 0, 647, 585, 585, 1823, 1824, 0, 0,
	1137, 0, 0, 0, 0, 650, 0, 0, 0, 428,
	429, 0, 0, 713, 259, 263, 0, 266, 0, 1990,
	0, 1990, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 303, 304, 0, 0, 0, 0, 294, 297, 1307,
	1308, 1088, 1089, 298, 299, 343, 344, 0, 804, 827,
	829, 823, 824, 825, 0, 0, 0, 0, 0, 0,
	0, 516, 0, 0, 0, 0, 0, 688, 0, 980,
	690, 0, 0, 0, 0, 0, 867, 861, 863, 935,
	136, 867, 8, 121, 118, 0, 19, 0, 0, 19,
	19, 0, 19, 308, 0, 1820, 1818, 1819, 1753, 1805,
	0, 1779, 0, 1780, 1781, 1782, 1793, 1794, 0, 0,
	1775, 0, 1776, 1777, 1778, 1769, 0, 1770, 1771, 0,
	1772, 1773, 306, 409, 0, 0, 1681, 968, 0, 731,
	745, 726, 0, 734, 0, 0, 1315, 0, 0, 0,
	714, 745, 716, 0, 734, 804, 781, 0, 759, 0,
	0, 374, 0, 385, 379, 0, 386, 381, 382, 0,
	0, 403, 405, 406, 407, 392, 393, 652, 360, 361,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 0,
	0, 363, 146, 0, 332, 333, 0, 0, 0, 190,
	191, 192, 193, 194, 195, 197, 181, 677, 679, 1080,
	1092, 0, 1083, 0, 200, 241, 173, 0, 0, 0,
	1685, 1686, 1687, 1688, 1689, 1694, 0, 1696, 1698, 1700,
	1702, 0, 1720, -2, -2, 1436, 1437, 1438, 1439, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1705, 1718, 1719,
	0, 0, 0, 0, 0, 0, 1716, 1716, 1711, 0,
	1474, 1309, 1310, 1452, 0, 0, 1486, 1490, 0, 0,
	0, 0, 0, 137, 1675, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 0, 0, 1684, 0, 0, 0,
	1677, 1678, 0, 0, 0, 1568, 0, 0, 1574, 1575,
	1576, 0, 740, 0, 1641, 1614, 1632, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 889, 891, 0, 749, 751, 752,
	778, 759, 785, 0, 0, 0, 96, 101, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 71, 73, 0,
	1141, 0, 1143, 326, 327, 0, 0, 321, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 1016,
	1017, 514, 1074, 0, 0, 0, 1090, 1115, 1124, 0,
	0, 0, 0, 0, 1173, 1002, 1007, 1008, 1009, 1003,
	1004, 1010, 1011, 0, 800, 0, 0, 904, 70, 573,
	632, 633, 860, 580, 1950, 585, 859, 859, 592, 586,
	593, 636, 594, 595, 596, 634, 859, 859, 806, 631,
	634, 619, 635, 634, 1315, 623, 0, 630, 1315, 648,
	1315, 0, 646, 600, 601, 1175, 802, 426, 427, 432,
	434, 0, 483, 483, 483, 466, 483, 0, 0, 454,
	1825, 0, 0, 0, 0, 463, 1825, 0, 0, 1825,
	1825, 1825, 1825, 1825, 1825, 1825, 0, 0, 1825, 1825,
	1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 0,
	1825, 1825, 1825, 1825, 1825, 1292, 1825, 0, 482, 1138,
	473, 474, 475, 476, 481, 0, 0, 511, 0, 0,
	1015, 0, 514, 0, 1057, 0, 0, 872, 0, 873,
	874, 875, 870, 906, 930, 930, 0, 930, 910, 1315,
	0, 0, 271, 272, 260, 0, 261, 0, 0, 274,
	275, 0, 277, 278, 279, 286, 1891, 1965, 281, 283,
	0, 0, 287, 300, 301, 302, 0, 0, 292, 293,
	0, 0, 346, 347, 349, 0, 759, 1142, 72, 674,
	1311, 675, 676, 680, 0, 0, 683, 684, 685, 686,
	687, 982, 0, 0, 1066, 1067, 1068, 1069, 859, 0,
	868, 0, 864, 936, 0, 938, 0, 859, 0, 119,
	19, 0, 112, 109, 0, 0, 0, 0, 0, 1800,
	1749, 1821, 0, 0, 0, 1802, 0, 0, 0, 0,
	0, 102, 761, 721, 0, 725, 742, 0, 746, 0,
	0, 738, 730, 735, 0, 0, 755, 722, 1314, 0,
	0, 0, 715, 0, 0, 720, 759, 0, 782, 811,
	812, 815, 1373, 0, 387, 383, 402, 0, 516, 0,
	0, 0, 184, 1077, 0, 185, 189, 179, 0, 0,
	0, 1082, 0, 1079, 1084, 0, 199, 0, 0, 174,
	175, 1158, 1167, 0, 0, 0, 1695, 1697, 1699, 1701,
	1703, 0, 1706, 1716, 1716, 1712, 0, 1707, 0, 1709,
	0, 1685, 1458, 0, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 1558, 1559, 0, 0, 1563, 0, 1565,
	1566, 1567, 1569, 0, 0, 0, 1573, 0, 1612, 1633,
	1616, 1619, 0, 1623, 0, 1625, 1627, 1628, 1629, 0,
	809, 809, 0, 0, 1530, 1530, 1530, 0, 0, 0,
	0, 1530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 1476, 1477, 0, 0, 0, 892,
	779, 0, 0, 0, 0, 0, 1165, 0, 86, 0,
	0, 0, 0, 91, 0, 0, 74, 75, 328, 316,
	318, 0, 0, 1129, 0, 0, 0, 0, 0, 970,
	971, 973, 0, 976, 977, 978, 982, 802, 0, 802,
	1027, 1825, 518, 0, 0, 1076, 0, 1046, 0, 0,
	0, -2, 0, 0, 1124, 0, 0, 0, 1177, 0,
	0, 0, 699, 703, 23, 803, 0, 578, 0, 579,
	631, 587, 588, 859, 611, 612, 0, 0, 859, 631,
	631, 622, 634, 643, 0, 644, 1315, 1177, 0, 0,
	1137, 1243, 1211, 444, 0, 1327, 1328, 484, 0, 1334,
	1343, 1128, 1405, 0, 1343, 0, 0, 1345, 1346, 0,
	0, 0, 0, 467, 468, 0, 453, 0, 0, 0,
	0, 0, 0, 452, 0, 0, 494, 0, 0, 0,
	0, 0, 1826, 1825, 1825, 0, 461, 462, 0, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 1825, 1825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1283, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 1300, 0, 1027, 1825, 0, 0, 0, 0, 518,
	1044, 1062, 0, 430, 431, 491, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 802, 931, 0, 933, 934, 908, -2,
	0, 872, 913, 1680, 264, 265, 0, 0, 270, 288,
	290, 262, 0, 0, 0, 289, 291, 295, 296, 345,
	348, 350, 821, 0, 0, 1201, 0, 983, 984, 986,
	987, 0, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1875, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 981, 691, 855,
	862, 869, 937, 939, 137, 865, 855, 0, 122, 19,
	121, 113, 114, 0, 19, 0, 0, 0, 0, 1810,
	1809, 1795, 0, 1796, 1807, 1812, 0, 1815, 0, 413,
	765, 0, 0, 745, 747, 0, 0, 745, 0, 0,
	754, 0, 0, 0, 0, 0, 0, 745, 821, 761,
	0, 818, 816, 817, 0, 0, 653, 147, 408, 0,
	0, 0, 0, 0, 678, 0, 1081, 181, 0, 0,
	201, 0, 0, 0, 1167, 1162, 1679, 1708, 1710, 0,
	1717, 1713, 1453, 1462, 1487, 0, 0, 1493, 1505, 1505,
	0, 0, 0, 1496, 1808, 1808, 1499, 1804, 1806, 1804,
	1505, 1505, 0, 138, 0, 0, 1564, 0, 0, 0,
	741, 0, 0, 0, 1526, 1528, 1530, 1530, 1537, 1531,
	1538, 1539, 1530, 1530, 1530, 1530, 1544, 1530, 1530, 1530,
	1530, 1530, 1530, 1530, 1530, 1530, 1530, 1524, 0, 0,
	1738, 1739, 750, 0, 0, 792, 793, 794, 795, 796,
	0, 0, 61, 61, 1167, 0, 95, 87, 0, 0,
	0, 0, 0, 76, 320, 0, 77, 78, 0, 0,
	85, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	1320, 0, 1031, 1028, 1029, 1030, 0, 1071, 519, 520,
	521, 522, 0, 0, 0, 1075, 0, 0, 1039, 0,
	0, 0, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	-2, 1132, 0, 0, 0, 1320, 1151, 0, 0, 1156,
	1320, 1320, 0, 1185, 0, 1174, 753, 0, -2, 0,
	0, 701, 0, 0, 905, 581, 859, 605, 807, 808,
	1315, 859, 859, 631, 649, 645, 1185, 1176, 0, 433,
	483, 0, 1231, 0, 0, 1237, 0, 1244, 437, 0,
	485, 0, 1333, 1361, 1344, 1361, 1406, 1361, 1361, 1128,
	0, 485, 0, 0, 455, 0, 0, 0, 0, 0,
	451, 488, 815, 438, 440, 441, 442, 492, 493, 495,
	0, 497, 498, 457, 469, 470, 471, 472, 0, 0,
	0, 464, 477, 478, 479, 480, 439, 1260, 1261, 1262,
	1265, 1266, 1267, 1268, 0, 0, 1271, 1272, 1273, 1274,
	1275, 1358, 1359, 1360, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1301, 1302, 1303, 1304, 1305, 1306, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 0, 0, 1296, 0, 0,
	0, 1031, 0, 0, 0, 0, 0, 1071, 1046, 0,
	1064, 0, 1058, 1059, 0, 0, 723, 859, 338, 0,
	900, 893, 0, 879, 880, 897, 881, 898, 899, 885,
	0, 887, 0, 883, 884, 882, 859, 871, 907, 932,
	909, 912, 914, 915, 921, 0, 0, 0, 0, 267,
	268, 269, 276, 0, 538, 282, 777, 0, 1312, 681,
	682, 1202, 1203, 689, 0, 988, 853, 0, 0, 853,
	117, 120, 0, 115, 0, 0, 0, 0, 107, 105,
	1803, 0, 0, 767, 161, 0, 0, 0, 743, 0,
	748, 745, 729, 739, 728, 736, 737, 756, 1316, 1317,
	1318, 1319, 745, 719, 718, 780, 765, 813, 814, 0,
	1374, 375, 0, 1078, 181, 186, 187, 188, 182, 180,
	1085, 0, 1087, 0, 1160, 0, 0, 1714, 1492, 1463,
	1494, 1506, 1507, 1495, 0, 1465, 1466, 1497, 1498, 1500,
	1501, 1502, 1503, 1504, 1467, 1560, 0, 1562, 1570, 1571,
	0, 1620, 1624, 0, 0, 0, 0, 0, 1535, 1536,
	1540, 1541, 1542, 1543, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 809, 1525, 0, 0, 0, 0,
	0, 0, 0, 790, 0, 0, 0, 63, 0, 63,
	1166, 1168, 0, 935, 0, 0, 92, 0, 0, 79,
	80, 0, 0, 0, 963, 966, 972, 974, 0, 0,
	0, 1321, 1322, 1324, 1325, 1326, 0, 999, 0, 0,
	1019, 1020, 1021, 1033, 0, 0, 0, 524, 525, 0,
	0, 0, 537, 533, 534, 535, 515, 1070, 1053, 0,
	0, 1042, 0, 0, 1052, 0, 1133, 1825, 1825, 1825,
	0, 0, 1245, 1825, 1825, 0, 1153, 1155, 0, 0,
	1249, 1188, 0, 0, 1179, 0, 930, 0, 0, 859,
	700, 703, 704, 801, 582, 620, 624, 621, 859, 1188,
	425, 1209, 0, 0, 0, 0, 0, 1241, 0, 0,
	1213, 0, 456, 486, 0, -2, 0, 1362, 0, 1347,
	1362, 0, 0, 1361, 0, 445, 485, 0, 0, 0,
	499, 504, 505, 0, 0, 502, 1401, 0, 503, 0,
	490, 0, 496, 1263, 1264, 0, 1269, 1270, 0, 1294,
	0, 0, 0, 436, 506, 0, 0, 0, 507, 508,
	513, 1039, 0, 1053, 0, 1063, 0, 1060, 1061, 809,
	0, 0, 876, 901, 0, 0, 877, 0, 878, 886,
	888, 337, 916, 0, 0, 918, 919, 920, 911, 284,
	822, 985, 0, 843, 0, 0, 866, 844, 0, 19,
	0, 0, 110, 1813, 1816, 769, 0, 766, 162, 0,
	0, 0, 0, 733, 744, 727, 717, 767, 819, 820,
	183, 178, 1086, 1170, 0, 1161, 0, 0, 1572, 0,
	1530, 1527, 1530, 1529, 1521, 0, 1478, 0, 1480, 1481,
	1482, 0, 1484, 1485, 0, 788, 0, 59, 0, 62,
	60, 0, 94, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 1005, 1249, 0, 1005, 1032, 1018, 0, 1072,
	1073, 0, 526, 527, 0, 530, 536, 1034, 0, 0,
	1036, 1037, 1038, 0, 0, 1050, 0, 0, 0, 0,
	1125, 1139, 0, 0, 0, -2, 0, -2, 1150, 0,
	1194, 0, 1186, 0, 1178, 0, 1181, 859, 859, -2,
	697, 702, 0, 625, 1194, 1211, 0, 1232, 0, 0,
	0, 0, 0, 0, 0, 1212, 0, 1225, 487, 1363,
	-2, 1377, 1379, 0, 1138, 1382, 1383, 0, 0, 0,
	0, 0, 0, 1427, 1391, 0, 0, 1395, 1396, 1397,
	0, 0, 1400, 0, 1732, 1733, 0, 1404, 0, 0,
	0, 0, 0, 0, 0, 1341, 446, 447, 0, 449,
	450, 1825, 1825, 1402, 489, 443, 1825, 459, 1293, 1297,
	1298, 1295, 512, 509, 510, 1042, 1045, 1056, 1065, 724,
	804, 339, 340, 902, 0, 894, 925, 922, 0, 0,
	989, 854, 857, 111, 116, 0, 0, 771, 0, 768,
	0, 762, 764, 172, 732, 769, 132, 164, 0, 0,
	1464, 1561, 1611, 1533, 1534, 0, 1522, 0, 1516, 1517,
	1518, 1523, 0, 0, 791, 786, 64, 90, 0, 93,
	68, 81, 0, 0, 0, 0, 991, 998, 1012, 1144,
	1323, 997, 0, 0, 523, 528, 0, 531, 532, 1054,
	1053, 0, 1040, 1041, 0, 1048, 0, 0, 1111, 1804,
	0, 1134, 1135, 1136, 1246, 1247, 1248, 1204, 1152, 0,
	-2, 1257, 0, 0, 1148, 1170, 1204, 0, 0, 1182,
	0, 1189, 0, 1187, 1180, 809, 698, 1191, 435, 1243,
	1233, 0, 1235, 0, 0, 0, 0, 1214, -2, 0,
	1378, 1380, 1381, 1384, 1385, 1386, 1432, 1433, 1434, 0,
	0, 1389, 1429, 1430, 1431, 1390, 0, 0, 0, 0,
	0, 1730, 1731, 1425, 0, 0, 1348, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1349, 0, 0, 0, 1340,
	1342, 448, 0, 0, 0, 1825, 1055, 336, 0, 0,
	926, 928, 923, 924, 856, 0, 106, 108, 123, 0,
	770, 163, 0, 771, 134, 0, 155, 0, 1171, 0,
	1532, 1519, 0, 0, 0, 0, 0, 1734, 1735, 1736,
	0, 1479, 1483, 89, 0, 66, 0, 82, 83, 0,
	0, 0, 1013, 1014, 1022, 1023, 0, 1025, 1026, 529,
	1035, 1043, 1047, 1050, 0, 1102, 0, 815, 0, 1206,
	0, 1154, 1137, 1259, 1825, 1157, 1206, 0, 1251, 1825,
	1825, 1172, 0, 1184, 0, 1196, 0, 1190, 804, 424,
	0, 1193, 1229, 1234, 1236, 1238, 0, 1242, 1240, 1215,
	-2, 0, 1223, 0, 0, 1387, 1388, 0, 0, 1630,
	1825, 0, 1420, 0, 1102, 1102, 1102, 1102, 0, 500,
	501, 458, 0, 903, 917, 0, 858, 0, 0, 760,
	124, 0, 133, 152, 0, 165, 166, 0, 0, 0,
	0, 1163, 0, 1508, 0, 0, 0, 1512, 1513, 1514,
	1515, 65, 68, 0, 0, 0, 990, 0, 1024, 1049,
	1051, 1101, 1112, 1113, 815, 1147, 0, 1243, 1258, 0,
	1149, 1250, 0, 0, 0, 1183, 1195, 0, 1198, 696,
	1192, 1210, 0, 1239, 1216, 1224, 0, 1219, 0, 0,
	0, 1428, 0, 1394, 0, 1399, 1408, 1421, 0, 0,
	1329, 0, 1331, 0, 1335, 0, 1337, 0, 0, 460,
	927, 929, 0, 773, 763, 135, 139, 0, 161, 158,
	0, 167, 0, 0, 0, 0, 1159, 0, 0, 1509,
	1510, 1511, 67, 69, 84, 0, 992, 993, 1006, 1103,
	1825, 1825, 0, 0, 0, 1109, 1110, 1114, 0, 1231,
	1263, 1252, 1253, 1254, 1197, 1230, 1218, 0, -2, 1226,
	0, 0, 1682, 1692, 1693, 1392, 1398, 1407, 1409, 1410,
	0, 1422, 1423, 1424, 1426, 1102, 1102, 1102, 1102, 1339,
	772, 0, 126, 0, 0, 156, 157, 159, 0, 168,
	0, 170, 171, 0, 1520, 994, 0, 0, 1106, 1107,
	0, 1207, 0, 1209, 1220, -2, 0, 1228, 0, 1393,
	1411, 0, 1412, 0, 0, 0, 1330, 1332, 1336, 1338,
	774, 1169, 0, 140, 0, 142, 144, 145, 1364, 153,
	154, 160, 169, 0, 979, 995, 0, 1104, 1105, 1108,
	0, 1211, 1227, 1683, 1413, 1415, 1416, 0, 0, 1414,
	127, 128, 0, 141, 0, 0, 1164, 996, 1208, 1205,
	1417, 1419, 1418, 0, 0, 143, 1365, 129, 130, 131,
	0, 1366,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 117, 3, 3, 3, 148, 140, 3,
	84, 85, 145, 143, 158, 144, 157, 146, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 648, 645,
	127, 126, 128, 3, 649, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 150, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 646, 139, 647, 151,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 118, 119, 120, 121, 122, 123, 124,
	125, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 141, 142, 147, 149, 152, 153, 154, 155, 156,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:834
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:841
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:847
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:855
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:865
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:880
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:884
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:890
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:899
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:932
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:946
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:969
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:973
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:978
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:982
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:988
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1002
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1006
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1010
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1014
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1021
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1030
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1039
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1045
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1052
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1061
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1079
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1089
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1099
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1111
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1131
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1142
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1153
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1167
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1175
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1183
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1191
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1210
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1239
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1249
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1269
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1289
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1295
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1302
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1310
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1316
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1325
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1335
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1343
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1351
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1359
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1369
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1377
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1387
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1394
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1403
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1413
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1417
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1423
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1427
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1433
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1442
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1452
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1456
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1462
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1471
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1475
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1481
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1516
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1523
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1527
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1533
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1537
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1543
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1550
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1558
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1562
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1574
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1578
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1592
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1596
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1601
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1608
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1612
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1616
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1622
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1631
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1642
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1646
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1652
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1656
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1662
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1666
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1672
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1696
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1715
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1719
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1723
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1728
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1732
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1741
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1751
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1758
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1763
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1770
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1779
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1807
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1811
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1817
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1825
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1845
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1864
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1889
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1893
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1897
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1902
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1906
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1912
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1925
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1936
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1949
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1953
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1963
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1976
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1989
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1995
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2001
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2009
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2019
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2029
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2033
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2037
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2041
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2045
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2049
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2056
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2060
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2066
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2073
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2082
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2086
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2172
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2176
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2180
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2184
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2188
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2192
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2196
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2200
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2204
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2208
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2212
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2216
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2220
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2224
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2228
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2232
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2236
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2240
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2244
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2248
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2252
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2256
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2260
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2264
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2268
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2272
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2276
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2280
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2284
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2288
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2292
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2306
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2313
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2320
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2329
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2347
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2351
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2357
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2364
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2372
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2376
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2380
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2384
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2390
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2394
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2400
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2407
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2414
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2423
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2453
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2457
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2461
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2473
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2477
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2484
		{
			yyVAL.str = yyDollar[3].str
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2490
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2494
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2500
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2508
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2526
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2542
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2565
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2588
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2595
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2610
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2617
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2624
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2633
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2637
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2641
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2647
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2651
		{
			yyVAL.str = yyDollar[1].str
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2657
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2661
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2667
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2671
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2682
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2688
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2693
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2697
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2701
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2705
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2709
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2713
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2717
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2721
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2725
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2731
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2735
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2739
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2743
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2753
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2759
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2785
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2798
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2811
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2827
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2834
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2845
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2856
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2860
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2866
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2876
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2882
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2886
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2892
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2898
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2902
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2906
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2910
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2916
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2929
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2935
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2939
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2945
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2949
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2955
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2961
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2972
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2978
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2982
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2986
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2990
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2994
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2998
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3006
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3014
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3024
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3032
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3042
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3052
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3068
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3072
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3080
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3088
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3128
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3132
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3138
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3144
		{
			yyVAL.str = yyDollar[1].str
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3149
		{
			yyVAL.str = "true"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3150
		{
			yyVAL.str = "false"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3151
		{
			yyVAL.str = yyDollar[1].str
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3156
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3162
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3171
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3178
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3186
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3190
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3215
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3238
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3248
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3255
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3264
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3272
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3276
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3282
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3293
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3297
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3303
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3307
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3331
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3341
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3351
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3367
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3385
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3389
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3395
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3399
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3405
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3411
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3419
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3429
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3437
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3447
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3457
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3467
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3474
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3478
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3482
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3486
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3490
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3497
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3503
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3507
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3511
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3515
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3519
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3523
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3527
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3531
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3536
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3567
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3571
		{
			yyVAL.str = string("COLUMN")
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3576
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3582
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3588
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3596
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3600
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3606
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3614
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3621
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3627
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3633
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3639
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3645
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3652
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3659
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3667
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3673
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3685
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_LLM
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3697
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3703
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3711
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3715
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3722
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3740
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3755
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3770
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3785
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3798
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3804
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3815
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3828
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3832
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3840
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3844
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3849
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3853
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3869
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3873
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3877
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3881
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3888
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3892
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3896
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3900
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3907
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3911
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3918
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3922
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3926
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3930
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3937
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3944
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3950
		{
			yyVAL.item = nil
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3955
		{
			yyVAL.item = nil
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4000
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4009
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4017
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4025
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4033
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4037
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4041
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4052
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4056
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4062
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4067
		{
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4071
		{
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4076
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4086
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4096
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4110
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4116
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4122
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4128
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4134
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4140
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4149
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4153
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4157
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4161
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4165
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4169
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4173
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4177
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4192
		{
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4194
		{
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4203
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4213
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4222
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4226
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4230
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4236
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4242
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4248
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4254
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4263
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4274
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4286
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4294
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4300
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4312
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4326
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4332
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4338
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4345
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4349
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4354
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4358
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4362
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4367
		{
			yyVAL.str = ""
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4371
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4377
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4392
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4396
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4402
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4410
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4417
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4425
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4431
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4437
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4442
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4450
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4456
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4461
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4467
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4473
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4477
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4505
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4513
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4521
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4529
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4533
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4539
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4552
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4560
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4569
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4575
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4583
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4591
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4599
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4605
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4613
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4619
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4627
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4633
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4643
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4648
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4655
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4671
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4684
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4695
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4699
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4705
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4711
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4720
		{
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4722
		{
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4725
		{
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4734
		{
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4738
		{
		}
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4743
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4752
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4759
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4765
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4773
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4780
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4787
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4807
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4815
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4825
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4829
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4835
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4842
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4848
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4856
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4863
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4870
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4889
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4893
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4897
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4902
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4906
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4910
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4916
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4925
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4929
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4935
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4939
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4945
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4949
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4955
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4960
		{
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4964
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4971
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4975
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4982
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4987
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4991
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4997
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5001
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5007
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5011
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5016
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5020
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5033
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5044
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5055
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5077
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5100
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5108
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5117
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5121
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5134
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5138
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5143
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5147
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5154
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5159
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5166
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5172
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5176
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5180
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5184
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5188
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5192
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5197
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5201
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5207
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5217
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5232
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5236
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5250
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5254
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5260
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5269
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5273
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5277
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5281
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5285
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5291
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5298
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5307
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5311
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5317
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5325
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5329
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5334
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5338
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5344
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5348
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5352
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5357
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5361
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5367
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5373
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5377
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5383
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5388
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5392
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5396
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5401
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5405
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5409
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5414
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5418
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5426
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5430
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5434
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5448
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5452
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5462
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5472
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5482
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5494
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5502
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5510
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5519
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5527
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5535
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5543
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5551
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5559
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5567
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5575
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5583
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5593
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5604
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5618
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5622
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5626
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5631
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5635
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5639
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5648
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5652
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5657
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5661
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprs: yyDollar[3].exprsUnion(),
				RollUp:       yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5669
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5673
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5678
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5682
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5688
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5692
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5698
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5702
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5706
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5710
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5715
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5723
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5729
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5737
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5747
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5757
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5761
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5767
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5776
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5785
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5794
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5804
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5814
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5818
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5824
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5828
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5838
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5842
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5846
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5850
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 889:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5856
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5866
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5870
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5876
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5882
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5886
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5892
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5898
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5902
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5906
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5910
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 900:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5916
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5920
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5926
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5930
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5936
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5940
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5946
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5950
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5960
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5973
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5979
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5985
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5999
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6010
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6017
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6021
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6027
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6037
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6041
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6045
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6050
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6054
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6058
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6062
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6067
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6071
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6075
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6079
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6083
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6088
		{
			yyVAL.str = ""
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6092
		{
			yyVAL.str = yyDollar[1].str
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6096
		{
			yyVAL.str = yyDollar[2].str
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6102
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6106
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 935:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6111
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6115
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6119
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6123
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6127
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6133
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 963:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6175
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6188
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6194
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 966:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6200
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6213
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6218
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6225
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6232
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6236
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6242
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6248
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6253
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6257
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6261
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6265
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6272
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6305
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6310
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6317
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6324
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6328
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6334
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6340
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6344
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6348
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6354
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6360
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6366
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6370
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6376
		{
			yyVAL.str = ""
		}
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6383
		{
			yyVAL.str = yyDollar[2].str
		}
	case 997:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6389
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6404
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6421
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6438
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6442
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6448
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6452
		{
			yyVAL.str = "DEFINER = "
		}
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6456
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1005:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6461
		{
			yyVAL.str = ""
		}
	case 1006:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6465
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1012:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6479
		{
			yyVAL.str = ""
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6487
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6493
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6498
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6504
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6517
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6522
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6527
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6533
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6540
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6547
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6554
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6561
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6569
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6575
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6582
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6589
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6597
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6603
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6612
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6629
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6645
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6664
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6670
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6679
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6697
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6703
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6710
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6718
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6724
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6732
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6738
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6746
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6752
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6761
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6765
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6770
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6774
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6781
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6786
		{
			yyVAL.str = ""
		}
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6790
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1055:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6796
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6809
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6820
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6824
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6830
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6836
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6842
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6849
		{
			yyVAL.str = ""
		}
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6853
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6858
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6862
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6868
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6876
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6884
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6892
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6900
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6905
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6917
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6928
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7037
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7041
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7047
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7060
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7064
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7070
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7083
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7087
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7091
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7096
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7100
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7106
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7113
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7119
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7128
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1090:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7135
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7146
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7150
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7156
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7165
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7169
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7173
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7178
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7182
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7186
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7190
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7196
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7227
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7231
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7257
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7263
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7275
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7281
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7287
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7293
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7299
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7307
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7311
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7317
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7331
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7345
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7349
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7353
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7357
		{
			yyLOCAL = tree.INDEX_TYPE_LLM
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7361
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7365
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7369
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7373
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7379
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7394
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7398
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7409
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7413
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7418
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7422
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7428
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7432
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7438
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7447
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7456
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7462
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7466
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7472
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7483
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7489
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7507
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7525
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7543
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7559
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7563
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7572
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7584
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7593
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7605
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7615
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7625
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7636
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7646
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7657
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7665
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7676
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7683
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7693
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7706
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7714
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7723
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7732
		{
			yyVAL.str = ""
		}
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7736
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7742
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7746
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7751
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7755
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7762
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7774
		{
			yyVAL.str = ""
		}
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7778
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1172:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7784
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7805
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7819
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7823
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7827
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7833
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7837
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7844
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7851
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7858
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7865
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7869
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7873
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7877
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7881
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7888
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7895
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7899
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7906
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7913
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7917
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7923
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7929
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7933
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7940
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7947
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7954
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7961
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7965
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7970
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7974
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7978
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7983
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7987
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8000
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8004
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8012
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8020
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8024
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8036
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8040
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8046
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8050
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8056
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8069
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8083
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8087
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8093
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8097
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8103
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8112
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8123
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8127
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8132
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8136
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8142
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8147
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8155
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8159
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8169
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8173
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8184
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8192
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8200
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8208
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8219
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8228
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8238
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8248
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8252
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8257
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8261
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8267
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8271
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8277
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8286
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8296
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8300
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8306
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8310
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8316
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8325
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8335
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8339
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8345
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8349
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8353
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8359
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8363
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8367
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8371
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8375
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8379
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8383
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8388
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8392
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8396
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8400
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8404
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8408
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8412
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8416
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8420
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8424
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8428
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8432
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8436
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8442
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8448
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8452
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8456
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8460
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8464
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8470
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8476
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8482
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8488
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8494
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8500
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8504
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8508
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8512
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8517
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8528
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8532
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8538
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8549
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8553
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8559
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8563
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8567
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8571
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8575
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8579
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8593
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8597
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8606
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8612
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8620
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8624
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8631
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8640
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8648
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8656
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8663
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8667
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8673
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8677
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8681
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8687
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8691
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8697
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8710
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8723
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "llm":
					keyTyp = tree.INDEX_TYPE_LLM
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8764
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "llm":
					keyTyp = tree.INDEX_TYPE_LLM
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8806
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8820
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8826
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8839
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8852
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8865
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8878
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8893
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8903
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8909
		{
			yyVAL.str = ""
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8913
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8923
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8929
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8935
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8957
		{
			yyVAL.str = ""
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8961
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8967
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8973
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8977
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8982
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8990
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8994
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8998
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9002
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9008
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9014
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9018
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9023
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9030
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9034
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9040
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9044
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9050
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9054
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9058
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9062
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9066
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9070
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9075
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9079
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9083
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9087
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9091
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9095
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9099
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9103
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9107
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9111
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9125
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9129
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9133
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9137
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9141
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9145
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9151
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9155
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9160
		{
			yyVAL.str = ""
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9164
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9170
		{
			yyVAL.str = ""
		}
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9174
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1407:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9180
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9197
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9204
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9211
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9218
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9225
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9234
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9240
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9246
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9250
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9254
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9258
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9262
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9267
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9274
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9278
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9282
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9287
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9291
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9296
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9300
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9316
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9322
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9326
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9330
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9334
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9338
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9342
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9346
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9350
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9354
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9358
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9362
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9366
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9370
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9376
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9380
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9384
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9388
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9392
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9396
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9400
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9404
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9408
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9412
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9454
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9458
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9462
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9467
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9475
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9479
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9483
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9487
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9491
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9501
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9505
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9509
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9513
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9517
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9521
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9525
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9531
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9540
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9549
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9560
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9570
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9580
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9589
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9599
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9609
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9619
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9628
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9638
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9642
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9647
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9651
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9657
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9661
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9667
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9676
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9688
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9705
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9722
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9735
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9748
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9760
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9774
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9789
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9804
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9821
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9836
		{
		}
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9843
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9847
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9851
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9857
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9861
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9865
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9869
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9875
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9879
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9883
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9889
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9897
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9907
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9911
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9918
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9923
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9927
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9932
		{
			yyVAL.str = ","
		}
	case 1527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9936
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9941
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9945
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1530:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9950
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9957
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9983
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9995
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10007
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10018
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10029
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10040
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10050
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10060
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10071
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10082
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10093
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10104
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10115
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10126
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10137
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10148
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10159
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10170
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10181
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10192
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10203
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10214
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10232
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10241
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10250
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10259
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10268
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10279
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10288
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10298
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10307
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10316
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10325
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10334
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10346
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10357
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10370
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10382
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10405
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10441
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10454
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10467
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10479
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10488
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10496
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10504
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10517
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10526
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10537
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10548
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10557
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10569
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10579
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10589
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10598
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10609
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10618
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10628
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10637
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10646
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10656
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10660
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10666
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10670
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10689
		{
		}
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10691
		{
		}
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10732
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10744
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10748
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10752
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10758
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10763
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10767
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10773
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10777
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10783
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10787
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10794
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10798
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10802
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10811
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10815
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10819
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10824
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10828
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10834
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10838
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10842
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10846
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10850
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10854
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10858
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10862
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10866
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10870
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10878
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10882
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10886
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10890
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10894
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10898
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10902
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10906
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10910
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10914
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10920
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10924
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10930
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10934
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10941
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10945
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10949
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10955
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10959
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10963
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10967
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10971
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10975
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10979
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10985
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10989
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10993
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10997
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11003
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11016
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11021
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11027
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11031
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11044
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11049
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11053
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11057
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11061
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11065
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11072
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11076
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11080
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11084
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11091
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11102
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11107
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11113
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11125
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11137
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11149
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11162
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11175
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11188
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11201
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11214
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11227
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11240
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11253
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11266
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11279
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11294
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11321
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11363
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11399
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11435
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11452
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11464
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11484
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11504
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11524
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11540
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11553
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11566
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11579
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11592
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11604
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11616
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11628
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11640
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11652
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11664
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11676
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11688
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11700
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11712
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11725
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11738
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11751
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11764
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11779
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11787
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11796
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11806
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11829
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11834
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11840
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11847
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11851
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11856
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11860
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11866
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11872
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11879
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11886
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11895
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11902
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11909
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11918
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11922
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11926
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11932
		{
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11934
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11944
		{
			yyVAL.str = ""
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11948
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
